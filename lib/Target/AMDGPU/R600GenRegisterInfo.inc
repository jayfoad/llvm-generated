/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Target Register Enum Values                                                *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_ENUM
#undef GET_REGINFO_ENUM

namespace llvm {

class MCRegisterClass;
extern const MCRegisterClass R600MCRegisterClasses[];

namespace R600 {
enum {
  NoRegister,
  ALU_CONST = 1,
  ALU_LITERAL_W = 2,
  ALU_LITERAL_X = 3,
  ALU_LITERAL_Y = 4,
  ALU_LITERAL_Z = 5,
  ALU_PARAM = 6,
  AR_X = 7,
  HALF = 8,
  INDIRECT_BASE_ADDR = 9,
  LDS_DIRECT_A = 10,
  LDS_DIRECT_B = 11,
  NEG_HALF = 12,
  NEG_ONE = 13,
  ONE = 14,
  ONE_INT = 15,
  OQA = 16,
  OQAP = 17,
  OQB = 18,
  OQBP = 19,
  PREDICATE_BIT = 20,
  PRED_SEL_OFF = 21,
  PRED_SEL_ONE = 22,
  PRED_SEL_ZERO = 23,
  PS = 24,
  PV_W = 25,
  PV_X = 26,
  PV_Y = 27,
  PV_Z = 28,
  ZERO = 29,
  ArrayBase448 = 30,
  ArrayBase449 = 31,
  ArrayBase450 = 32,
  ArrayBase451 = 33,
  ArrayBase452 = 34,
  ArrayBase453 = 35,
  ArrayBase454 = 36,
  ArrayBase455 = 37,
  ArrayBase456 = 38,
  ArrayBase457 = 39,
  ArrayBase458 = 40,
  ArrayBase459 = 41,
  ArrayBase460 = 42,
  ArrayBase461 = 43,
  ArrayBase462 = 44,
  ArrayBase463 = 45,
  ArrayBase464 = 46,
  ArrayBase465 = 47,
  ArrayBase466 = 48,
  ArrayBase467 = 49,
  ArrayBase468 = 50,
  ArrayBase469 = 51,
  ArrayBase470 = 52,
  ArrayBase471 = 53,
  ArrayBase472 = 54,
  ArrayBase473 = 55,
  ArrayBase474 = 56,
  ArrayBase475 = 57,
  ArrayBase476 = 58,
  ArrayBase477 = 59,
  ArrayBase478 = 60,
  ArrayBase479 = 61,
  ArrayBase480 = 62,
  Addr0_W = 63,
  Addr1_W = 64,
  Addr2_W = 65,
  Addr3_W = 66,
  Addr4_W = 67,
  Addr5_W = 68,
  Addr6_W = 69,
  Addr7_W = 70,
  Addr8_W = 71,
  Addr9_W = 72,
  Addr10_W = 73,
  Addr11_W = 74,
  Addr12_W = 75,
  Addr13_W = 76,
  Addr14_W = 77,
  Addr15_W = 78,
  Addr16_W = 79,
  Addr17_W = 80,
  Addr18_W = 81,
  Addr19_W = 82,
  Addr20_W = 83,
  Addr21_W = 84,
  Addr22_W = 85,
  Addr23_W = 86,
  Addr24_W = 87,
  Addr25_W = 88,
  Addr26_W = 89,
  Addr27_W = 90,
  Addr28_W = 91,
  Addr29_W = 92,
  Addr30_W = 93,
  Addr31_W = 94,
  Addr32_W = 95,
  Addr33_W = 96,
  Addr34_W = 97,
  Addr35_W = 98,
  Addr36_W = 99,
  Addr37_W = 100,
  Addr38_W = 101,
  Addr39_W = 102,
  Addr40_W = 103,
  Addr41_W = 104,
  Addr42_W = 105,
  Addr43_W = 106,
  Addr44_W = 107,
  Addr45_W = 108,
  Addr46_W = 109,
  Addr47_W = 110,
  Addr48_W = 111,
  Addr49_W = 112,
  Addr50_W = 113,
  Addr51_W = 114,
  Addr52_W = 115,
  Addr53_W = 116,
  Addr54_W = 117,
  Addr55_W = 118,
  Addr56_W = 119,
  Addr57_W = 120,
  Addr58_W = 121,
  Addr59_W = 122,
  Addr60_W = 123,
  Addr61_W = 124,
  Addr62_W = 125,
  Addr63_W = 126,
  Addr64_W = 127,
  Addr65_W = 128,
  Addr66_W = 129,
  Addr67_W = 130,
  Addr68_W = 131,
  Addr69_W = 132,
  Addr70_W = 133,
  Addr71_W = 134,
  Addr72_W = 135,
  Addr73_W = 136,
  Addr74_W = 137,
  Addr75_W = 138,
  Addr76_W = 139,
  Addr77_W = 140,
  Addr78_W = 141,
  Addr79_W = 142,
  Addr80_W = 143,
  Addr81_W = 144,
  Addr82_W = 145,
  Addr83_W = 146,
  Addr84_W = 147,
  Addr85_W = 148,
  Addr86_W = 149,
  Addr87_W = 150,
  Addr88_W = 151,
  Addr89_W = 152,
  Addr90_W = 153,
  Addr91_W = 154,
  Addr92_W = 155,
  Addr93_W = 156,
  Addr94_W = 157,
  Addr95_W = 158,
  Addr96_W = 159,
  Addr97_W = 160,
  Addr98_W = 161,
  Addr99_W = 162,
  Addr100_W = 163,
  Addr101_W = 164,
  Addr102_W = 165,
  Addr103_W = 166,
  Addr104_W = 167,
  Addr105_W = 168,
  Addr106_W = 169,
  Addr107_W = 170,
  Addr108_W = 171,
  Addr109_W = 172,
  Addr110_W = 173,
  Addr111_W = 174,
  Addr112_W = 175,
  Addr113_W = 176,
  Addr114_W = 177,
  Addr115_W = 178,
  Addr116_W = 179,
  Addr117_W = 180,
  Addr118_W = 181,
  Addr119_W = 182,
  Addr120_W = 183,
  Addr121_W = 184,
  Addr122_W = 185,
  Addr123_W = 186,
  Addr124_W = 187,
  Addr125_W = 188,
  Addr126_W = 189,
  Addr127_W = 190,
  Addr0_X = 191,
  Addr1_X = 192,
  Addr2_X = 193,
  Addr3_X = 194,
  Addr4_X = 195,
  Addr5_X = 196,
  Addr6_X = 197,
  Addr7_X = 198,
  Addr8_X = 199,
  Addr9_X = 200,
  Addr10_X = 201,
  Addr11_X = 202,
  Addr12_X = 203,
  Addr13_X = 204,
  Addr14_X = 205,
  Addr15_X = 206,
  Addr16_X = 207,
  Addr17_X = 208,
  Addr18_X = 209,
  Addr19_X = 210,
  Addr20_X = 211,
  Addr21_X = 212,
  Addr22_X = 213,
  Addr23_X = 214,
  Addr24_X = 215,
  Addr25_X = 216,
  Addr26_X = 217,
  Addr27_X = 218,
  Addr28_X = 219,
  Addr29_X = 220,
  Addr30_X = 221,
  Addr31_X = 222,
  Addr32_X = 223,
  Addr33_X = 224,
  Addr34_X = 225,
  Addr35_X = 226,
  Addr36_X = 227,
  Addr37_X = 228,
  Addr38_X = 229,
  Addr39_X = 230,
  Addr40_X = 231,
  Addr41_X = 232,
  Addr42_X = 233,
  Addr43_X = 234,
  Addr44_X = 235,
  Addr45_X = 236,
  Addr46_X = 237,
  Addr47_X = 238,
  Addr48_X = 239,
  Addr49_X = 240,
  Addr50_X = 241,
  Addr51_X = 242,
  Addr52_X = 243,
  Addr53_X = 244,
  Addr54_X = 245,
  Addr55_X = 246,
  Addr56_X = 247,
  Addr57_X = 248,
  Addr58_X = 249,
  Addr59_X = 250,
  Addr60_X = 251,
  Addr61_X = 252,
  Addr62_X = 253,
  Addr63_X = 254,
  Addr64_X = 255,
  Addr65_X = 256,
  Addr66_X = 257,
  Addr67_X = 258,
  Addr68_X = 259,
  Addr69_X = 260,
  Addr70_X = 261,
  Addr71_X = 262,
  Addr72_X = 263,
  Addr73_X = 264,
  Addr74_X = 265,
  Addr75_X = 266,
  Addr76_X = 267,
  Addr77_X = 268,
  Addr78_X = 269,
  Addr79_X = 270,
  Addr80_X = 271,
  Addr81_X = 272,
  Addr82_X = 273,
  Addr83_X = 274,
  Addr84_X = 275,
  Addr85_X = 276,
  Addr86_X = 277,
  Addr87_X = 278,
  Addr88_X = 279,
  Addr89_X = 280,
  Addr90_X = 281,
  Addr91_X = 282,
  Addr92_X = 283,
  Addr93_X = 284,
  Addr94_X = 285,
  Addr95_X = 286,
  Addr96_X = 287,
  Addr97_X = 288,
  Addr98_X = 289,
  Addr99_X = 290,
  Addr100_X = 291,
  Addr101_X = 292,
  Addr102_X = 293,
  Addr103_X = 294,
  Addr104_X = 295,
  Addr105_X = 296,
  Addr106_X = 297,
  Addr107_X = 298,
  Addr108_X = 299,
  Addr109_X = 300,
  Addr110_X = 301,
  Addr111_X = 302,
  Addr112_X = 303,
  Addr113_X = 304,
  Addr114_X = 305,
  Addr115_X = 306,
  Addr116_X = 307,
  Addr117_X = 308,
  Addr118_X = 309,
  Addr119_X = 310,
  Addr120_X = 311,
  Addr121_X = 312,
  Addr122_X = 313,
  Addr123_X = 314,
  Addr124_X = 315,
  Addr125_X = 316,
  Addr126_X = 317,
  Addr127_X = 318,
  Addr0_Y = 319,
  Addr1_Y = 320,
  Addr2_Y = 321,
  Addr3_Y = 322,
  Addr4_Y = 323,
  Addr5_Y = 324,
  Addr6_Y = 325,
  Addr7_Y = 326,
  Addr8_Y = 327,
  Addr9_Y = 328,
  Addr10_Y = 329,
  Addr11_Y = 330,
  Addr12_Y = 331,
  Addr13_Y = 332,
  Addr14_Y = 333,
  Addr15_Y = 334,
  Addr16_Y = 335,
  Addr17_Y = 336,
  Addr18_Y = 337,
  Addr19_Y = 338,
  Addr20_Y = 339,
  Addr21_Y = 340,
  Addr22_Y = 341,
  Addr23_Y = 342,
  Addr24_Y = 343,
  Addr25_Y = 344,
  Addr26_Y = 345,
  Addr27_Y = 346,
  Addr28_Y = 347,
  Addr29_Y = 348,
  Addr30_Y = 349,
  Addr31_Y = 350,
  Addr32_Y = 351,
  Addr33_Y = 352,
  Addr34_Y = 353,
  Addr35_Y = 354,
  Addr36_Y = 355,
  Addr37_Y = 356,
  Addr38_Y = 357,
  Addr39_Y = 358,
  Addr40_Y = 359,
  Addr41_Y = 360,
  Addr42_Y = 361,
  Addr43_Y = 362,
  Addr44_Y = 363,
  Addr45_Y = 364,
  Addr46_Y = 365,
  Addr47_Y = 366,
  Addr48_Y = 367,
  Addr49_Y = 368,
  Addr50_Y = 369,
  Addr51_Y = 370,
  Addr52_Y = 371,
  Addr53_Y = 372,
  Addr54_Y = 373,
  Addr55_Y = 374,
  Addr56_Y = 375,
  Addr57_Y = 376,
  Addr58_Y = 377,
  Addr59_Y = 378,
  Addr60_Y = 379,
  Addr61_Y = 380,
  Addr62_Y = 381,
  Addr63_Y = 382,
  Addr64_Y = 383,
  Addr65_Y = 384,
  Addr66_Y = 385,
  Addr67_Y = 386,
  Addr68_Y = 387,
  Addr69_Y = 388,
  Addr70_Y = 389,
  Addr71_Y = 390,
  Addr72_Y = 391,
  Addr73_Y = 392,
  Addr74_Y = 393,
  Addr75_Y = 394,
  Addr76_Y = 395,
  Addr77_Y = 396,
  Addr78_Y = 397,
  Addr79_Y = 398,
  Addr80_Y = 399,
  Addr81_Y = 400,
  Addr82_Y = 401,
  Addr83_Y = 402,
  Addr84_Y = 403,
  Addr85_Y = 404,
  Addr86_Y = 405,
  Addr87_Y = 406,
  Addr88_Y = 407,
  Addr89_Y = 408,
  Addr90_Y = 409,
  Addr91_Y = 410,
  Addr92_Y = 411,
  Addr93_Y = 412,
  Addr94_Y = 413,
  Addr95_Y = 414,
  Addr96_Y = 415,
  Addr97_Y = 416,
  Addr98_Y = 417,
  Addr99_Y = 418,
  Addr100_Y = 419,
  Addr101_Y = 420,
  Addr102_Y = 421,
  Addr103_Y = 422,
  Addr104_Y = 423,
  Addr105_Y = 424,
  Addr106_Y = 425,
  Addr107_Y = 426,
  Addr108_Y = 427,
  Addr109_Y = 428,
  Addr110_Y = 429,
  Addr111_Y = 430,
  Addr112_Y = 431,
  Addr113_Y = 432,
  Addr114_Y = 433,
  Addr115_Y = 434,
  Addr116_Y = 435,
  Addr117_Y = 436,
  Addr118_Y = 437,
  Addr119_Y = 438,
  Addr120_Y = 439,
  Addr121_Y = 440,
  Addr122_Y = 441,
  Addr123_Y = 442,
  Addr124_Y = 443,
  Addr125_Y = 444,
  Addr126_Y = 445,
  Addr127_Y = 446,
  Addr0_Z = 447,
  Addr1_Z = 448,
  Addr2_Z = 449,
  Addr3_Z = 450,
  Addr4_Z = 451,
  Addr5_Z = 452,
  Addr6_Z = 453,
  Addr7_Z = 454,
  Addr8_Z = 455,
  Addr9_Z = 456,
  Addr10_Z = 457,
  Addr11_Z = 458,
  Addr12_Z = 459,
  Addr13_Z = 460,
  Addr14_Z = 461,
  Addr15_Z = 462,
  Addr16_Z = 463,
  Addr17_Z = 464,
  Addr18_Z = 465,
  Addr19_Z = 466,
  Addr20_Z = 467,
  Addr21_Z = 468,
  Addr22_Z = 469,
  Addr23_Z = 470,
  Addr24_Z = 471,
  Addr25_Z = 472,
  Addr26_Z = 473,
  Addr27_Z = 474,
  Addr28_Z = 475,
  Addr29_Z = 476,
  Addr30_Z = 477,
  Addr31_Z = 478,
  Addr32_Z = 479,
  Addr33_Z = 480,
  Addr34_Z = 481,
  Addr35_Z = 482,
  Addr36_Z = 483,
  Addr37_Z = 484,
  Addr38_Z = 485,
  Addr39_Z = 486,
  Addr40_Z = 487,
  Addr41_Z = 488,
  Addr42_Z = 489,
  Addr43_Z = 490,
  Addr44_Z = 491,
  Addr45_Z = 492,
  Addr46_Z = 493,
  Addr47_Z = 494,
  Addr48_Z = 495,
  Addr49_Z = 496,
  Addr50_Z = 497,
  Addr51_Z = 498,
  Addr52_Z = 499,
  Addr53_Z = 500,
  Addr54_Z = 501,
  Addr55_Z = 502,
  Addr56_Z = 503,
  Addr57_Z = 504,
  Addr58_Z = 505,
  Addr59_Z = 506,
  Addr60_Z = 507,
  Addr61_Z = 508,
  Addr62_Z = 509,
  Addr63_Z = 510,
  Addr64_Z = 511,
  Addr65_Z = 512,
  Addr66_Z = 513,
  Addr67_Z = 514,
  Addr68_Z = 515,
  Addr69_Z = 516,
  Addr70_Z = 517,
  Addr71_Z = 518,
  Addr72_Z = 519,
  Addr73_Z = 520,
  Addr74_Z = 521,
  Addr75_Z = 522,
  Addr76_Z = 523,
  Addr77_Z = 524,
  Addr78_Z = 525,
  Addr79_Z = 526,
  Addr80_Z = 527,
  Addr81_Z = 528,
  Addr82_Z = 529,
  Addr83_Z = 530,
  Addr84_Z = 531,
  Addr85_Z = 532,
  Addr86_Z = 533,
  Addr87_Z = 534,
  Addr88_Z = 535,
  Addr89_Z = 536,
  Addr90_Z = 537,
  Addr91_Z = 538,
  Addr92_Z = 539,
  Addr93_Z = 540,
  Addr94_Z = 541,
  Addr95_Z = 542,
  Addr96_Z = 543,
  Addr97_Z = 544,
  Addr98_Z = 545,
  Addr99_Z = 546,
  Addr100_Z = 547,
  Addr101_Z = 548,
  Addr102_Z = 549,
  Addr103_Z = 550,
  Addr104_Z = 551,
  Addr105_Z = 552,
  Addr106_Z = 553,
  Addr107_Z = 554,
  Addr108_Z = 555,
  Addr109_Z = 556,
  Addr110_Z = 557,
  Addr111_Z = 558,
  Addr112_Z = 559,
  Addr113_Z = 560,
  Addr114_Z = 561,
  Addr115_Z = 562,
  Addr116_Z = 563,
  Addr117_Z = 564,
  Addr118_Z = 565,
  Addr119_Z = 566,
  Addr120_Z = 567,
  Addr121_Z = 568,
  Addr122_Z = 569,
  Addr123_Z = 570,
  Addr124_Z = 571,
  Addr125_Z = 572,
  Addr126_Z = 573,
  Addr127_Z = 574,
  T0_W = 575,
  T1_W = 576,
  T2_W = 577,
  T3_W = 578,
  T4_W = 579,
  T5_W = 580,
  T6_W = 581,
  T7_W = 582,
  T8_W = 583,
  T9_W = 584,
  T10_W = 585,
  T11_W = 586,
  T12_W = 587,
  T13_W = 588,
  T14_W = 589,
  T15_W = 590,
  T16_W = 591,
  T17_W = 592,
  T18_W = 593,
  T19_W = 594,
  T20_W = 595,
  T21_W = 596,
  T22_W = 597,
  T23_W = 598,
  T24_W = 599,
  T25_W = 600,
  T26_W = 601,
  T27_W = 602,
  T28_W = 603,
  T29_W = 604,
  T30_W = 605,
  T31_W = 606,
  T32_W = 607,
  T33_W = 608,
  T34_W = 609,
  T35_W = 610,
  T36_W = 611,
  T37_W = 612,
  T38_W = 613,
  T39_W = 614,
  T40_W = 615,
  T41_W = 616,
  T42_W = 617,
  T43_W = 618,
  T44_W = 619,
  T45_W = 620,
  T46_W = 621,
  T47_W = 622,
  T48_W = 623,
  T49_W = 624,
  T50_W = 625,
  T51_W = 626,
  T52_W = 627,
  T53_W = 628,
  T54_W = 629,
  T55_W = 630,
  T56_W = 631,
  T57_W = 632,
  T58_W = 633,
  T59_W = 634,
  T60_W = 635,
  T61_W = 636,
  T62_W = 637,
  T63_W = 638,
  T64_W = 639,
  T65_W = 640,
  T66_W = 641,
  T67_W = 642,
  T68_W = 643,
  T69_W = 644,
  T70_W = 645,
  T71_W = 646,
  T72_W = 647,
  T73_W = 648,
  T74_W = 649,
  T75_W = 650,
  T76_W = 651,
  T77_W = 652,
  T78_W = 653,
  T79_W = 654,
  T80_W = 655,
  T81_W = 656,
  T82_W = 657,
  T83_W = 658,
  T84_W = 659,
  T85_W = 660,
  T86_W = 661,
  T87_W = 662,
  T88_W = 663,
  T89_W = 664,
  T90_W = 665,
  T91_W = 666,
  T92_W = 667,
  T93_W = 668,
  T94_W = 669,
  T95_W = 670,
  T96_W = 671,
  T97_W = 672,
  T98_W = 673,
  T99_W = 674,
  T100_W = 675,
  T101_W = 676,
  T102_W = 677,
  T103_W = 678,
  T104_W = 679,
  T105_W = 680,
  T106_W = 681,
  T107_W = 682,
  T108_W = 683,
  T109_W = 684,
  T110_W = 685,
  T111_W = 686,
  T112_W = 687,
  T113_W = 688,
  T114_W = 689,
  T115_W = 690,
  T116_W = 691,
  T117_W = 692,
  T118_W = 693,
  T119_W = 694,
  T120_W = 695,
  T121_W = 696,
  T122_W = 697,
  T123_W = 698,
  T124_W = 699,
  T125_W = 700,
  T126_W = 701,
  T127_W = 702,
  T0_X = 703,
  T1_X = 704,
  T2_X = 705,
  T3_X = 706,
  T4_X = 707,
  T5_X = 708,
  T6_X = 709,
  T7_X = 710,
  T8_X = 711,
  T9_X = 712,
  T10_X = 713,
  T11_X = 714,
  T12_X = 715,
  T13_X = 716,
  T14_X = 717,
  T15_X = 718,
  T16_X = 719,
  T17_X = 720,
  T18_X = 721,
  T19_X = 722,
  T20_X = 723,
  T21_X = 724,
  T22_X = 725,
  T23_X = 726,
  T24_X = 727,
  T25_X = 728,
  T26_X = 729,
  T27_X = 730,
  T28_X = 731,
  T29_X = 732,
  T30_X = 733,
  T31_X = 734,
  T32_X = 735,
  T33_X = 736,
  T34_X = 737,
  T35_X = 738,
  T36_X = 739,
  T37_X = 740,
  T38_X = 741,
  T39_X = 742,
  T40_X = 743,
  T41_X = 744,
  T42_X = 745,
  T43_X = 746,
  T44_X = 747,
  T45_X = 748,
  T46_X = 749,
  T47_X = 750,
  T48_X = 751,
  T49_X = 752,
  T50_X = 753,
  T51_X = 754,
  T52_X = 755,
  T53_X = 756,
  T54_X = 757,
  T55_X = 758,
  T56_X = 759,
  T57_X = 760,
  T58_X = 761,
  T59_X = 762,
  T60_X = 763,
  T61_X = 764,
  T62_X = 765,
  T63_X = 766,
  T64_X = 767,
  T65_X = 768,
  T66_X = 769,
  T67_X = 770,
  T68_X = 771,
  T69_X = 772,
  T70_X = 773,
  T71_X = 774,
  T72_X = 775,
  T73_X = 776,
  T74_X = 777,
  T75_X = 778,
  T76_X = 779,
  T77_X = 780,
  T78_X = 781,
  T79_X = 782,
  T80_X = 783,
  T81_X = 784,
  T82_X = 785,
  T83_X = 786,
  T84_X = 787,
  T85_X = 788,
  T86_X = 789,
  T87_X = 790,
  T88_X = 791,
  T89_X = 792,
  T90_X = 793,
  T91_X = 794,
  T92_X = 795,
  T93_X = 796,
  T94_X = 797,
  T95_X = 798,
  T96_X = 799,
  T97_X = 800,
  T98_X = 801,
  T99_X = 802,
  T100_X = 803,
  T101_X = 804,
  T102_X = 805,
  T103_X = 806,
  T104_X = 807,
  T105_X = 808,
  T106_X = 809,
  T107_X = 810,
  T108_X = 811,
  T109_X = 812,
  T110_X = 813,
  T111_X = 814,
  T112_X = 815,
  T113_X = 816,
  T114_X = 817,
  T115_X = 818,
  T116_X = 819,
  T117_X = 820,
  T118_X = 821,
  T119_X = 822,
  T120_X = 823,
  T121_X = 824,
  T122_X = 825,
  T123_X = 826,
  T124_X = 827,
  T125_X = 828,
  T126_X = 829,
  T127_X = 830,
  T0_XY = 831,
  T1_XY = 832,
  T2_XY = 833,
  T3_XY = 834,
  T4_XY = 835,
  T5_XY = 836,
  T6_XY = 837,
  T7_XY = 838,
  T8_XY = 839,
  T9_XY = 840,
  T10_XY = 841,
  T11_XY = 842,
  T12_XY = 843,
  T13_XY = 844,
  T14_XY = 845,
  T15_XY = 846,
  T16_XY = 847,
  T17_XY = 848,
  T18_XY = 849,
  T19_XY = 850,
  T20_XY = 851,
  T21_XY = 852,
  T22_XY = 853,
  T23_XY = 854,
  T24_XY = 855,
  T25_XY = 856,
  T26_XY = 857,
  T27_XY = 858,
  T28_XY = 859,
  T29_XY = 860,
  T30_XY = 861,
  T31_XY = 862,
  T32_XY = 863,
  T33_XY = 864,
  T34_XY = 865,
  T35_XY = 866,
  T36_XY = 867,
  T37_XY = 868,
  T38_XY = 869,
  T39_XY = 870,
  T40_XY = 871,
  T41_XY = 872,
  T42_XY = 873,
  T43_XY = 874,
  T44_XY = 875,
  T45_XY = 876,
  T46_XY = 877,
  T47_XY = 878,
  T48_XY = 879,
  T49_XY = 880,
  T50_XY = 881,
  T51_XY = 882,
  T52_XY = 883,
  T53_XY = 884,
  T54_XY = 885,
  T55_XY = 886,
  T56_XY = 887,
  T57_XY = 888,
  T58_XY = 889,
  T59_XY = 890,
  T60_XY = 891,
  T61_XY = 892,
  T62_XY = 893,
  T63_XY = 894,
  T64_XY = 895,
  T65_XY = 896,
  T66_XY = 897,
  T67_XY = 898,
  T68_XY = 899,
  T69_XY = 900,
  T70_XY = 901,
  T71_XY = 902,
  T72_XY = 903,
  T73_XY = 904,
  T74_XY = 905,
  T75_XY = 906,
  T76_XY = 907,
  T77_XY = 908,
  T78_XY = 909,
  T79_XY = 910,
  T80_XY = 911,
  T81_XY = 912,
  T82_XY = 913,
  T83_XY = 914,
  T84_XY = 915,
  T85_XY = 916,
  T86_XY = 917,
  T87_XY = 918,
  T88_XY = 919,
  T89_XY = 920,
  T90_XY = 921,
  T91_XY = 922,
  T92_XY = 923,
  T93_XY = 924,
  T94_XY = 925,
  T95_XY = 926,
  T96_XY = 927,
  T97_XY = 928,
  T98_XY = 929,
  T99_XY = 930,
  T100_XY = 931,
  T101_XY = 932,
  T102_XY = 933,
  T103_XY = 934,
  T104_XY = 935,
  T105_XY = 936,
  T106_XY = 937,
  T107_XY = 938,
  T108_XY = 939,
  T109_XY = 940,
  T110_XY = 941,
  T111_XY = 942,
  T112_XY = 943,
  T113_XY = 944,
  T114_XY = 945,
  T115_XY = 946,
  T116_XY = 947,
  T117_XY = 948,
  T118_XY = 949,
  T119_XY = 950,
  T120_XY = 951,
  T121_XY = 952,
  T122_XY = 953,
  T123_XY = 954,
  T124_XY = 955,
  T125_XY = 956,
  T126_XY = 957,
  T127_XY = 958,
  T0_XYZW = 959,
  T1_XYZW = 960,
  T2_XYZW = 961,
  T3_XYZW = 962,
  T4_XYZW = 963,
  T5_XYZW = 964,
  T6_XYZW = 965,
  T7_XYZW = 966,
  T8_XYZW = 967,
  T9_XYZW = 968,
  T10_XYZW = 969,
  T11_XYZW = 970,
  T12_XYZW = 971,
  T13_XYZW = 972,
  T14_XYZW = 973,
  T15_XYZW = 974,
  T16_XYZW = 975,
  T17_XYZW = 976,
  T18_XYZW = 977,
  T19_XYZW = 978,
  T20_XYZW = 979,
  T21_XYZW = 980,
  T22_XYZW = 981,
  T23_XYZW = 982,
  T24_XYZW = 983,
  T25_XYZW = 984,
  T26_XYZW = 985,
  T27_XYZW = 986,
  T28_XYZW = 987,
  T29_XYZW = 988,
  T30_XYZW = 989,
  T31_XYZW = 990,
  T32_XYZW = 991,
  T33_XYZW = 992,
  T34_XYZW = 993,
  T35_XYZW = 994,
  T36_XYZW = 995,
  T37_XYZW = 996,
  T38_XYZW = 997,
  T39_XYZW = 998,
  T40_XYZW = 999,
  T41_XYZW = 1000,
  T42_XYZW = 1001,
  T43_XYZW = 1002,
  T44_XYZW = 1003,
  T45_XYZW = 1004,
  T46_XYZW = 1005,
  T47_XYZW = 1006,
  T48_XYZW = 1007,
  T49_XYZW = 1008,
  T50_XYZW = 1009,
  T51_XYZW = 1010,
  T52_XYZW = 1011,
  T53_XYZW = 1012,
  T54_XYZW = 1013,
  T55_XYZW = 1014,
  T56_XYZW = 1015,
  T57_XYZW = 1016,
  T58_XYZW = 1017,
  T59_XYZW = 1018,
  T60_XYZW = 1019,
  T61_XYZW = 1020,
  T62_XYZW = 1021,
  T63_XYZW = 1022,
  T64_XYZW = 1023,
  T65_XYZW = 1024,
  T66_XYZW = 1025,
  T67_XYZW = 1026,
  T68_XYZW = 1027,
  T69_XYZW = 1028,
  T70_XYZW = 1029,
  T71_XYZW = 1030,
  T72_XYZW = 1031,
  T73_XYZW = 1032,
  T74_XYZW = 1033,
  T75_XYZW = 1034,
  T76_XYZW = 1035,
  T77_XYZW = 1036,
  T78_XYZW = 1037,
  T79_XYZW = 1038,
  T80_XYZW = 1039,
  T81_XYZW = 1040,
  T82_XYZW = 1041,
  T83_XYZW = 1042,
  T84_XYZW = 1043,
  T85_XYZW = 1044,
  T86_XYZW = 1045,
  T87_XYZW = 1046,
  T88_XYZW = 1047,
  T89_XYZW = 1048,
  T90_XYZW = 1049,
  T91_XYZW = 1050,
  T92_XYZW = 1051,
  T93_XYZW = 1052,
  T94_XYZW = 1053,
  T95_XYZW = 1054,
  T96_XYZW = 1055,
  T97_XYZW = 1056,
  T98_XYZW = 1057,
  T99_XYZW = 1058,
  T100_XYZW = 1059,
  T101_XYZW = 1060,
  T102_XYZW = 1061,
  T103_XYZW = 1062,
  T104_XYZW = 1063,
  T105_XYZW = 1064,
  T106_XYZW = 1065,
  T107_XYZW = 1066,
  T108_XYZW = 1067,
  T109_XYZW = 1068,
  T110_XYZW = 1069,
  T111_XYZW = 1070,
  T112_XYZW = 1071,
  T113_XYZW = 1072,
  T114_XYZW = 1073,
  T115_XYZW = 1074,
  T116_XYZW = 1075,
  T117_XYZW = 1076,
  T118_XYZW = 1077,
  T119_XYZW = 1078,
  T120_XYZW = 1079,
  T121_XYZW = 1080,
  T122_XYZW = 1081,
  T123_XYZW = 1082,
  T124_XYZW = 1083,
  T125_XYZW = 1084,
  T126_XYZW = 1085,
  T127_XYZW = 1086,
  T0_Y = 1087,
  T1_Y = 1088,
  T2_Y = 1089,
  T3_Y = 1090,
  T4_Y = 1091,
  T5_Y = 1092,
  T6_Y = 1093,
  T7_Y = 1094,
  T8_Y = 1095,
  T9_Y = 1096,
  T10_Y = 1097,
  T11_Y = 1098,
  T12_Y = 1099,
  T13_Y = 1100,
  T14_Y = 1101,
  T15_Y = 1102,
  T16_Y = 1103,
  T17_Y = 1104,
  T18_Y = 1105,
  T19_Y = 1106,
  T20_Y = 1107,
  T21_Y = 1108,
  T22_Y = 1109,
  T23_Y = 1110,
  T24_Y = 1111,
  T25_Y = 1112,
  T26_Y = 1113,
  T27_Y = 1114,
  T28_Y = 1115,
  T29_Y = 1116,
  T30_Y = 1117,
  T31_Y = 1118,
  T32_Y = 1119,
  T33_Y = 1120,
  T34_Y = 1121,
  T35_Y = 1122,
  T36_Y = 1123,
  T37_Y = 1124,
  T38_Y = 1125,
  T39_Y = 1126,
  T40_Y = 1127,
  T41_Y = 1128,
  T42_Y = 1129,
  T43_Y = 1130,
  T44_Y = 1131,
  T45_Y = 1132,
  T46_Y = 1133,
  T47_Y = 1134,
  T48_Y = 1135,
  T49_Y = 1136,
  T50_Y = 1137,
  T51_Y = 1138,
  T52_Y = 1139,
  T53_Y = 1140,
  T54_Y = 1141,
  T55_Y = 1142,
  T56_Y = 1143,
  T57_Y = 1144,
  T58_Y = 1145,
  T59_Y = 1146,
  T60_Y = 1147,
  T61_Y = 1148,
  T62_Y = 1149,
  T63_Y = 1150,
  T64_Y = 1151,
  T65_Y = 1152,
  T66_Y = 1153,
  T67_Y = 1154,
  T68_Y = 1155,
  T69_Y = 1156,
  T70_Y = 1157,
  T71_Y = 1158,
  T72_Y = 1159,
  T73_Y = 1160,
  T74_Y = 1161,
  T75_Y = 1162,
  T76_Y = 1163,
  T77_Y = 1164,
  T78_Y = 1165,
  T79_Y = 1166,
  T80_Y = 1167,
  T81_Y = 1168,
  T82_Y = 1169,
  T83_Y = 1170,
  T84_Y = 1171,
  T85_Y = 1172,
  T86_Y = 1173,
  T87_Y = 1174,
  T88_Y = 1175,
  T89_Y = 1176,
  T90_Y = 1177,
  T91_Y = 1178,
  T92_Y = 1179,
  T93_Y = 1180,
  T94_Y = 1181,
  T95_Y = 1182,
  T96_Y = 1183,
  T97_Y = 1184,
  T98_Y = 1185,
  T99_Y = 1186,
  T100_Y = 1187,
  T101_Y = 1188,
  T102_Y = 1189,
  T103_Y = 1190,
  T104_Y = 1191,
  T105_Y = 1192,
  T106_Y = 1193,
  T107_Y = 1194,
  T108_Y = 1195,
  T109_Y = 1196,
  T110_Y = 1197,
  T111_Y = 1198,
  T112_Y = 1199,
  T113_Y = 1200,
  T114_Y = 1201,
  T115_Y = 1202,
  T116_Y = 1203,
  T117_Y = 1204,
  T118_Y = 1205,
  T119_Y = 1206,
  T120_Y = 1207,
  T121_Y = 1208,
  T122_Y = 1209,
  T123_Y = 1210,
  T124_Y = 1211,
  T125_Y = 1212,
  T126_Y = 1213,
  T127_Y = 1214,
  T0_Z = 1215,
  T1_Z = 1216,
  T2_Z = 1217,
  T3_Z = 1218,
  T4_Z = 1219,
  T5_Z = 1220,
  T6_Z = 1221,
  T7_Z = 1222,
  T8_Z = 1223,
  T9_Z = 1224,
  T10_Z = 1225,
  T11_Z = 1226,
  T12_Z = 1227,
  T13_Z = 1228,
  T14_Z = 1229,
  T15_Z = 1230,
  T16_Z = 1231,
  T17_Z = 1232,
  T18_Z = 1233,
  T19_Z = 1234,
  T20_Z = 1235,
  T21_Z = 1236,
  T22_Z = 1237,
  T23_Z = 1238,
  T24_Z = 1239,
  T25_Z = 1240,
  T26_Z = 1241,
  T27_Z = 1242,
  T28_Z = 1243,
  T29_Z = 1244,
  T30_Z = 1245,
  T31_Z = 1246,
  T32_Z = 1247,
  T33_Z = 1248,
  T34_Z = 1249,
  T35_Z = 1250,
  T36_Z = 1251,
  T37_Z = 1252,
  T38_Z = 1253,
  T39_Z = 1254,
  T40_Z = 1255,
  T41_Z = 1256,
  T42_Z = 1257,
  T43_Z = 1258,
  T44_Z = 1259,
  T45_Z = 1260,
  T46_Z = 1261,
  T47_Z = 1262,
  T48_Z = 1263,
  T49_Z = 1264,
  T50_Z = 1265,
  T51_Z = 1266,
  T52_Z = 1267,
  T53_Z = 1268,
  T54_Z = 1269,
  T55_Z = 1270,
  T56_Z = 1271,
  T57_Z = 1272,
  T58_Z = 1273,
  T59_Z = 1274,
  T60_Z = 1275,
  T61_Z = 1276,
  T62_Z = 1277,
  T63_Z = 1278,
  T64_Z = 1279,
  T65_Z = 1280,
  T66_Z = 1281,
  T67_Z = 1282,
  T68_Z = 1283,
  T69_Z = 1284,
  T70_Z = 1285,
  T71_Z = 1286,
  T72_Z = 1287,
  T73_Z = 1288,
  T74_Z = 1289,
  T75_Z = 1290,
  T76_Z = 1291,
  T77_Z = 1292,
  T78_Z = 1293,
  T79_Z = 1294,
  T80_Z = 1295,
  T81_Z = 1296,
  T82_Z = 1297,
  T83_Z = 1298,
  T84_Z = 1299,
  T85_Z = 1300,
  T86_Z = 1301,
  T87_Z = 1302,
  T88_Z = 1303,
  T89_Z = 1304,
  T90_Z = 1305,
  T91_Z = 1306,
  T92_Z = 1307,
  T93_Z = 1308,
  T94_Z = 1309,
  T95_Z = 1310,
  T96_Z = 1311,
  T97_Z = 1312,
  T98_Z = 1313,
  T99_Z = 1314,
  T100_Z = 1315,
  T101_Z = 1316,
  T102_Z = 1317,
  T103_Z = 1318,
  T104_Z = 1319,
  T105_Z = 1320,
  T106_Z = 1321,
  T107_Z = 1322,
  T108_Z = 1323,
  T109_Z = 1324,
  T110_Z = 1325,
  T111_Z = 1326,
  T112_Z = 1327,
  T113_Z = 1328,
  T114_Z = 1329,
  T115_Z = 1330,
  T116_Z = 1331,
  T117_Z = 1332,
  T118_Z = 1333,
  T119_Z = 1334,
  T120_Z = 1335,
  T121_Z = 1336,
  T122_Z = 1337,
  T123_Z = 1338,
  T124_Z = 1339,
  T125_Z = 1340,
  T126_Z = 1341,
  T127_Z = 1342,
  V01_W = 1343,
  V23_W = 1344,
  V0123_W = 1345,
  V01_X = 1346,
  V23_X = 1347,
  V0123_X = 1348,
  V01_Y = 1349,
  V23_Y = 1350,
  V0123_Y = 1351,
  V01_Z = 1352,
  V23_Z = 1353,
  V0123_Z = 1354,
  KC0_128_W = 1355,
  KC0_129_W = 1356,
  KC0_130_W = 1357,
  KC0_131_W = 1358,
  KC0_132_W = 1359,
  KC0_133_W = 1360,
  KC0_134_W = 1361,
  KC0_135_W = 1362,
  KC0_136_W = 1363,
  KC0_137_W = 1364,
  KC0_138_W = 1365,
  KC0_139_W = 1366,
  KC0_140_W = 1367,
  KC0_141_W = 1368,
  KC0_142_W = 1369,
  KC0_143_W = 1370,
  KC0_144_W = 1371,
  KC0_145_W = 1372,
  KC0_146_W = 1373,
  KC0_147_W = 1374,
  KC0_148_W = 1375,
  KC0_149_W = 1376,
  KC0_150_W = 1377,
  KC0_151_W = 1378,
  KC0_152_W = 1379,
  KC0_153_W = 1380,
  KC0_154_W = 1381,
  KC0_155_W = 1382,
  KC0_156_W = 1383,
  KC0_157_W = 1384,
  KC0_158_W = 1385,
  KC0_159_W = 1386,
  KC1_160_W = 1387,
  KC1_161_W = 1388,
  KC1_162_W = 1389,
  KC1_163_W = 1390,
  KC1_164_W = 1391,
  KC1_165_W = 1392,
  KC1_166_W = 1393,
  KC1_167_W = 1394,
  KC1_168_W = 1395,
  KC1_169_W = 1396,
  KC1_170_W = 1397,
  KC1_171_W = 1398,
  KC1_172_W = 1399,
  KC1_173_W = 1400,
  KC1_174_W = 1401,
  KC1_175_W = 1402,
  KC1_176_W = 1403,
  KC1_177_W = 1404,
  KC1_178_W = 1405,
  KC1_179_W = 1406,
  KC1_180_W = 1407,
  KC1_181_W = 1408,
  KC1_182_W = 1409,
  KC1_183_W = 1410,
  KC1_184_W = 1411,
  KC1_185_W = 1412,
  KC1_186_W = 1413,
  KC1_187_W = 1414,
  KC1_188_W = 1415,
  KC1_189_W = 1416,
  KC1_190_W = 1417,
  KC1_191_W = 1418,
  KC0_128_X = 1419,
  KC0_129_X = 1420,
  KC0_130_X = 1421,
  KC0_131_X = 1422,
  KC0_132_X = 1423,
  KC0_133_X = 1424,
  KC0_134_X = 1425,
  KC0_135_X = 1426,
  KC0_136_X = 1427,
  KC0_137_X = 1428,
  KC0_138_X = 1429,
  KC0_139_X = 1430,
  KC0_140_X = 1431,
  KC0_141_X = 1432,
  KC0_142_X = 1433,
  KC0_143_X = 1434,
  KC0_144_X = 1435,
  KC0_145_X = 1436,
  KC0_146_X = 1437,
  KC0_147_X = 1438,
  KC0_148_X = 1439,
  KC0_149_X = 1440,
  KC0_150_X = 1441,
  KC0_151_X = 1442,
  KC0_152_X = 1443,
  KC0_153_X = 1444,
  KC0_154_X = 1445,
  KC0_155_X = 1446,
  KC0_156_X = 1447,
  KC0_157_X = 1448,
  KC0_158_X = 1449,
  KC0_159_X = 1450,
  KC1_160_X = 1451,
  KC1_161_X = 1452,
  KC1_162_X = 1453,
  KC1_163_X = 1454,
  KC1_164_X = 1455,
  KC1_165_X = 1456,
  KC1_166_X = 1457,
  KC1_167_X = 1458,
  KC1_168_X = 1459,
  KC1_169_X = 1460,
  KC1_170_X = 1461,
  KC1_171_X = 1462,
  KC1_172_X = 1463,
  KC1_173_X = 1464,
  KC1_174_X = 1465,
  KC1_175_X = 1466,
  KC1_176_X = 1467,
  KC1_177_X = 1468,
  KC1_178_X = 1469,
  KC1_179_X = 1470,
  KC1_180_X = 1471,
  KC1_181_X = 1472,
  KC1_182_X = 1473,
  KC1_183_X = 1474,
  KC1_184_X = 1475,
  KC1_185_X = 1476,
  KC1_186_X = 1477,
  KC1_187_X = 1478,
  KC1_188_X = 1479,
  KC1_189_X = 1480,
  KC1_190_X = 1481,
  KC1_191_X = 1482,
  KC0_128_XYZW = 1483,
  KC0_129_XYZW = 1484,
  KC0_130_XYZW = 1485,
  KC0_131_XYZW = 1486,
  KC0_132_XYZW = 1487,
  KC0_133_XYZW = 1488,
  KC0_134_XYZW = 1489,
  KC0_135_XYZW = 1490,
  KC0_136_XYZW = 1491,
  KC0_137_XYZW = 1492,
  KC0_138_XYZW = 1493,
  KC0_139_XYZW = 1494,
  KC0_140_XYZW = 1495,
  KC0_141_XYZW = 1496,
  KC0_142_XYZW = 1497,
  KC0_143_XYZW = 1498,
  KC0_144_XYZW = 1499,
  KC0_145_XYZW = 1500,
  KC0_146_XYZW = 1501,
  KC0_147_XYZW = 1502,
  KC0_148_XYZW = 1503,
  KC0_149_XYZW = 1504,
  KC0_150_XYZW = 1505,
  KC0_151_XYZW = 1506,
  KC0_152_XYZW = 1507,
  KC0_153_XYZW = 1508,
  KC0_154_XYZW = 1509,
  KC0_155_XYZW = 1510,
  KC0_156_XYZW = 1511,
  KC0_157_XYZW = 1512,
  KC0_158_XYZW = 1513,
  KC0_159_XYZW = 1514,
  KC1_160_XYZW = 1515,
  KC1_161_XYZW = 1516,
  KC1_162_XYZW = 1517,
  KC1_163_XYZW = 1518,
  KC1_164_XYZW = 1519,
  KC1_165_XYZW = 1520,
  KC1_166_XYZW = 1521,
  KC1_167_XYZW = 1522,
  KC1_168_XYZW = 1523,
  KC1_169_XYZW = 1524,
  KC1_170_XYZW = 1525,
  KC1_171_XYZW = 1526,
  KC1_172_XYZW = 1527,
  KC1_173_XYZW = 1528,
  KC1_174_XYZW = 1529,
  KC1_175_XYZW = 1530,
  KC1_176_XYZW = 1531,
  KC1_177_XYZW = 1532,
  KC1_178_XYZW = 1533,
  KC1_179_XYZW = 1534,
  KC1_180_XYZW = 1535,
  KC1_181_XYZW = 1536,
  KC1_182_XYZW = 1537,
  KC1_183_XYZW = 1538,
  KC1_184_XYZW = 1539,
  KC1_185_XYZW = 1540,
  KC1_186_XYZW = 1541,
  KC1_187_XYZW = 1542,
  KC1_188_XYZW = 1543,
  KC1_189_XYZW = 1544,
  KC1_190_XYZW = 1545,
  KC1_191_XYZW = 1546,
  KC0_128_Y = 1547,
  KC0_129_Y = 1548,
  KC0_130_Y = 1549,
  KC0_131_Y = 1550,
  KC0_132_Y = 1551,
  KC0_133_Y = 1552,
  KC0_134_Y = 1553,
  KC0_135_Y = 1554,
  KC0_136_Y = 1555,
  KC0_137_Y = 1556,
  KC0_138_Y = 1557,
  KC0_139_Y = 1558,
  KC0_140_Y = 1559,
  KC0_141_Y = 1560,
  KC0_142_Y = 1561,
  KC0_143_Y = 1562,
  KC0_144_Y = 1563,
  KC0_145_Y = 1564,
  KC0_146_Y = 1565,
  KC0_147_Y = 1566,
  KC0_148_Y = 1567,
  KC0_149_Y = 1568,
  KC0_150_Y = 1569,
  KC0_151_Y = 1570,
  KC0_152_Y = 1571,
  KC0_153_Y = 1572,
  KC0_154_Y = 1573,
  KC0_155_Y = 1574,
  KC0_156_Y = 1575,
  KC0_157_Y = 1576,
  KC0_158_Y = 1577,
  KC0_159_Y = 1578,
  KC1_160_Y = 1579,
  KC1_161_Y = 1580,
  KC1_162_Y = 1581,
  KC1_163_Y = 1582,
  KC1_164_Y = 1583,
  KC1_165_Y = 1584,
  KC1_166_Y = 1585,
  KC1_167_Y = 1586,
  KC1_168_Y = 1587,
  KC1_169_Y = 1588,
  KC1_170_Y = 1589,
  KC1_171_Y = 1590,
  KC1_172_Y = 1591,
  KC1_173_Y = 1592,
  KC1_174_Y = 1593,
  KC1_175_Y = 1594,
  KC1_176_Y = 1595,
  KC1_177_Y = 1596,
  KC1_178_Y = 1597,
  KC1_179_Y = 1598,
  KC1_180_Y = 1599,
  KC1_181_Y = 1600,
  KC1_182_Y = 1601,
  KC1_183_Y = 1602,
  KC1_184_Y = 1603,
  KC1_185_Y = 1604,
  KC1_186_Y = 1605,
  KC1_187_Y = 1606,
  KC1_188_Y = 1607,
  KC1_189_Y = 1608,
  KC1_190_Y = 1609,
  KC1_191_Y = 1610,
  KC0_128_Z = 1611,
  KC0_129_Z = 1612,
  KC0_130_Z = 1613,
  KC0_131_Z = 1614,
  KC0_132_Z = 1615,
  KC0_133_Z = 1616,
  KC0_134_Z = 1617,
  KC0_135_Z = 1618,
  KC0_136_Z = 1619,
  KC0_137_Z = 1620,
  KC0_138_Z = 1621,
  KC0_139_Z = 1622,
  KC0_140_Z = 1623,
  KC0_141_Z = 1624,
  KC0_142_Z = 1625,
  KC0_143_Z = 1626,
  KC0_144_Z = 1627,
  KC0_145_Z = 1628,
  KC0_146_Z = 1629,
  KC0_147_Z = 1630,
  KC0_148_Z = 1631,
  KC0_149_Z = 1632,
  KC0_150_Z = 1633,
  KC0_151_Z = 1634,
  KC0_152_Z = 1635,
  KC0_153_Z = 1636,
  KC0_154_Z = 1637,
  KC0_155_Z = 1638,
  KC0_156_Z = 1639,
  KC0_157_Z = 1640,
  KC0_158_Z = 1641,
  KC0_159_Z = 1642,
  KC1_160_Z = 1643,
  KC1_161_Z = 1644,
  KC1_162_Z = 1645,
  KC1_163_Z = 1646,
  KC1_164_Z = 1647,
  KC1_165_Z = 1648,
  KC1_166_Z = 1649,
  KC1_167_Z = 1650,
  KC1_168_Z = 1651,
  KC1_169_Z = 1652,
  KC1_170_Z = 1653,
  KC1_171_Z = 1654,
  KC1_172_Z = 1655,
  KC1_173_Z = 1656,
  KC1_174_Z = 1657,
  KC1_175_Z = 1658,
  KC1_176_Z = 1659,
  KC1_177_Z = 1660,
  KC1_178_Z = 1661,
  KC1_179_Z = 1662,
  KC1_180_Z = 1663,
  KC1_181_Z = 1664,
  KC1_182_Z = 1665,
  KC1_183_Z = 1666,
  KC1_184_Z = 1667,
  KC1_185_Z = 1668,
  KC1_186_Z = 1669,
  KC1_187_Z = 1670,
  KC1_188_Z = 1671,
  KC1_189_Z = 1672,
  KC1_190_Z = 1673,
  KC1_191_Z = 1674,
  NUM_TARGET_REGS // 1675
};
} // end namespace R600

// Register classes

namespace R600 {
enum {
  R600_Reg32RegClassID = 0,
  R600_TReg32RegClassID = 1,
  R600_TReg32_XRegClassID = 2,
  R600_AddrRegClassID = 3,
  R600_KC0RegClassID = 4,
  R600_KC1RegClassID = 5,
  R600_TReg32_WRegClassID = 6,
  R600_TReg32_YRegClassID = 7,
  R600_TReg32_ZRegClassID = 8,
  R600_ArrayBaseRegClassID = 9,
  R600_KC0_WRegClassID = 10,
  R600_KC0_XRegClassID = 11,
  R600_KC0_YRegClassID = 12,
  R600_KC0_ZRegClassID = 13,
  R600_KC1_WRegClassID = 14,
  R600_KC1_XRegClassID = 15,
  R600_KC1_YRegClassID = 16,
  R600_KC1_ZRegClassID = 17,
  R600_LDS_SRC_REGRegClassID = 18,
  R600_PredicateRegClassID = 19,
  R600_Addr_WRegClassID = 20,
  R600_Addr_YRegClassID = 21,
  R600_Addr_ZRegClassID = 22,
  R600_LDS_SRC_REG_and_R600_Reg32RegClassID = 23,
  R600_Predicate_BitRegClassID = 24,
  R600_Reg64RegClassID = 25,
  R600_Reg64VerticalRegClassID = 26,
  R600_Reg64Vertical_with_sub0_in_R600_TReg32_WRegClassID = 27,
  R600_Reg64Vertical_with_sub0_in_R600_TReg32_XRegClassID = 28,
  R600_Reg64Vertical_with_sub0_in_R600_TReg32_YRegClassID = 29,
  R600_Reg64Vertical_with_sub0_in_R600_TReg32_ZRegClassID = 30,
  R600_Reg128RegClassID = 31,
  R600_Reg128VerticalRegClassID = 32,
  R600_Reg128Vertical_with_sub0_in_R600_TReg32_WRegClassID = 33,
  R600_Reg128Vertical_with_sub0_in_R600_TReg32_XRegClassID = 34,
  R600_Reg128Vertical_with_sub0_in_R600_TReg32_YRegClassID = 35,
  R600_Reg128Vertical_with_sub0_in_R600_TReg32_ZRegClassID = 36,

};
} // end namespace R600


// Subregister indices

namespace R600 {
enum : uint16_t {
  NoSubRegister,
  sub0,	// 1
  sub1,	// 2
  sub2,	// 3
  sub3,	// 4
  sub4,	// 5
  sub5,	// 6
  sub6,	// 7
  sub7,	// 8
  sub8,	// 9
  sub9,	// 10
  sub10,	// 11
  sub11,	// 12
  sub12,	// 13
  sub13,	// 14
  sub14,	// 15
  sub15,	// 16
  NUM_TARGET_SUBREGS
};
} // end namespace R600

// Register pressure sets enum.
namespace R600 {
enum RegisterPressureSets {
  R600_LDS_SRC_REG_and_R600_Reg32 = 0,
  R600_Predicate_Bit = 1,
  R600_Predicate = 2,
  R600_Reg64Vertical_with_sub0_in_R600_TReg32_W = 3,
  R600_Reg64Vertical_with_sub0_in_R600_TReg32_X = 4,
  R600_Reg64Vertical_with_sub0_in_R600_TReg32_Y = 5,
  R600_Reg64Vertical_with_sub0_in_R600_TReg32_Z = 6,
  R600_Reg64Vertical = 7,
  R600_ArrayBase = 8,
  R600_TReg32_W = 9,
  R600_TReg32_Y = 10,
  R600_TReg32_Z = 11,
  R600_Reg64 = 12,
  R600_TReg32_X = 13,
  R600_Reg64_with_R600_Reg64Vertical = 14,
  R600_TReg32_W_with_R600_Reg64Vertical = 15,
  R600_TReg32_Y_with_R600_Reg64Vertical = 16,
  R600_TReg32_Z_with_R600_Reg64Vertical = 17,
  R600_TReg32_X_with_R600_Reg64Vertical = 18,
  R600_TReg32_Y_with_R600_Reg64 = 19,
  R600_TReg32_X_with_R600_Reg64 = 20,
  R600_TReg32 = 21,
  R600_Reg32 = 22,
};
} // end namespace R600

} // end namespace llvm

#endif // GET_REGINFO_ENUM

/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* MC Register Information                                                    *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_MC_DESC
#undef GET_REGINFO_MC_DESC

namespace llvm {

extern const int16_t R600RegDiffLists[] = {
  /* 0 */ -256, 384, 128, -640, 0,
  /* 5 */ -64, 128, 64, -256, 0,
  /* 10 */ -128, 0,
  /* 12 */ -64, 0,
  /* 14 */ -768, 1, 0,
  /* 17 */ -767, 1, 0,
  /* 20 */ -643, 1, 0,
  /* 23 */ -642, 1, 0,
  /* 26 */ -262, 1, 0,
  /* 29 */ -261, 1, 0,
  /* 32 */ -137, 1, 0,
  /* 35 */ -136, 1, 0,
  /* 38 */ -770, 1, 1, 1, 0,
  /* 43 */ -645, 1, 1, 1, 0,
  /* 48 */ -264, 1, 1, 1, 0,
  /* 53 */ -139, 1, 1, 1, 0,
  /* 58 */ 64, 64, 1, 0,
  /* 62 */ 64, 65, 1, 0,
  /* 66 */ 64, 66, 1, 0,
  /* 70 */ 64, 67, 1, 0,
  /* 74 */ 64, 68, 1, 0,
  /* 78 */ 64, 69, 1, 0,
  /* 82 */ 64, 70, 1, 0,
  /* 86 */ 64, 71, 1, 0,
  /* 90 */ 64, 72, 1, 0,
  /* 94 */ 64, 73, 1, 0,
  /* 98 */ 64, 74, 1, 0,
  /* 102 */ 64, 75, 1, 0,
  /* 106 */ 64, 76, 1, 0,
  /* 110 */ 64, 77, 1, 0,
  /* 114 */ 64, 78, 1, 0,
  /* 118 */ 64, 79, 1, 0,
  /* 122 */ 64, 80, 1, 0,
  /* 126 */ 64, 81, 1, 0,
  /* 130 */ 64, 82, 1, 0,
  /* 134 */ 64, 83, 1, 0,
  /* 138 */ 64, 84, 1, 0,
  /* 142 */ 64, 85, 1, 0,
  /* 146 */ 64, 86, 1, 0,
  /* 150 */ 64, 87, 1, 0,
  /* 154 */ 64, 88, 1, 0,
  /* 158 */ 64, 89, 1, 0,
  /* 162 */ 64, 90, 1, 0,
  /* 166 */ 64, 91, 1, 0,
  /* 170 */ 64, 92, 1, 0,
  /* 174 */ 64, 93, 1, 0,
  /* 178 */ 64, 94, 1, 0,
  /* 182 */ 64, 95, 1, 0,
  /* 186 */ 64, 96, 1, 0,
  /* 190 */ 64, 97, 1, 0,
  /* 194 */ 64, 98, 1, 0,
  /* 198 */ 64, 99, 1, 0,
  /* 202 */ 64, 100, 1, 0,
  /* 206 */ 64, 101, 1, 0,
  /* 210 */ 64, 102, 1, 0,
  /* 214 */ 64, 103, 1, 0,
  /* 218 */ 64, 104, 1, 0,
  /* 222 */ 64, 105, 1, 0,
  /* 226 */ 64, 106, 1, 0,
  /* 230 */ 64, 107, 1, 0,
  /* 234 */ 64, 108, 1, 0,
  /* 238 */ 64, 109, 1, 0,
  /* 242 */ 64, 110, 1, 0,
  /* 246 */ 64, 111, 1, 0,
  /* 250 */ 64, 112, 1, 0,
  /* 254 */ 64, 113, 1, 0,
  /* 258 */ 64, 114, 1, 0,
  /* 262 */ 64, 115, 1, 0,
  /* 266 */ 64, 116, 1, 0,
  /* 270 */ 64, 117, 1, 0,
  /* 274 */ 64, 118, 1, 0,
  /* 278 */ 64, 119, 1, 0,
  /* 282 */ 64, 120, 1, 0,
  /* 286 */ 64, 121, 1, 0,
  /* 290 */ 64, 122, 1, 0,
  /* 294 */ 64, 123, 1, 0,
  /* 298 */ 64, 124, 1, 0,
  /* 302 */ 64, 125, 1, 0,
  /* 306 */ 64, 126, 1, 0,
  /* 310 */ 64, 127, 1, 0,
  /* 314 */ 384, 382, 1, 0,
  /* 318 */ 384, 383, 1, 0,
  /* 322 */ 128, 128, 385, 1, 0,
  /* 327 */ 128, 128, 386, 1, 0,
  /* 332 */ -256, 128, 388, 1, 0,
  /* 337 */ -256, 128, 389, 1, 0,
  /* 342 */ -256, 391, 1, 0,
  /* 346 */ -256, 392, 1, 0,
  /* 350 */ 384, 383, 2, 0,
  /* 354 */ 384, 384, 2, 0,
  /* 358 */ 128, 128, 386, 2, 0,
  /* 363 */ 128, 128, 387, 2, 0,
  /* 368 */ -256, 128, 389, 2, 0,
  /* 373 */ -256, 128, 390, 2, 0,
  /* 378 */ -256, 392, 2, 0,
  /* 382 */ -256, 393, 2, 0,
  /* 386 */ 64, 0,
  /* 388 */ -256, 128, 0,
  /* 391 */ 128, 128, 128, 0,
  /* 395 */ -128, 384, 0,
};

extern const LaneBitmask R600LaneMaskLists[] = {
  /* 0 */ LaneBitmask(0x0000000000000001), LaneBitmask(0x0000000000000002), LaneBitmask::getAll(),
  /* 3 */ LaneBitmask(0x0000000000000008), LaneBitmask(0x0000000000000001), LaneBitmask(0x0000000000000002), LaneBitmask(0x0000000000000004), LaneBitmask::getAll(),
  /* 8 */ LaneBitmask(0x0000000000000001), LaneBitmask(0x0000000000000002), LaneBitmask(0x0000000000000004), LaneBitmask(0x0000000000000008), LaneBitmask::getAll(),
  /* 13 */ LaneBitmask(0xFFFFFFFFFFFFFFFF), LaneBitmask::getAll(),
};

extern const uint16_t R600SubRegIdxLists[] = {
  /* 0 */ 1, 2, 0,
  /* 3 */ 1, 2, 3, 4, 0,
};


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Woverlength-strings"
#endif
extern const char R600RegStrings[] = {
  /* 0 */ "ArrayBase450\0"
  /* 13 */ "ArrayBase460\0"
  /* 26 */ "ArrayBase470\0"
  /* 39 */ "ArrayBase480\0"
  /* 52 */ "ArrayBase451\0"
  /* 65 */ "ArrayBase461\0"
  /* 78 */ "ArrayBase471\0"
  /* 91 */ "ArrayBase452\0"
  /* 104 */ "ArrayBase462\0"
  /* 117 */ "ArrayBase472\0"
  /* 130 */ "ArrayBase453\0"
  /* 143 */ "ArrayBase463\0"
  /* 156 */ "ArrayBase473\0"
  /* 169 */ "ArrayBase454\0"
  /* 182 */ "ArrayBase464\0"
  /* 195 */ "ArrayBase474\0"
  /* 208 */ "ArrayBase455\0"
  /* 221 */ "ArrayBase465\0"
  /* 234 */ "ArrayBase475\0"
  /* 247 */ "ArrayBase456\0"
  /* 260 */ "ArrayBase466\0"
  /* 273 */ "ArrayBase476\0"
  /* 286 */ "ArrayBase457\0"
  /* 299 */ "ArrayBase467\0"
  /* 312 */ "ArrayBase477\0"
  /* 325 */ "ArrayBase448\0"
  /* 338 */ "ArrayBase458\0"
  /* 351 */ "ArrayBase468\0"
  /* 364 */ "ArrayBase478\0"
  /* 377 */ "ArrayBase449\0"
  /* 390 */ "ArrayBase459\0"
  /* 403 */ "ArrayBase469\0"
  /* 416 */ "ArrayBase479\0"
  /* 429 */ "OQA\0"
  /* 433 */ "LDS_DIRECT_A\0"
  /* 446 */ "OQB\0"
  /* 450 */ "LDS_DIRECT_B\0"
  /* 463 */ "NEG_ONE\0"
  /* 471 */ "PRED_SEL_ONE\0"
  /* 484 */ "PRED_SEL_OFF\0"
  /* 497 */ "NEG_HALF\0"
  /* 506 */ "ALU_PARAM\0"
  /* 516 */ "PRED_SEL_ZERO\0"
  /* 530 */ "OQAP\0"
  /* 535 */ "OQBP\0"
  /* 540 */ "INDIRECT_BASE_ADDR\0"
  /* 559 */ "PS\0"
  /* 562 */ "PREDICATE_BIT\0"
  /* 576 */ "ONE_INT\0"
  /* 584 */ "ALU_CONST\0"
  /* 594 */ "T100_XYZW\0"
  /* 604 */ "T110_XYZW\0"
  /* 614 */ "T10_XYZW\0"
  /* 623 */ "T120_XYZW\0"
  /* 633 */ "T20_XYZW\0"
  /* 642 */ "KC0_130_XYZW\0"
  /* 655 */ "T30_XYZW\0"
  /* 664 */ "KC0_140_XYZW\0"
  /* 677 */ "T40_XYZW\0"
  /* 686 */ "KC0_150_XYZW\0"
  /* 699 */ "T50_XYZW\0"
  /* 708 */ "KC1_160_XYZW\0"
  /* 721 */ "T60_XYZW\0"
  /* 730 */ "KC1_170_XYZW\0"
  /* 743 */ "T70_XYZW\0"
  /* 752 */ "KC1_180_XYZW\0"
  /* 765 */ "T80_XYZW\0"
  /* 774 */ "KC1_190_XYZW\0"
  /* 787 */ "T90_XYZW\0"
  /* 796 */ "T0_XYZW\0"
  /* 804 */ "T101_XYZW\0"
  /* 814 */ "T111_XYZW\0"
  /* 824 */ "T11_XYZW\0"
  /* 833 */ "T121_XYZW\0"
  /* 843 */ "T21_XYZW\0"
  /* 852 */ "KC0_131_XYZW\0"
  /* 865 */ "T31_XYZW\0"
  /* 874 */ "KC0_141_XYZW\0"
  /* 887 */ "T41_XYZW\0"
  /* 896 */ "KC0_151_XYZW\0"
  /* 909 */ "T51_XYZW\0"
  /* 918 */ "KC1_161_XYZW\0"
  /* 931 */ "T61_XYZW\0"
  /* 940 */ "KC1_171_XYZW\0"
  /* 953 */ "T71_XYZW\0"
  /* 962 */ "KC1_181_XYZW\0"
  /* 975 */ "T81_XYZW\0"
  /* 984 */ "KC1_191_XYZW\0"
  /* 997 */ "T91_XYZW\0"
  /* 1006 */ "T1_XYZW\0"
  /* 1014 */ "T102_XYZW\0"
  /* 1024 */ "T112_XYZW\0"
  /* 1034 */ "T12_XYZW\0"
  /* 1043 */ "T122_XYZW\0"
  /* 1053 */ "T22_XYZW\0"
  /* 1062 */ "KC0_132_XYZW\0"
  /* 1075 */ "T32_XYZW\0"
  /* 1084 */ "KC0_142_XYZW\0"
  /* 1097 */ "T42_XYZW\0"
  /* 1106 */ "KC0_152_XYZW\0"
  /* 1119 */ "T52_XYZW\0"
  /* 1128 */ "KC1_162_XYZW\0"
  /* 1141 */ "T62_XYZW\0"
  /* 1150 */ "KC1_172_XYZW\0"
  /* 1163 */ "T72_XYZW\0"
  /* 1172 */ "KC1_182_XYZW\0"
  /* 1185 */ "T82_XYZW\0"
  /* 1194 */ "T92_XYZW\0"
  /* 1203 */ "T2_XYZW\0"
  /* 1211 */ "T103_XYZW\0"
  /* 1221 */ "T113_XYZW\0"
  /* 1231 */ "T13_XYZW\0"
  /* 1240 */ "T123_XYZW\0"
  /* 1250 */ "T23_XYZW\0"
  /* 1259 */ "KC0_133_XYZW\0"
  /* 1272 */ "T33_XYZW\0"
  /* 1281 */ "KC0_143_XYZW\0"
  /* 1294 */ "T43_XYZW\0"
  /* 1303 */ "KC0_153_XYZW\0"
  /* 1316 */ "T53_XYZW\0"
  /* 1325 */ "KC1_163_XYZW\0"
  /* 1338 */ "T63_XYZW\0"
  /* 1347 */ "KC1_173_XYZW\0"
  /* 1360 */ "T73_XYZW\0"
  /* 1369 */ "KC1_183_XYZW\0"
  /* 1382 */ "T83_XYZW\0"
  /* 1391 */ "T93_XYZW\0"
  /* 1400 */ "T3_XYZW\0"
  /* 1408 */ "T104_XYZW\0"
  /* 1418 */ "T114_XYZW\0"
  /* 1428 */ "T14_XYZW\0"
  /* 1437 */ "T124_XYZW\0"
  /* 1447 */ "T24_XYZW\0"
  /* 1456 */ "KC0_134_XYZW\0"
  /* 1469 */ "T34_XYZW\0"
  /* 1478 */ "KC0_144_XYZW\0"
  /* 1491 */ "T44_XYZW\0"
  /* 1500 */ "KC0_154_XYZW\0"
  /* 1513 */ "T54_XYZW\0"
  /* 1522 */ "KC1_164_XYZW\0"
  /* 1535 */ "T64_XYZW\0"
  /* 1544 */ "KC1_174_XYZW\0"
  /* 1557 */ "T74_XYZW\0"
  /* 1566 */ "KC1_184_XYZW\0"
  /* 1579 */ "T84_XYZW\0"
  /* 1588 */ "T94_XYZW\0"
  /* 1597 */ "T4_XYZW\0"
  /* 1605 */ "T105_XYZW\0"
  /* 1615 */ "T115_XYZW\0"
  /* 1625 */ "T15_XYZW\0"
  /* 1634 */ "T125_XYZW\0"
  /* 1644 */ "T25_XYZW\0"
  /* 1653 */ "KC0_135_XYZW\0"
  /* 1666 */ "T35_XYZW\0"
  /* 1675 */ "KC0_145_XYZW\0"
  /* 1688 */ "T45_XYZW\0"
  /* 1697 */ "KC0_155_XYZW\0"
  /* 1710 */ "T55_XYZW\0"
  /* 1719 */ "KC1_165_XYZW\0"
  /* 1732 */ "T65_XYZW\0"
  /* 1741 */ "KC1_175_XYZW\0"
  /* 1754 */ "T75_XYZW\0"
  /* 1763 */ "KC1_185_XYZW\0"
  /* 1776 */ "T85_XYZW\0"
  /* 1785 */ "T95_XYZW\0"
  /* 1794 */ "T5_XYZW\0"
  /* 1802 */ "T106_XYZW\0"
  /* 1812 */ "T116_XYZW\0"
  /* 1822 */ "T16_XYZW\0"
  /* 1831 */ "T126_XYZW\0"
  /* 1841 */ "T26_XYZW\0"
  /* 1850 */ "KC0_136_XYZW\0"
  /* 1863 */ "T36_XYZW\0"
  /* 1872 */ "KC0_146_XYZW\0"
  /* 1885 */ "T46_XYZW\0"
  /* 1894 */ "KC0_156_XYZW\0"
  /* 1907 */ "T56_XYZW\0"
  /* 1916 */ "KC1_166_XYZW\0"
  /* 1929 */ "T66_XYZW\0"
  /* 1938 */ "KC1_176_XYZW\0"
  /* 1951 */ "T76_XYZW\0"
  /* 1960 */ "KC1_186_XYZW\0"
  /* 1973 */ "T86_XYZW\0"
  /* 1982 */ "T96_XYZW\0"
  /* 1991 */ "T6_XYZW\0"
  /* 1999 */ "T107_XYZW\0"
  /* 2009 */ "T117_XYZW\0"
  /* 2019 */ "T17_XYZW\0"
  /* 2028 */ "T127_XYZW\0"
  /* 2038 */ "T27_XYZW\0"
  /* 2047 */ "KC0_137_XYZW\0"
  /* 2060 */ "T37_XYZW\0"
  /* 2069 */ "KC0_147_XYZW\0"
  /* 2082 */ "T47_XYZW\0"
  /* 2091 */ "KC0_157_XYZW\0"
  /* 2104 */ "T57_XYZW\0"
  /* 2113 */ "KC1_167_XYZW\0"
  /* 2126 */ "T67_XYZW\0"
  /* 2135 */ "KC1_177_XYZW\0"
  /* 2148 */ "T77_XYZW\0"
  /* 2157 */ "KC1_187_XYZW\0"
  /* 2170 */ "T87_XYZW\0"
  /* 2179 */ "T97_XYZW\0"
  /* 2188 */ "T7_XYZW\0"
  /* 2196 */ "T108_XYZW\0"
  /* 2206 */ "T118_XYZW\0"
  /* 2216 */ "T18_XYZW\0"
  /* 2225 */ "KC0_128_XYZW\0"
  /* 2238 */ "T28_XYZW\0"
  /* 2247 */ "KC0_138_XYZW\0"
  /* 2260 */ "T38_XYZW\0"
  /* 2269 */ "KC0_148_XYZW\0"
  /* 2282 */ "T48_XYZW\0"
  /* 2291 */ "KC0_158_XYZW\0"
  /* 2304 */ "T58_XYZW\0"
  /* 2313 */ "KC1_168_XYZW\0"
  /* 2326 */ "T68_XYZW\0"
  /* 2335 */ "KC1_178_XYZW\0"
  /* 2348 */ "T78_XYZW\0"
  /* 2357 */ "KC1_188_XYZW\0"
  /* 2370 */ "T88_XYZW\0"
  /* 2379 */ "T98_XYZW\0"
  /* 2388 */ "T8_XYZW\0"
  /* 2396 */ "T109_XYZW\0"
  /* 2406 */ "T119_XYZW\0"
  /* 2416 */ "T19_XYZW\0"
  /* 2425 */ "KC0_129_XYZW\0"
  /* 2438 */ "T29_XYZW\0"
  /* 2447 */ "KC0_139_XYZW\0"
  /* 2460 */ "T39_XYZW\0"
  /* 2469 */ "KC0_149_XYZW\0"
  /* 2482 */ "T49_XYZW\0"
  /* 2491 */ "KC0_159_XYZW\0"
  /* 2504 */ "T59_XYZW\0"
  /* 2513 */ "KC1_169_XYZW\0"
  /* 2526 */ "T69_XYZW\0"
  /* 2535 */ "KC1_179_XYZW\0"
  /* 2548 */ "T79_XYZW\0"
  /* 2557 */ "KC1_189_XYZW\0"
  /* 2570 */ "T89_XYZW\0"
  /* 2579 */ "T99_XYZW\0"
  /* 2588 */ "T9_XYZW\0"
  /* 2596 */ "T100_W\0"
  /* 2603 */ "Addr100_W\0"
  /* 2613 */ "T110_W\0"
  /* 2620 */ "Addr110_W\0"
  /* 2630 */ "T10_W\0"
  /* 2636 */ "Addr10_W\0"
  /* 2645 */ "T120_W\0"
  /* 2652 */ "Addr120_W\0"
  /* 2662 */ "T20_W\0"
  /* 2668 */ "Addr20_W\0"
  /* 2677 */ "KC0_130_W\0"
  /* 2687 */ "T30_W\0"
  /* 2693 */ "Addr30_W\0"
  /* 2702 */ "KC0_140_W\0"
  /* 2712 */ "T40_W\0"
  /* 2718 */ "Addr40_W\0"
  /* 2727 */ "KC0_150_W\0"
  /* 2737 */ "T50_W\0"
  /* 2743 */ "Addr50_W\0"
  /* 2752 */ "KC1_160_W\0"
  /* 2762 */ "T60_W\0"
  /* 2768 */ "Addr60_W\0"
  /* 2777 */ "KC1_170_W\0"
  /* 2787 */ "T70_W\0"
  /* 2793 */ "Addr70_W\0"
  /* 2802 */ "KC1_180_W\0"
  /* 2812 */ "T80_W\0"
  /* 2818 */ "Addr80_W\0"
  /* 2827 */ "KC1_190_W\0"
  /* 2837 */ "T90_W\0"
  /* 2843 */ "Addr90_W\0"
  /* 2852 */ "T0_W\0"
  /* 2857 */ "Addr0_W\0"
  /* 2865 */ "T101_W\0"
  /* 2872 */ "Addr101_W\0"
  /* 2882 */ "V01_W\0"
  /* 2888 */ "T111_W\0"
  /* 2895 */ "Addr111_W\0"
  /* 2905 */ "T11_W\0"
  /* 2911 */ "Addr11_W\0"
  /* 2920 */ "T121_W\0"
  /* 2927 */ "Addr121_W\0"
  /* 2937 */ "T21_W\0"
  /* 2943 */ "Addr21_W\0"
  /* 2952 */ "KC0_131_W\0"
  /* 2962 */ "T31_W\0"
  /* 2968 */ "Addr31_W\0"
  /* 2977 */ "KC0_141_W\0"
  /* 2987 */ "T41_W\0"
  /* 2993 */ "Addr41_W\0"
  /* 3002 */ "KC0_151_W\0"
  /* 3012 */ "T51_W\0"
  /* 3018 */ "Addr51_W\0"
  /* 3027 */ "KC1_161_W\0"
  /* 3037 */ "T61_W\0"
  /* 3043 */ "Addr61_W\0"
  /* 3052 */ "KC1_171_W\0"
  /* 3062 */ "T71_W\0"
  /* 3068 */ "Addr71_W\0"
  /* 3077 */ "KC1_181_W\0"
  /* 3087 */ "T81_W\0"
  /* 3093 */ "Addr81_W\0"
  /* 3102 */ "KC1_191_W\0"
  /* 3112 */ "T91_W\0"
  /* 3118 */ "Addr91_W\0"
  /* 3127 */ "T1_W\0"
  /* 3132 */ "Addr1_W\0"
  /* 3140 */ "T102_W\0"
  /* 3147 */ "Addr102_W\0"
  /* 3157 */ "T112_W\0"
  /* 3164 */ "Addr112_W\0"
  /* 3174 */ "T12_W\0"
  /* 3180 */ "Addr12_W\0"
  /* 3189 */ "T122_W\0"
  /* 3196 */ "Addr122_W\0"
  /* 3206 */ "T22_W\0"
  /* 3212 */ "Addr22_W\0"
  /* 3221 */ "KC0_132_W\0"
  /* 3231 */ "T32_W\0"
  /* 3237 */ "Addr32_W\0"
  /* 3246 */ "KC0_142_W\0"
  /* 3256 */ "T42_W\0"
  /* 3262 */ "Addr42_W\0"
  /* 3271 */ "KC0_152_W\0"
  /* 3281 */ "T52_W\0"
  /* 3287 */ "Addr52_W\0"
  /* 3296 */ "KC1_162_W\0"
  /* 3306 */ "T62_W\0"
  /* 3312 */ "Addr62_W\0"
  /* 3321 */ "KC1_172_W\0"
  /* 3331 */ "T72_W\0"
  /* 3337 */ "Addr72_W\0"
  /* 3346 */ "KC1_182_W\0"
  /* 3356 */ "T82_W\0"
  /* 3362 */ "Addr82_W\0"
  /* 3371 */ "T92_W\0"
  /* 3377 */ "Addr92_W\0"
  /* 3386 */ "T2_W\0"
  /* 3391 */ "Addr2_W\0"
  /* 3399 */ "T103_W\0"
  /* 3406 */ "Addr103_W\0"
  /* 3416 */ "T113_W\0"
  /* 3423 */ "Addr113_W\0"
  /* 3433 */ "T13_W\0"
  /* 3439 */ "Addr13_W\0"
  /* 3448 */ "V0123_W\0"
  /* 3456 */ "T123_W\0"
  /* 3463 */ "Addr123_W\0"
  /* 3473 */ "T23_W\0"
  /* 3479 */ "V23_W\0"
  /* 3485 */ "Addr23_W\0"
  /* 3494 */ "KC0_133_W\0"
  /* 3504 */ "T33_W\0"
  /* 3510 */ "Addr33_W\0"
  /* 3519 */ "KC0_143_W\0"
  /* 3529 */ "T43_W\0"
  /* 3535 */ "Addr43_W\0"
  /* 3544 */ "KC0_153_W\0"
  /* 3554 */ "T53_W\0"
  /* 3560 */ "Addr53_W\0"
  /* 3569 */ "KC1_163_W\0"
  /* 3579 */ "T63_W\0"
  /* 3585 */ "Addr63_W\0"
  /* 3594 */ "KC1_173_W\0"
  /* 3604 */ "T73_W\0"
  /* 3610 */ "Addr73_W\0"
  /* 3619 */ "KC1_183_W\0"
  /* 3629 */ "T83_W\0"
  /* 3635 */ "Addr83_W\0"
  /* 3644 */ "T93_W\0"
  /* 3650 */ "Addr93_W\0"
  /* 3659 */ "T3_W\0"
  /* 3664 */ "Addr3_W\0"
  /* 3672 */ "T104_W\0"
  /* 3679 */ "Addr104_W\0"
  /* 3689 */ "T114_W\0"
  /* 3696 */ "Addr114_W\0"
  /* 3706 */ "T14_W\0"
  /* 3712 */ "Addr14_W\0"
  /* 3721 */ "T124_W\0"
  /* 3728 */ "Addr124_W\0"
  /* 3738 */ "T24_W\0"
  /* 3744 */ "Addr24_W\0"
  /* 3753 */ "KC0_134_W\0"
  /* 3763 */ "T34_W\0"
  /* 3769 */ "Addr34_W\0"
  /* 3778 */ "KC0_144_W\0"
  /* 3788 */ "T44_W\0"
  /* 3794 */ "Addr44_W\0"
  /* 3803 */ "KC0_154_W\0"
  /* 3813 */ "T54_W\0"
  /* 3819 */ "Addr54_W\0"
  /* 3828 */ "KC1_164_W\0"
  /* 3838 */ "T64_W\0"
  /* 3844 */ "Addr64_W\0"
  /* 3853 */ "KC1_174_W\0"
  /* 3863 */ "T74_W\0"
  /* 3869 */ "Addr74_W\0"
  /* 3878 */ "KC1_184_W\0"
  /* 3888 */ "T84_W\0"
  /* 3894 */ "Addr84_W\0"
  /* 3903 */ "T94_W\0"
  /* 3909 */ "Addr94_W\0"
  /* 3918 */ "T4_W\0"
  /* 3923 */ "Addr4_W\0"
  /* 3931 */ "T105_W\0"
  /* 3938 */ "Addr105_W\0"
  /* 3948 */ "T115_W\0"
  /* 3955 */ "Addr115_W\0"
  /* 3965 */ "T15_W\0"
  /* 3971 */ "Addr15_W\0"
  /* 3980 */ "T125_W\0"
  /* 3987 */ "Addr125_W\0"
  /* 3997 */ "T25_W\0"
  /* 4003 */ "Addr25_W\0"
  /* 4012 */ "KC0_135_W\0"
  /* 4022 */ "T35_W\0"
  /* 4028 */ "Addr35_W\0"
  /* 4037 */ "KC0_145_W\0"
  /* 4047 */ "T45_W\0"
  /* 4053 */ "Addr45_W\0"
  /* 4062 */ "KC0_155_W\0"
  /* 4072 */ "T55_W\0"
  /* 4078 */ "Addr55_W\0"
  /* 4087 */ "KC1_165_W\0"
  /* 4097 */ "T65_W\0"
  /* 4103 */ "Addr65_W\0"
  /* 4112 */ "KC1_175_W\0"
  /* 4122 */ "T75_W\0"
  /* 4128 */ "Addr75_W\0"
  /* 4137 */ "KC1_185_W\0"
  /* 4147 */ "T85_W\0"
  /* 4153 */ "Addr85_W\0"
  /* 4162 */ "T95_W\0"
  /* 4168 */ "Addr95_W\0"
  /* 4177 */ "T5_W\0"
  /* 4182 */ "Addr5_W\0"
  /* 4190 */ "T106_W\0"
  /* 4197 */ "Addr106_W\0"
  /* 4207 */ "T116_W\0"
  /* 4214 */ "Addr116_W\0"
  /* 4224 */ "T16_W\0"
  /* 4230 */ "Addr16_W\0"
  /* 4239 */ "T126_W\0"
  /* 4246 */ "Addr126_W\0"
  /* 4256 */ "T26_W\0"
  /* 4262 */ "Addr26_W\0"
  /* 4271 */ "KC0_136_W\0"
  /* 4281 */ "T36_W\0"
  /* 4287 */ "Addr36_W\0"
  /* 4296 */ "KC0_146_W\0"
  /* 4306 */ "T46_W\0"
  /* 4312 */ "Addr46_W\0"
  /* 4321 */ "KC0_156_W\0"
  /* 4331 */ "T56_W\0"
  /* 4337 */ "Addr56_W\0"
  /* 4346 */ "KC1_166_W\0"
  /* 4356 */ "T66_W\0"
  /* 4362 */ "Addr66_W\0"
  /* 4371 */ "KC1_176_W\0"
  /* 4381 */ "T76_W\0"
  /* 4387 */ "Addr76_W\0"
  /* 4396 */ "KC1_186_W\0"
  /* 4406 */ "T86_W\0"
  /* 4412 */ "Addr86_W\0"
  /* 4421 */ "T96_W\0"
  /* 4427 */ "Addr96_W\0"
  /* 4436 */ "T6_W\0"
  /* 4441 */ "Addr6_W\0"
  /* 4449 */ "T107_W\0"
  /* 4456 */ "Addr107_W\0"
  /* 4466 */ "T117_W\0"
  /* 4473 */ "Addr117_W\0"
  /* 4483 */ "T17_W\0"
  /* 4489 */ "Addr17_W\0"
  /* 4498 */ "T127_W\0"
  /* 4505 */ "Addr127_W\0"
  /* 4515 */ "T27_W\0"
  /* 4521 */ "Addr27_W\0"
  /* 4530 */ "KC0_137_W\0"
  /* 4540 */ "T37_W\0"
  /* 4546 */ "Addr37_W\0"
  /* 4555 */ "KC0_147_W\0"
  /* 4565 */ "T47_W\0"
  /* 4571 */ "Addr47_W\0"
  /* 4580 */ "KC0_157_W\0"
  /* 4590 */ "T57_W\0"
  /* 4596 */ "Addr57_W\0"
  /* 4605 */ "KC1_167_W\0"
  /* 4615 */ "T67_W\0"
  /* 4621 */ "Addr67_W\0"
  /* 4630 */ "KC1_177_W\0"
  /* 4640 */ "T77_W\0"
  /* 4646 */ "Addr77_W\0"
  /* 4655 */ "KC1_187_W\0"
  /* 4665 */ "T87_W\0"
  /* 4671 */ "Addr87_W\0"
  /* 4680 */ "T97_W\0"
  /* 4686 */ "Addr97_W\0"
  /* 4695 */ "T7_W\0"
  /* 4700 */ "Addr7_W\0"
  /* 4708 */ "T108_W\0"
  /* 4715 */ "Addr108_W\0"
  /* 4725 */ "T118_W\0"
  /* 4732 */ "Addr118_W\0"
  /* 4742 */ "T18_W\0"
  /* 4748 */ "Addr18_W\0"
  /* 4757 */ "KC0_128_W\0"
  /* 4767 */ "T28_W\0"
  /* 4773 */ "Addr28_W\0"
  /* 4782 */ "KC0_138_W\0"
  /* 4792 */ "T38_W\0"
  /* 4798 */ "Addr38_W\0"
  /* 4807 */ "KC0_148_W\0"
  /* 4817 */ "T48_W\0"
  /* 4823 */ "Addr48_W\0"
  /* 4832 */ "KC0_158_W\0"
  /* 4842 */ "T58_W\0"
  /* 4848 */ "Addr58_W\0"
  /* 4857 */ "KC1_168_W\0"
  /* 4867 */ "T68_W\0"
  /* 4873 */ "Addr68_W\0"
  /* 4882 */ "KC1_178_W\0"
  /* 4892 */ "T78_W\0"
  /* 4898 */ "Addr78_W\0"
  /* 4907 */ "KC1_188_W\0"
  /* 4917 */ "T88_W\0"
  /* 4923 */ "Addr88_W\0"
  /* 4932 */ "T98_W\0"
  /* 4938 */ "Addr98_W\0"
  /* 4947 */ "T8_W\0"
  /* 4952 */ "Addr8_W\0"
  /* 4960 */ "T109_W\0"
  /* 4967 */ "Addr109_W\0"
  /* 4977 */ "T119_W\0"
  /* 4984 */ "Addr119_W\0"
  /* 4994 */ "T19_W\0"
  /* 5000 */ "Addr19_W\0"
  /* 5009 */ "KC0_129_W\0"
  /* 5019 */ "T29_W\0"
  /* 5025 */ "Addr29_W\0"
  /* 5034 */ "KC0_139_W\0"
  /* 5044 */ "T39_W\0"
  /* 5050 */ "Addr39_W\0"
  /* 5059 */ "KC0_149_W\0"
  /* 5069 */ "T49_W\0"
  /* 5075 */ "Addr49_W\0"
  /* 5084 */ "KC0_159_W\0"
  /* 5094 */ "T59_W\0"
  /* 5100 */ "Addr59_W\0"
  /* 5109 */ "KC1_169_W\0"
  /* 5119 */ "T69_W\0"
  /* 5125 */ "Addr69_W\0"
  /* 5134 */ "KC1_179_W\0"
  /* 5144 */ "T79_W\0"
  /* 5150 */ "Addr79_W\0"
  /* 5159 */ "KC1_189_W\0"
  /* 5169 */ "T89_W\0"
  /* 5175 */ "Addr89_W\0"
  /* 5184 */ "T99_W\0"
  /* 5190 */ "Addr99_W\0"
  /* 5199 */ "T9_W\0"
  /* 5204 */ "Addr9_W\0"
  /* 5212 */ "ALU_LITERAL_W\0"
  /* 5226 */ "PV_W\0"
  /* 5231 */ "T100_X\0"
  /* 5238 */ "Addr100_X\0"
  /* 5248 */ "T110_X\0"
  /* 5255 */ "Addr110_X\0"
  /* 5265 */ "T10_X\0"
  /* 5271 */ "Addr10_X\0"
  /* 5280 */ "T120_X\0"
  /* 5287 */ "Addr120_X\0"
  /* 5297 */ "T20_X\0"
  /* 5303 */ "Addr20_X\0"
  /* 5312 */ "KC0_130_X\0"
  /* 5322 */ "T30_X\0"
  /* 5328 */ "Addr30_X\0"
  /* 5337 */ "KC0_140_X\0"
  /* 5347 */ "T40_X\0"
  /* 5353 */ "Addr40_X\0"
  /* 5362 */ "KC0_150_X\0"
  /* 5372 */ "T50_X\0"
  /* 5378 */ "Addr50_X\0"
  /* 5387 */ "KC1_160_X\0"
  /* 5397 */ "T60_X\0"
  /* 5403 */ "Addr60_X\0"
  /* 5412 */ "KC1_170_X\0"
  /* 5422 */ "T70_X\0"
  /* 5428 */ "Addr70_X\0"
  /* 5437 */ "KC1_180_X\0"
  /* 5447 */ "T80_X\0"
  /* 5453 */ "Addr80_X\0"
  /* 5462 */ "KC1_190_X\0"
  /* 5472 */ "T90_X\0"
  /* 5478 */ "Addr90_X\0"
  /* 5487 */ "T0_X\0"
  /* 5492 */ "Addr0_X\0"
  /* 5500 */ "T101_X\0"
  /* 5507 */ "Addr101_X\0"
  /* 5517 */ "V01_X\0"
  /* 5523 */ "T111_X\0"
  /* 5530 */ "Addr111_X\0"
  /* 5540 */ "T11_X\0"
  /* 5546 */ "Addr11_X\0"
  /* 5555 */ "T121_X\0"
  /* 5562 */ "Addr121_X\0"
  /* 5572 */ "T21_X\0"
  /* 5578 */ "Addr21_X\0"
  /* 5587 */ "KC0_131_X\0"
  /* 5597 */ "T31_X\0"
  /* 5603 */ "Addr31_X\0"
  /* 5612 */ "KC0_141_X\0"
  /* 5622 */ "T41_X\0"
  /* 5628 */ "Addr41_X\0"
  /* 5637 */ "KC0_151_X\0"
  /* 5647 */ "T51_X\0"
  /* 5653 */ "Addr51_X\0"
  /* 5662 */ "KC1_161_X\0"
  /* 5672 */ "T61_X\0"
  /* 5678 */ "Addr61_X\0"
  /* 5687 */ "KC1_171_X\0"
  /* 5697 */ "T71_X\0"
  /* 5703 */ "Addr71_X\0"
  /* 5712 */ "KC1_181_X\0"
  /* 5722 */ "T81_X\0"
  /* 5728 */ "Addr81_X\0"
  /* 5737 */ "KC1_191_X\0"
  /* 5747 */ "T91_X\0"
  /* 5753 */ "Addr91_X\0"
  /* 5762 */ "T1_X\0"
  /* 5767 */ "Addr1_X\0"
  /* 5775 */ "T102_X\0"
  /* 5782 */ "Addr102_X\0"
  /* 5792 */ "T112_X\0"
  /* 5799 */ "Addr112_X\0"
  /* 5809 */ "T12_X\0"
  /* 5815 */ "Addr12_X\0"
  /* 5824 */ "T122_X\0"
  /* 5831 */ "Addr122_X\0"
  /* 5841 */ "T22_X\0"
  /* 5847 */ "Addr22_X\0"
  /* 5856 */ "KC0_132_X\0"
  /* 5866 */ "T32_X\0"
  /* 5872 */ "Addr32_X\0"
  /* 5881 */ "KC0_142_X\0"
  /* 5891 */ "T42_X\0"
  /* 5897 */ "Addr42_X\0"
  /* 5906 */ "KC0_152_X\0"
  /* 5916 */ "T52_X\0"
  /* 5922 */ "Addr52_X\0"
  /* 5931 */ "KC1_162_X\0"
  /* 5941 */ "T62_X\0"
  /* 5947 */ "Addr62_X\0"
  /* 5956 */ "KC1_172_X\0"
  /* 5966 */ "T72_X\0"
  /* 5972 */ "Addr72_X\0"
  /* 5981 */ "KC1_182_X\0"
  /* 5991 */ "T82_X\0"
  /* 5997 */ "Addr82_X\0"
  /* 6006 */ "T92_X\0"
  /* 6012 */ "Addr92_X\0"
  /* 6021 */ "T2_X\0"
  /* 6026 */ "Addr2_X\0"
  /* 6034 */ "T103_X\0"
  /* 6041 */ "Addr103_X\0"
  /* 6051 */ "T113_X\0"
  /* 6058 */ "Addr113_X\0"
  /* 6068 */ "T13_X\0"
  /* 6074 */ "Addr13_X\0"
  /* 6083 */ "V0123_X\0"
  /* 6091 */ "T123_X\0"
  /* 6098 */ "Addr123_X\0"
  /* 6108 */ "T23_X\0"
  /* 6114 */ "V23_X\0"
  /* 6120 */ "Addr23_X\0"
  /* 6129 */ "KC0_133_X\0"
  /* 6139 */ "T33_X\0"
  /* 6145 */ "Addr33_X\0"
  /* 6154 */ "KC0_143_X\0"
  /* 6164 */ "T43_X\0"
  /* 6170 */ "Addr43_X\0"
  /* 6179 */ "KC0_153_X\0"
  /* 6189 */ "T53_X\0"
  /* 6195 */ "Addr53_X\0"
  /* 6204 */ "KC1_163_X\0"
  /* 6214 */ "T63_X\0"
  /* 6220 */ "Addr63_X\0"
  /* 6229 */ "KC1_173_X\0"
  /* 6239 */ "T73_X\0"
  /* 6245 */ "Addr73_X\0"
  /* 6254 */ "KC1_183_X\0"
  /* 6264 */ "T83_X\0"
  /* 6270 */ "Addr83_X\0"
  /* 6279 */ "T93_X\0"
  /* 6285 */ "Addr93_X\0"
  /* 6294 */ "T3_X\0"
  /* 6299 */ "Addr3_X\0"
  /* 6307 */ "T104_X\0"
  /* 6314 */ "Addr104_X\0"
  /* 6324 */ "T114_X\0"
  /* 6331 */ "Addr114_X\0"
  /* 6341 */ "T14_X\0"
  /* 6347 */ "Addr14_X\0"
  /* 6356 */ "T124_X\0"
  /* 6363 */ "Addr124_X\0"
  /* 6373 */ "T24_X\0"
  /* 6379 */ "Addr24_X\0"
  /* 6388 */ "KC0_134_X\0"
  /* 6398 */ "T34_X\0"
  /* 6404 */ "Addr34_X\0"
  /* 6413 */ "KC0_144_X\0"
  /* 6423 */ "T44_X\0"
  /* 6429 */ "Addr44_X\0"
  /* 6438 */ "KC0_154_X\0"
  /* 6448 */ "T54_X\0"
  /* 6454 */ "Addr54_X\0"
  /* 6463 */ "KC1_164_X\0"
  /* 6473 */ "T64_X\0"
  /* 6479 */ "Addr64_X\0"
  /* 6488 */ "KC1_174_X\0"
  /* 6498 */ "T74_X\0"
  /* 6504 */ "Addr74_X\0"
  /* 6513 */ "KC1_184_X\0"
  /* 6523 */ "T84_X\0"
  /* 6529 */ "Addr84_X\0"
  /* 6538 */ "T94_X\0"
  /* 6544 */ "Addr94_X\0"
  /* 6553 */ "T4_X\0"
  /* 6558 */ "Addr4_X\0"
  /* 6566 */ "T105_X\0"
  /* 6573 */ "Addr105_X\0"
  /* 6583 */ "T115_X\0"
  /* 6590 */ "Addr115_X\0"
  /* 6600 */ "T15_X\0"
  /* 6606 */ "Addr15_X\0"
  /* 6615 */ "T125_X\0"
  /* 6622 */ "Addr125_X\0"
  /* 6632 */ "T25_X\0"
  /* 6638 */ "Addr25_X\0"
  /* 6647 */ "KC0_135_X\0"
  /* 6657 */ "T35_X\0"
  /* 6663 */ "Addr35_X\0"
  /* 6672 */ "KC0_145_X\0"
  /* 6682 */ "T45_X\0"
  /* 6688 */ "Addr45_X\0"
  /* 6697 */ "KC0_155_X\0"
  /* 6707 */ "T55_X\0"
  /* 6713 */ "Addr55_X\0"
  /* 6722 */ "KC1_165_X\0"
  /* 6732 */ "T65_X\0"
  /* 6738 */ "Addr65_X\0"
  /* 6747 */ "KC1_175_X\0"
  /* 6757 */ "T75_X\0"
  /* 6763 */ "Addr75_X\0"
  /* 6772 */ "KC1_185_X\0"
  /* 6782 */ "T85_X\0"
  /* 6788 */ "Addr85_X\0"
  /* 6797 */ "T95_X\0"
  /* 6803 */ "Addr95_X\0"
  /* 6812 */ "T5_X\0"
  /* 6817 */ "Addr5_X\0"
  /* 6825 */ "T106_X\0"
  /* 6832 */ "Addr106_X\0"
  /* 6842 */ "T116_X\0"
  /* 6849 */ "Addr116_X\0"
  /* 6859 */ "T16_X\0"
  /* 6865 */ "Addr16_X\0"
  /* 6874 */ "T126_X\0"
  /* 6881 */ "Addr126_X\0"
  /* 6891 */ "T26_X\0"
  /* 6897 */ "Addr26_X\0"
  /* 6906 */ "KC0_136_X\0"
  /* 6916 */ "T36_X\0"
  /* 6922 */ "Addr36_X\0"
  /* 6931 */ "KC0_146_X\0"
  /* 6941 */ "T46_X\0"
  /* 6947 */ "Addr46_X\0"
  /* 6956 */ "KC0_156_X\0"
  /* 6966 */ "T56_X\0"
  /* 6972 */ "Addr56_X\0"
  /* 6981 */ "KC1_166_X\0"
  /* 6991 */ "T66_X\0"
  /* 6997 */ "Addr66_X\0"
  /* 7006 */ "KC1_176_X\0"
  /* 7016 */ "T76_X\0"
  /* 7022 */ "Addr76_X\0"
  /* 7031 */ "KC1_186_X\0"
  /* 7041 */ "T86_X\0"
  /* 7047 */ "Addr86_X\0"
  /* 7056 */ "T96_X\0"
  /* 7062 */ "Addr96_X\0"
  /* 7071 */ "T6_X\0"
  /* 7076 */ "Addr6_X\0"
  /* 7084 */ "T107_X\0"
  /* 7091 */ "Addr107_X\0"
  /* 7101 */ "T117_X\0"
  /* 7108 */ "Addr117_X\0"
  /* 7118 */ "T17_X\0"
  /* 7124 */ "Addr17_X\0"
  /* 7133 */ "T127_X\0"
  /* 7140 */ "Addr127_X\0"
  /* 7150 */ "T27_X\0"
  /* 7156 */ "Addr27_X\0"
  /* 7165 */ "KC0_137_X\0"
  /* 7175 */ "T37_X\0"
  /* 7181 */ "Addr37_X\0"
  /* 7190 */ "KC0_147_X\0"
  /* 7200 */ "T47_X\0"
  /* 7206 */ "Addr47_X\0"
  /* 7215 */ "KC0_157_X\0"
  /* 7225 */ "T57_X\0"
  /* 7231 */ "Addr57_X\0"
  /* 7240 */ "KC1_167_X\0"
  /* 7250 */ "T67_X\0"
  /* 7256 */ "Addr67_X\0"
  /* 7265 */ "KC1_177_X\0"
  /* 7275 */ "T77_X\0"
  /* 7281 */ "Addr77_X\0"
  /* 7290 */ "KC1_187_X\0"
  /* 7300 */ "T87_X\0"
  /* 7306 */ "Addr87_X\0"
  /* 7315 */ "T97_X\0"
  /* 7321 */ "Addr97_X\0"
  /* 7330 */ "T7_X\0"
  /* 7335 */ "Addr7_X\0"
  /* 7343 */ "T108_X\0"
  /* 7350 */ "Addr108_X\0"
  /* 7360 */ "T118_X\0"
  /* 7367 */ "Addr118_X\0"
  /* 7377 */ "T18_X\0"
  /* 7383 */ "Addr18_X\0"
  /* 7392 */ "KC0_128_X\0"
  /* 7402 */ "T28_X\0"
  /* 7408 */ "Addr28_X\0"
  /* 7417 */ "KC0_138_X\0"
  /* 7427 */ "T38_X\0"
  /* 7433 */ "Addr38_X\0"
  /* 7442 */ "KC0_148_X\0"
  /* 7452 */ "T48_X\0"
  /* 7458 */ "Addr48_X\0"
  /* 7467 */ "KC0_158_X\0"
  /* 7477 */ "T58_X\0"
  /* 7483 */ "Addr58_X\0"
  /* 7492 */ "KC1_168_X\0"
  /* 7502 */ "T68_X\0"
  /* 7508 */ "Addr68_X\0"
  /* 7517 */ "KC1_178_X\0"
  /* 7527 */ "T78_X\0"
  /* 7533 */ "Addr78_X\0"
  /* 7542 */ "KC1_188_X\0"
  /* 7552 */ "T88_X\0"
  /* 7558 */ "Addr88_X\0"
  /* 7567 */ "T98_X\0"
  /* 7573 */ "Addr98_X\0"
  /* 7582 */ "T8_X\0"
  /* 7587 */ "Addr8_X\0"
  /* 7595 */ "T109_X\0"
  /* 7602 */ "Addr109_X\0"
  /* 7612 */ "T119_X\0"
  /* 7619 */ "Addr119_X\0"
  /* 7629 */ "T19_X\0"
  /* 7635 */ "Addr19_X\0"
  /* 7644 */ "KC0_129_X\0"
  /* 7654 */ "T29_X\0"
  /* 7660 */ "Addr29_X\0"
  /* 7669 */ "KC0_139_X\0"
  /* 7679 */ "T39_X\0"
  /* 7685 */ "Addr39_X\0"
  /* 7694 */ "KC0_149_X\0"
  /* 7704 */ "T49_X\0"
  /* 7710 */ "Addr49_X\0"
  /* 7719 */ "KC0_159_X\0"
  /* 7729 */ "T59_X\0"
  /* 7735 */ "Addr59_X\0"
  /* 7744 */ "KC1_169_X\0"
  /* 7754 */ "T69_X\0"
  /* 7760 */ "Addr69_X\0"
  /* 7769 */ "KC1_179_X\0"
  /* 7779 */ "T79_X\0"
  /* 7785 */ "Addr79_X\0"
  /* 7794 */ "KC1_189_X\0"
  /* 7804 */ "T89_X\0"
  /* 7810 */ "Addr89_X\0"
  /* 7819 */ "T99_X\0"
  /* 7825 */ "Addr99_X\0"
  /* 7834 */ "T9_X\0"
  /* 7839 */ "Addr9_X\0"
  /* 7847 */ "ALU_LITERAL_X\0"
  /* 7861 */ "AR_X\0"
  /* 7866 */ "PV_X\0"
  /* 7871 */ "T100_XY\0"
  /* 7879 */ "T110_XY\0"
  /* 7887 */ "T10_XY\0"
  /* 7894 */ "T120_XY\0"
  /* 7902 */ "T20_XY\0"
  /* 7909 */ "T30_XY\0"
  /* 7916 */ "T40_XY\0"
  /* 7923 */ "T50_XY\0"
  /* 7930 */ "T60_XY\0"
  /* 7937 */ "T70_XY\0"
  /* 7944 */ "T80_XY\0"
  /* 7951 */ "T90_XY\0"
  /* 7958 */ "T0_XY\0"
  /* 7964 */ "T101_XY\0"
  /* 7972 */ "T111_XY\0"
  /* 7980 */ "T11_XY\0"
  /* 7987 */ "T121_XY\0"
  /* 7995 */ "T21_XY\0"
  /* 8002 */ "T31_XY\0"
  /* 8009 */ "T41_XY\0"
  /* 8016 */ "T51_XY\0"
  /* 8023 */ "T61_XY\0"
  /* 8030 */ "T71_XY\0"
  /* 8037 */ "T81_XY\0"
  /* 8044 */ "T91_XY\0"
  /* 8051 */ "T1_XY\0"
  /* 8057 */ "T102_XY\0"
  /* 8065 */ "T112_XY\0"
  /* 8073 */ "T12_XY\0"
  /* 8080 */ "T122_XY\0"
  /* 8088 */ "T22_XY\0"
  /* 8095 */ "T32_XY\0"
  /* 8102 */ "T42_XY\0"
  /* 8109 */ "T52_XY\0"
  /* 8116 */ "T62_XY\0"
  /* 8123 */ "T72_XY\0"
  /* 8130 */ "T82_XY\0"
  /* 8137 */ "T92_XY\0"
  /* 8144 */ "T2_XY\0"
  /* 8150 */ "T103_XY\0"
  /* 8158 */ "T113_XY\0"
  /* 8166 */ "T13_XY\0"
  /* 8173 */ "T123_XY\0"
  /* 8181 */ "T23_XY\0"
  /* 8188 */ "T33_XY\0"
  /* 8195 */ "T43_XY\0"
  /* 8202 */ "T53_XY\0"
  /* 8209 */ "T63_XY\0"
  /* 8216 */ "T73_XY\0"
  /* 8223 */ "T83_XY\0"
  /* 8230 */ "T93_XY\0"
  /* 8237 */ "T3_XY\0"
  /* 8243 */ "T104_XY\0"
  /* 8251 */ "T114_XY\0"
  /* 8259 */ "T14_XY\0"
  /* 8266 */ "T124_XY\0"
  /* 8274 */ "T24_XY\0"
  /* 8281 */ "T34_XY\0"
  /* 8288 */ "T44_XY\0"
  /* 8295 */ "T54_XY\0"
  /* 8302 */ "T64_XY\0"
  /* 8309 */ "T74_XY\0"
  /* 8316 */ "T84_XY\0"
  /* 8323 */ "T94_XY\0"
  /* 8330 */ "T4_XY\0"
  /* 8336 */ "T105_XY\0"
  /* 8344 */ "T115_XY\0"
  /* 8352 */ "T15_XY\0"
  /* 8359 */ "T125_XY\0"
  /* 8367 */ "T25_XY\0"
  /* 8374 */ "T35_XY\0"
  /* 8381 */ "T45_XY\0"
  /* 8388 */ "T55_XY\0"
  /* 8395 */ "T65_XY\0"
  /* 8402 */ "T75_XY\0"
  /* 8409 */ "T85_XY\0"
  /* 8416 */ "T95_XY\0"
  /* 8423 */ "T5_XY\0"
  /* 8429 */ "T106_XY\0"
  /* 8437 */ "T116_XY\0"
  /* 8445 */ "T16_XY\0"
  /* 8452 */ "T126_XY\0"
  /* 8460 */ "T26_XY\0"
  /* 8467 */ "T36_XY\0"
  /* 8474 */ "T46_XY\0"
  /* 8481 */ "T56_XY\0"
  /* 8488 */ "T66_XY\0"
  /* 8495 */ "T76_XY\0"
  /* 8502 */ "T86_XY\0"
  /* 8509 */ "T96_XY\0"
  /* 8516 */ "T6_XY\0"
  /* 8522 */ "T107_XY\0"
  /* 8530 */ "T117_XY\0"
  /* 8538 */ "T17_XY\0"
  /* 8545 */ "T127_XY\0"
  /* 8553 */ "T27_XY\0"
  /* 8560 */ "T37_XY\0"
  /* 8567 */ "T47_XY\0"
  /* 8574 */ "T57_XY\0"
  /* 8581 */ "T67_XY\0"
  /* 8588 */ "T77_XY\0"
  /* 8595 */ "T87_XY\0"
  /* 8602 */ "T97_XY\0"
  /* 8609 */ "T7_XY\0"
  /* 8615 */ "T108_XY\0"
  /* 8623 */ "T118_XY\0"
  /* 8631 */ "T18_XY\0"
  /* 8638 */ "T28_XY\0"
  /* 8645 */ "T38_XY\0"
  /* 8652 */ "T48_XY\0"
  /* 8659 */ "T58_XY\0"
  /* 8666 */ "T68_XY\0"
  /* 8673 */ "T78_XY\0"
  /* 8680 */ "T88_XY\0"
  /* 8687 */ "T98_XY\0"
  /* 8694 */ "T8_XY\0"
  /* 8700 */ "T109_XY\0"
  /* 8708 */ "T119_XY\0"
  /* 8716 */ "T19_XY\0"
  /* 8723 */ "T29_XY\0"
  /* 8730 */ "T39_XY\0"
  /* 8737 */ "T49_XY\0"
  /* 8744 */ "T59_XY\0"
  /* 8751 */ "T69_XY\0"
  /* 8758 */ "T79_XY\0"
  /* 8765 */ "T89_XY\0"
  /* 8772 */ "T99_XY\0"
  /* 8779 */ "T9_XY\0"
  /* 8785 */ "T100_Y\0"
  /* 8792 */ "Addr100_Y\0"
  /* 8802 */ "T110_Y\0"
  /* 8809 */ "Addr110_Y\0"
  /* 8819 */ "T10_Y\0"
  /* 8825 */ "Addr10_Y\0"
  /* 8834 */ "T120_Y\0"
  /* 8841 */ "Addr120_Y\0"
  /* 8851 */ "T20_Y\0"
  /* 8857 */ "Addr20_Y\0"
  /* 8866 */ "KC0_130_Y\0"
  /* 8876 */ "T30_Y\0"
  /* 8882 */ "Addr30_Y\0"
  /* 8891 */ "KC0_140_Y\0"
  /* 8901 */ "T40_Y\0"
  /* 8907 */ "Addr40_Y\0"
  /* 8916 */ "KC0_150_Y\0"
  /* 8926 */ "T50_Y\0"
  /* 8932 */ "Addr50_Y\0"
  /* 8941 */ "KC1_160_Y\0"
  /* 8951 */ "T60_Y\0"
  /* 8957 */ "Addr60_Y\0"
  /* 8966 */ "KC1_170_Y\0"
  /* 8976 */ "T70_Y\0"
  /* 8982 */ "Addr70_Y\0"
  /* 8991 */ "KC1_180_Y\0"
  /* 9001 */ "T80_Y\0"
  /* 9007 */ "Addr80_Y\0"
  /* 9016 */ "KC1_190_Y\0"
  /* 9026 */ "T90_Y\0"
  /* 9032 */ "Addr90_Y\0"
  /* 9041 */ "T0_Y\0"
  /* 9046 */ "Addr0_Y\0"
  /* 9054 */ "T101_Y\0"
  /* 9061 */ "Addr101_Y\0"
  /* 9071 */ "V01_Y\0"
  /* 9077 */ "T111_Y\0"
  /* 9084 */ "Addr111_Y\0"
  /* 9094 */ "T11_Y\0"
  /* 9100 */ "Addr11_Y\0"
  /* 9109 */ "T121_Y\0"
  /* 9116 */ "Addr121_Y\0"
  /* 9126 */ "T21_Y\0"
  /* 9132 */ "Addr21_Y\0"
  /* 9141 */ "KC0_131_Y\0"
  /* 9151 */ "T31_Y\0"
  /* 9157 */ "Addr31_Y\0"
  /* 9166 */ "KC0_141_Y\0"
  /* 9176 */ "T41_Y\0"
  /* 9182 */ "Addr41_Y\0"
  /* 9191 */ "KC0_151_Y\0"
  /* 9201 */ "T51_Y\0"
  /* 9207 */ "Addr51_Y\0"
  /* 9216 */ "KC1_161_Y\0"
  /* 9226 */ "T61_Y\0"
  /* 9232 */ "Addr61_Y\0"
  /* 9241 */ "KC1_171_Y\0"
  /* 9251 */ "T71_Y\0"
  /* 9257 */ "Addr71_Y\0"
  /* 9266 */ "KC1_181_Y\0"
  /* 9276 */ "T81_Y\0"
  /* 9282 */ "Addr81_Y\0"
  /* 9291 */ "KC1_191_Y\0"
  /* 9301 */ "T91_Y\0"
  /* 9307 */ "Addr91_Y\0"
  /* 9316 */ "T1_Y\0"
  /* 9321 */ "Addr1_Y\0"
  /* 9329 */ "T102_Y\0"
  /* 9336 */ "Addr102_Y\0"
  /* 9346 */ "T112_Y\0"
  /* 9353 */ "Addr112_Y\0"
  /* 9363 */ "T12_Y\0"
  /* 9369 */ "Addr12_Y\0"
  /* 9378 */ "T122_Y\0"
  /* 9385 */ "Addr122_Y\0"
  /* 9395 */ "T22_Y\0"
  /* 9401 */ "Addr22_Y\0"
  /* 9410 */ "KC0_132_Y\0"
  /* 9420 */ "T32_Y\0"
  /* 9426 */ "Addr32_Y\0"
  /* 9435 */ "KC0_142_Y\0"
  /* 9445 */ "T42_Y\0"
  /* 9451 */ "Addr42_Y\0"
  /* 9460 */ "KC0_152_Y\0"
  /* 9470 */ "T52_Y\0"
  /* 9476 */ "Addr52_Y\0"
  /* 9485 */ "KC1_162_Y\0"
  /* 9495 */ "T62_Y\0"
  /* 9501 */ "Addr62_Y\0"
  /* 9510 */ "KC1_172_Y\0"
  /* 9520 */ "T72_Y\0"
  /* 9526 */ "Addr72_Y\0"
  /* 9535 */ "KC1_182_Y\0"
  /* 9545 */ "T82_Y\0"
  /* 9551 */ "Addr82_Y\0"
  /* 9560 */ "T92_Y\0"
  /* 9566 */ "Addr92_Y\0"
  /* 9575 */ "T2_Y\0"
  /* 9580 */ "Addr2_Y\0"
  /* 9588 */ "T103_Y\0"
  /* 9595 */ "Addr103_Y\0"
  /* 9605 */ "T113_Y\0"
  /* 9612 */ "Addr113_Y\0"
  /* 9622 */ "T13_Y\0"
  /* 9628 */ "Addr13_Y\0"
  /* 9637 */ "V0123_Y\0"
  /* 9645 */ "T123_Y\0"
  /* 9652 */ "Addr123_Y\0"
  /* 9662 */ "T23_Y\0"
  /* 9668 */ "V23_Y\0"
  /* 9674 */ "Addr23_Y\0"
  /* 9683 */ "KC0_133_Y\0"
  /* 9693 */ "T33_Y\0"
  /* 9699 */ "Addr33_Y\0"
  /* 9708 */ "KC0_143_Y\0"
  /* 9718 */ "T43_Y\0"
  /* 9724 */ "Addr43_Y\0"
  /* 9733 */ "KC0_153_Y\0"
  /* 9743 */ "T53_Y\0"
  /* 9749 */ "Addr53_Y\0"
  /* 9758 */ "KC1_163_Y\0"
  /* 9768 */ "T63_Y\0"
  /* 9774 */ "Addr63_Y\0"
  /* 9783 */ "KC1_173_Y\0"
  /* 9793 */ "T73_Y\0"
  /* 9799 */ "Addr73_Y\0"
  /* 9808 */ "KC1_183_Y\0"
  /* 9818 */ "T83_Y\0"
  /* 9824 */ "Addr83_Y\0"
  /* 9833 */ "T93_Y\0"
  /* 9839 */ "Addr93_Y\0"
  /* 9848 */ "T3_Y\0"
  /* 9853 */ "Addr3_Y\0"
  /* 9861 */ "T104_Y\0"
  /* 9868 */ "Addr104_Y\0"
  /* 9878 */ "T114_Y\0"
  /* 9885 */ "Addr114_Y\0"
  /* 9895 */ "T14_Y\0"
  /* 9901 */ "Addr14_Y\0"
  /* 9910 */ "T124_Y\0"
  /* 9917 */ "Addr124_Y\0"
  /* 9927 */ "T24_Y\0"
  /* 9933 */ "Addr24_Y\0"
  /* 9942 */ "KC0_134_Y\0"
  /* 9952 */ "T34_Y\0"
  /* 9958 */ "Addr34_Y\0"
  /* 9967 */ "KC0_144_Y\0"
  /* 9977 */ "T44_Y\0"
  /* 9983 */ "Addr44_Y\0"
  /* 9992 */ "KC0_154_Y\0"
  /* 10002 */ "T54_Y\0"
  /* 10008 */ "Addr54_Y\0"
  /* 10017 */ "KC1_164_Y\0"
  /* 10027 */ "T64_Y\0"
  /* 10033 */ "Addr64_Y\0"
  /* 10042 */ "KC1_174_Y\0"
  /* 10052 */ "T74_Y\0"
  /* 10058 */ "Addr74_Y\0"
  /* 10067 */ "KC1_184_Y\0"
  /* 10077 */ "T84_Y\0"
  /* 10083 */ "Addr84_Y\0"
  /* 10092 */ "T94_Y\0"
  /* 10098 */ "Addr94_Y\0"
  /* 10107 */ "T4_Y\0"
  /* 10112 */ "Addr4_Y\0"
  /* 10120 */ "T105_Y\0"
  /* 10127 */ "Addr105_Y\0"
  /* 10137 */ "T115_Y\0"
  /* 10144 */ "Addr115_Y\0"
  /* 10154 */ "T15_Y\0"
  /* 10160 */ "Addr15_Y\0"
  /* 10169 */ "T125_Y\0"
  /* 10176 */ "Addr125_Y\0"
  /* 10186 */ "T25_Y\0"
  /* 10192 */ "Addr25_Y\0"
  /* 10201 */ "KC0_135_Y\0"
  /* 10211 */ "T35_Y\0"
  /* 10217 */ "Addr35_Y\0"
  /* 10226 */ "KC0_145_Y\0"
  /* 10236 */ "T45_Y\0"
  /* 10242 */ "Addr45_Y\0"
  /* 10251 */ "KC0_155_Y\0"
  /* 10261 */ "T55_Y\0"
  /* 10267 */ "Addr55_Y\0"
  /* 10276 */ "KC1_165_Y\0"
  /* 10286 */ "T65_Y\0"
  /* 10292 */ "Addr65_Y\0"
  /* 10301 */ "KC1_175_Y\0"
  /* 10311 */ "T75_Y\0"
  /* 10317 */ "Addr75_Y\0"
  /* 10326 */ "KC1_185_Y\0"
  /* 10336 */ "T85_Y\0"
  /* 10342 */ "Addr85_Y\0"
  /* 10351 */ "T95_Y\0"
  /* 10357 */ "Addr95_Y\0"
  /* 10366 */ "T5_Y\0"
  /* 10371 */ "Addr5_Y\0"
  /* 10379 */ "T106_Y\0"
  /* 10386 */ "Addr106_Y\0"
  /* 10396 */ "T116_Y\0"
  /* 10403 */ "Addr116_Y\0"
  /* 10413 */ "T16_Y\0"
  /* 10419 */ "Addr16_Y\0"
  /* 10428 */ "T126_Y\0"
  /* 10435 */ "Addr126_Y\0"
  /* 10445 */ "T26_Y\0"
  /* 10451 */ "Addr26_Y\0"
  /* 10460 */ "KC0_136_Y\0"
  /* 10470 */ "T36_Y\0"
  /* 10476 */ "Addr36_Y\0"
  /* 10485 */ "KC0_146_Y\0"
  /* 10495 */ "T46_Y\0"
  /* 10501 */ "Addr46_Y\0"
  /* 10510 */ "KC0_156_Y\0"
  /* 10520 */ "T56_Y\0"
  /* 10526 */ "Addr56_Y\0"
  /* 10535 */ "KC1_166_Y\0"
  /* 10545 */ "T66_Y\0"
  /* 10551 */ "Addr66_Y\0"
  /* 10560 */ "KC1_176_Y\0"
  /* 10570 */ "T76_Y\0"
  /* 10576 */ "Addr76_Y\0"
  /* 10585 */ "KC1_186_Y\0"
  /* 10595 */ "T86_Y\0"
  /* 10601 */ "Addr86_Y\0"
  /* 10610 */ "T96_Y\0"
  /* 10616 */ "Addr96_Y\0"
  /* 10625 */ "T6_Y\0"
  /* 10630 */ "Addr6_Y\0"
  /* 10638 */ "T107_Y\0"
  /* 10645 */ "Addr107_Y\0"
  /* 10655 */ "T117_Y\0"
  /* 10662 */ "Addr117_Y\0"
  /* 10672 */ "T17_Y\0"
  /* 10678 */ "Addr17_Y\0"
  /* 10687 */ "T127_Y\0"
  /* 10694 */ "Addr127_Y\0"
  /* 10704 */ "T27_Y\0"
  /* 10710 */ "Addr27_Y\0"
  /* 10719 */ "KC0_137_Y\0"
  /* 10729 */ "T37_Y\0"
  /* 10735 */ "Addr37_Y\0"
  /* 10744 */ "KC0_147_Y\0"
  /* 10754 */ "T47_Y\0"
  /* 10760 */ "Addr47_Y\0"
  /* 10769 */ "KC0_157_Y\0"
  /* 10779 */ "T57_Y\0"
  /* 10785 */ "Addr57_Y\0"
  /* 10794 */ "KC1_167_Y\0"
  /* 10804 */ "T67_Y\0"
  /* 10810 */ "Addr67_Y\0"
  /* 10819 */ "KC1_177_Y\0"
  /* 10829 */ "T77_Y\0"
  /* 10835 */ "Addr77_Y\0"
  /* 10844 */ "KC1_187_Y\0"
  /* 10854 */ "T87_Y\0"
  /* 10860 */ "Addr87_Y\0"
  /* 10869 */ "T97_Y\0"
  /* 10875 */ "Addr97_Y\0"
  /* 10884 */ "T7_Y\0"
  /* 10889 */ "Addr7_Y\0"
  /* 10897 */ "T108_Y\0"
  /* 10904 */ "Addr108_Y\0"
  /* 10914 */ "T118_Y\0"
  /* 10921 */ "Addr118_Y\0"
  /* 10931 */ "T18_Y\0"
  /* 10937 */ "Addr18_Y\0"
  /* 10946 */ "KC0_128_Y\0"
  /* 10956 */ "T28_Y\0"
  /* 10962 */ "Addr28_Y\0"
  /* 10971 */ "KC0_138_Y\0"
  /* 10981 */ "T38_Y\0"
  /* 10987 */ "Addr38_Y\0"
  /* 10996 */ "KC0_148_Y\0"
  /* 11006 */ "T48_Y\0"
  /* 11012 */ "Addr48_Y\0"
  /* 11021 */ "KC0_158_Y\0"
  /* 11031 */ "T58_Y\0"
  /* 11037 */ "Addr58_Y\0"
  /* 11046 */ "KC1_168_Y\0"
  /* 11056 */ "T68_Y\0"
  /* 11062 */ "Addr68_Y\0"
  /* 11071 */ "KC1_178_Y\0"
  /* 11081 */ "T78_Y\0"
  /* 11087 */ "Addr78_Y\0"
  /* 11096 */ "KC1_188_Y\0"
  /* 11106 */ "T88_Y\0"
  /* 11112 */ "Addr88_Y\0"
  /* 11121 */ "T98_Y\0"
  /* 11127 */ "Addr98_Y\0"
  /* 11136 */ "T8_Y\0"
  /* 11141 */ "Addr8_Y\0"
  /* 11149 */ "T109_Y\0"
  /* 11156 */ "Addr109_Y\0"
  /* 11166 */ "T119_Y\0"
  /* 11173 */ "Addr119_Y\0"
  /* 11183 */ "T19_Y\0"
  /* 11189 */ "Addr19_Y\0"
  /* 11198 */ "KC0_129_Y\0"
  /* 11208 */ "T29_Y\0"
  /* 11214 */ "Addr29_Y\0"
  /* 11223 */ "KC0_139_Y\0"
  /* 11233 */ "T39_Y\0"
  /* 11239 */ "Addr39_Y\0"
  /* 11248 */ "KC0_149_Y\0"
  /* 11258 */ "T49_Y\0"
  /* 11264 */ "Addr49_Y\0"
  /* 11273 */ "KC0_159_Y\0"
  /* 11283 */ "T59_Y\0"
  /* 11289 */ "Addr59_Y\0"
  /* 11298 */ "KC1_169_Y\0"
  /* 11308 */ "T69_Y\0"
  /* 11314 */ "Addr69_Y\0"
  /* 11323 */ "KC1_179_Y\0"
  /* 11333 */ "T79_Y\0"
  /* 11339 */ "Addr79_Y\0"
  /* 11348 */ "KC1_189_Y\0"
  /* 11358 */ "T89_Y\0"
  /* 11364 */ "Addr89_Y\0"
  /* 11373 */ "T99_Y\0"
  /* 11379 */ "Addr99_Y\0"
  /* 11388 */ "T9_Y\0"
  /* 11393 */ "Addr9_Y\0"
  /* 11401 */ "ALU_LITERAL_Y\0"
  /* 11415 */ "PV_Y\0"
  /* 11420 */ "T100_Z\0"
  /* 11427 */ "Addr100_Z\0"
  /* 11437 */ "T110_Z\0"
  /* 11444 */ "Addr110_Z\0"
  /* 11454 */ "T10_Z\0"
  /* 11460 */ "Addr10_Z\0"
  /* 11469 */ "T120_Z\0"
  /* 11476 */ "Addr120_Z\0"
  /* 11486 */ "T20_Z\0"
  /* 11492 */ "Addr20_Z\0"
  /* 11501 */ "KC0_130_Z\0"
  /* 11511 */ "T30_Z\0"
  /* 11517 */ "Addr30_Z\0"
  /* 11526 */ "KC0_140_Z\0"
  /* 11536 */ "T40_Z\0"
  /* 11542 */ "Addr40_Z\0"
  /* 11551 */ "KC0_150_Z\0"
  /* 11561 */ "T50_Z\0"
  /* 11567 */ "Addr50_Z\0"
  /* 11576 */ "KC1_160_Z\0"
  /* 11586 */ "T60_Z\0"
  /* 11592 */ "Addr60_Z\0"
  /* 11601 */ "KC1_170_Z\0"
  /* 11611 */ "T70_Z\0"
  /* 11617 */ "Addr70_Z\0"
  /* 11626 */ "KC1_180_Z\0"
  /* 11636 */ "T80_Z\0"
  /* 11642 */ "Addr80_Z\0"
  /* 11651 */ "KC1_190_Z\0"
  /* 11661 */ "T90_Z\0"
  /* 11667 */ "Addr90_Z\0"
  /* 11676 */ "T0_Z\0"
  /* 11681 */ "Addr0_Z\0"
  /* 11689 */ "T101_Z\0"
  /* 11696 */ "Addr101_Z\0"
  /* 11706 */ "V01_Z\0"
  /* 11712 */ "T111_Z\0"
  /* 11719 */ "Addr111_Z\0"
  /* 11729 */ "T11_Z\0"
  /* 11735 */ "Addr11_Z\0"
  /* 11744 */ "T121_Z\0"
  /* 11751 */ "Addr121_Z\0"
  /* 11761 */ "T21_Z\0"
  /* 11767 */ "Addr21_Z\0"
  /* 11776 */ "KC0_131_Z\0"
  /* 11786 */ "T31_Z\0"
  /* 11792 */ "Addr31_Z\0"
  /* 11801 */ "KC0_141_Z\0"
  /* 11811 */ "T41_Z\0"
  /* 11817 */ "Addr41_Z\0"
  /* 11826 */ "KC0_151_Z\0"
  /* 11836 */ "T51_Z\0"
  /* 11842 */ "Addr51_Z\0"
  /* 11851 */ "KC1_161_Z\0"
  /* 11861 */ "T61_Z\0"
  /* 11867 */ "Addr61_Z\0"
  /* 11876 */ "KC1_171_Z\0"
  /* 11886 */ "T71_Z\0"
  /* 11892 */ "Addr71_Z\0"
  /* 11901 */ "KC1_181_Z\0"
  /* 11911 */ "T81_Z\0"
  /* 11917 */ "Addr81_Z\0"
  /* 11926 */ "KC1_191_Z\0"
  /* 11936 */ "T91_Z\0"
  /* 11942 */ "Addr91_Z\0"
  /* 11951 */ "T1_Z\0"
  /* 11956 */ "Addr1_Z\0"
  /* 11964 */ "T102_Z\0"
  /* 11971 */ "Addr102_Z\0"
  /* 11981 */ "T112_Z\0"
  /* 11988 */ "Addr112_Z\0"
  /* 11998 */ "T12_Z\0"
  /* 12004 */ "Addr12_Z\0"
  /* 12013 */ "T122_Z\0"
  /* 12020 */ "Addr122_Z\0"
  /* 12030 */ "T22_Z\0"
  /* 12036 */ "Addr22_Z\0"
  /* 12045 */ "KC0_132_Z\0"
  /* 12055 */ "T32_Z\0"
  /* 12061 */ "Addr32_Z\0"
  /* 12070 */ "KC0_142_Z\0"
  /* 12080 */ "T42_Z\0"
  /* 12086 */ "Addr42_Z\0"
  /* 12095 */ "KC0_152_Z\0"
  /* 12105 */ "T52_Z\0"
  /* 12111 */ "Addr52_Z\0"
  /* 12120 */ "KC1_162_Z\0"
  /* 12130 */ "T62_Z\0"
  /* 12136 */ "Addr62_Z\0"
  /* 12145 */ "KC1_172_Z\0"
  /* 12155 */ "T72_Z\0"
  /* 12161 */ "Addr72_Z\0"
  /* 12170 */ "KC1_182_Z\0"
  /* 12180 */ "T82_Z\0"
  /* 12186 */ "Addr82_Z\0"
  /* 12195 */ "T92_Z\0"
  /* 12201 */ "Addr92_Z\0"
  /* 12210 */ "T2_Z\0"
  /* 12215 */ "Addr2_Z\0"
  /* 12223 */ "T103_Z\0"
  /* 12230 */ "Addr103_Z\0"
  /* 12240 */ "T113_Z\0"
  /* 12247 */ "Addr113_Z\0"
  /* 12257 */ "T13_Z\0"
  /* 12263 */ "Addr13_Z\0"
  /* 12272 */ "V0123_Z\0"
  /* 12280 */ "T123_Z\0"
  /* 12287 */ "Addr123_Z\0"
  /* 12297 */ "T23_Z\0"
  /* 12303 */ "V23_Z\0"
  /* 12309 */ "Addr23_Z\0"
  /* 12318 */ "KC0_133_Z\0"
  /* 12328 */ "T33_Z\0"
  /* 12334 */ "Addr33_Z\0"
  /* 12343 */ "KC0_143_Z\0"
  /* 12353 */ "T43_Z\0"
  /* 12359 */ "Addr43_Z\0"
  /* 12368 */ "KC0_153_Z\0"
  /* 12378 */ "T53_Z\0"
  /* 12384 */ "Addr53_Z\0"
  /* 12393 */ "KC1_163_Z\0"
  /* 12403 */ "T63_Z\0"
  /* 12409 */ "Addr63_Z\0"
  /* 12418 */ "KC1_173_Z\0"
  /* 12428 */ "T73_Z\0"
  /* 12434 */ "Addr73_Z\0"
  /* 12443 */ "KC1_183_Z\0"
  /* 12453 */ "T83_Z\0"
  /* 12459 */ "Addr83_Z\0"
  /* 12468 */ "T93_Z\0"
  /* 12474 */ "Addr93_Z\0"
  /* 12483 */ "T3_Z\0"
  /* 12488 */ "Addr3_Z\0"
  /* 12496 */ "T104_Z\0"
  /* 12503 */ "Addr104_Z\0"
  /* 12513 */ "T114_Z\0"
  /* 12520 */ "Addr114_Z\0"
  /* 12530 */ "T14_Z\0"
  /* 12536 */ "Addr14_Z\0"
  /* 12545 */ "T124_Z\0"
  /* 12552 */ "Addr124_Z\0"
  /* 12562 */ "T24_Z\0"
  /* 12568 */ "Addr24_Z\0"
  /* 12577 */ "KC0_134_Z\0"
  /* 12587 */ "T34_Z\0"
  /* 12593 */ "Addr34_Z\0"
  /* 12602 */ "KC0_144_Z\0"
  /* 12612 */ "T44_Z\0"
  /* 12618 */ "Addr44_Z\0"
  /* 12627 */ "KC0_154_Z\0"
  /* 12637 */ "T54_Z\0"
  /* 12643 */ "Addr54_Z\0"
  /* 12652 */ "KC1_164_Z\0"
  /* 12662 */ "T64_Z\0"
  /* 12668 */ "Addr64_Z\0"
  /* 12677 */ "KC1_174_Z\0"
  /* 12687 */ "T74_Z\0"
  /* 12693 */ "Addr74_Z\0"
  /* 12702 */ "KC1_184_Z\0"
  /* 12712 */ "T84_Z\0"
  /* 12718 */ "Addr84_Z\0"
  /* 12727 */ "T94_Z\0"
  /* 12733 */ "Addr94_Z\0"
  /* 12742 */ "T4_Z\0"
  /* 12747 */ "Addr4_Z\0"
  /* 12755 */ "T105_Z\0"
  /* 12762 */ "Addr105_Z\0"
  /* 12772 */ "T115_Z\0"
  /* 12779 */ "Addr115_Z\0"
  /* 12789 */ "T15_Z\0"
  /* 12795 */ "Addr15_Z\0"
  /* 12804 */ "T125_Z\0"
  /* 12811 */ "Addr125_Z\0"
  /* 12821 */ "T25_Z\0"
  /* 12827 */ "Addr25_Z\0"
  /* 12836 */ "KC0_135_Z\0"
  /* 12846 */ "T35_Z\0"
  /* 12852 */ "Addr35_Z\0"
  /* 12861 */ "KC0_145_Z\0"
  /* 12871 */ "T45_Z\0"
  /* 12877 */ "Addr45_Z\0"
  /* 12886 */ "KC0_155_Z\0"
  /* 12896 */ "T55_Z\0"
  /* 12902 */ "Addr55_Z\0"
  /* 12911 */ "KC1_165_Z\0"
  /* 12921 */ "T65_Z\0"
  /* 12927 */ "Addr65_Z\0"
  /* 12936 */ "KC1_175_Z\0"
  /* 12946 */ "T75_Z\0"
  /* 12952 */ "Addr75_Z\0"
  /* 12961 */ "KC1_185_Z\0"
  /* 12971 */ "T85_Z\0"
  /* 12977 */ "Addr85_Z\0"
  /* 12986 */ "T95_Z\0"
  /* 12992 */ "Addr95_Z\0"
  /* 13001 */ "T5_Z\0"
  /* 13006 */ "Addr5_Z\0"
  /* 13014 */ "T106_Z\0"
  /* 13021 */ "Addr106_Z\0"
  /* 13031 */ "T116_Z\0"
  /* 13038 */ "Addr116_Z\0"
  /* 13048 */ "T16_Z\0"
  /* 13054 */ "Addr16_Z\0"
  /* 13063 */ "T126_Z\0"
  /* 13070 */ "Addr126_Z\0"
  /* 13080 */ "T26_Z\0"
  /* 13086 */ "Addr26_Z\0"
  /* 13095 */ "KC0_136_Z\0"
  /* 13105 */ "T36_Z\0"
  /* 13111 */ "Addr36_Z\0"
  /* 13120 */ "KC0_146_Z\0"
  /* 13130 */ "T46_Z\0"
  /* 13136 */ "Addr46_Z\0"
  /* 13145 */ "KC0_156_Z\0"
  /* 13155 */ "T56_Z\0"
  /* 13161 */ "Addr56_Z\0"
  /* 13170 */ "KC1_166_Z\0"
  /* 13180 */ "T66_Z\0"
  /* 13186 */ "Addr66_Z\0"
  /* 13195 */ "KC1_176_Z\0"
  /* 13205 */ "T76_Z\0"
  /* 13211 */ "Addr76_Z\0"
  /* 13220 */ "KC1_186_Z\0"
  /* 13230 */ "T86_Z\0"
  /* 13236 */ "Addr86_Z\0"
  /* 13245 */ "T96_Z\0"
  /* 13251 */ "Addr96_Z\0"
  /* 13260 */ "T6_Z\0"
  /* 13265 */ "Addr6_Z\0"
  /* 13273 */ "T107_Z\0"
  /* 13280 */ "Addr107_Z\0"
  /* 13290 */ "T117_Z\0"
  /* 13297 */ "Addr117_Z\0"
  /* 13307 */ "T17_Z\0"
  /* 13313 */ "Addr17_Z\0"
  /* 13322 */ "T127_Z\0"
  /* 13329 */ "Addr127_Z\0"
  /* 13339 */ "T27_Z\0"
  /* 13345 */ "Addr27_Z\0"
  /* 13354 */ "KC0_137_Z\0"
  /* 13364 */ "T37_Z\0"
  /* 13370 */ "Addr37_Z\0"
  /* 13379 */ "KC0_147_Z\0"
  /* 13389 */ "T47_Z\0"
  /* 13395 */ "Addr47_Z\0"
  /* 13404 */ "KC0_157_Z\0"
  /* 13414 */ "T57_Z\0"
  /* 13420 */ "Addr57_Z\0"
  /* 13429 */ "KC1_167_Z\0"
  /* 13439 */ "T67_Z\0"
  /* 13445 */ "Addr67_Z\0"
  /* 13454 */ "KC1_177_Z\0"
  /* 13464 */ "T77_Z\0"
  /* 13470 */ "Addr77_Z\0"
  /* 13479 */ "KC1_187_Z\0"
  /* 13489 */ "T87_Z\0"
  /* 13495 */ "Addr87_Z\0"
  /* 13504 */ "T97_Z\0"
  /* 13510 */ "Addr97_Z\0"
  /* 13519 */ "T7_Z\0"
  /* 13524 */ "Addr7_Z\0"
  /* 13532 */ "T108_Z\0"
  /* 13539 */ "Addr108_Z\0"
  /* 13549 */ "T118_Z\0"
  /* 13556 */ "Addr118_Z\0"
  /* 13566 */ "T18_Z\0"
  /* 13572 */ "Addr18_Z\0"
  /* 13581 */ "KC0_128_Z\0"
  /* 13591 */ "T28_Z\0"
  /* 13597 */ "Addr28_Z\0"
  /* 13606 */ "KC0_138_Z\0"
  /* 13616 */ "T38_Z\0"
  /* 13622 */ "Addr38_Z\0"
  /* 13631 */ "KC0_148_Z\0"
  /* 13641 */ "T48_Z\0"
  /* 13647 */ "Addr48_Z\0"
  /* 13656 */ "KC0_158_Z\0"
  /* 13666 */ "T58_Z\0"
  /* 13672 */ "Addr58_Z\0"
  /* 13681 */ "KC1_168_Z\0"
  /* 13691 */ "T68_Z\0"
  /* 13697 */ "Addr68_Z\0"
  /* 13706 */ "KC1_178_Z\0"
  /* 13716 */ "T78_Z\0"
  /* 13722 */ "Addr78_Z\0"
  /* 13731 */ "KC1_188_Z\0"
  /* 13741 */ "T88_Z\0"
  /* 13747 */ "Addr88_Z\0"
  /* 13756 */ "T98_Z\0"
  /* 13762 */ "Addr98_Z\0"
  /* 13771 */ "T8_Z\0"
  /* 13776 */ "Addr8_Z\0"
  /* 13784 */ "T109_Z\0"
  /* 13791 */ "Addr109_Z\0"
  /* 13801 */ "T119_Z\0"
  /* 13808 */ "Addr119_Z\0"
  /* 13818 */ "T19_Z\0"
  /* 13824 */ "Addr19_Z\0"
  /* 13833 */ "KC0_129_Z\0"
  /* 13843 */ "T29_Z\0"
  /* 13849 */ "Addr29_Z\0"
  /* 13858 */ "KC0_139_Z\0"
  /* 13868 */ "T39_Z\0"
  /* 13874 */ "Addr39_Z\0"
  /* 13883 */ "KC0_149_Z\0"
  /* 13893 */ "T49_Z\0"
  /* 13899 */ "Addr49_Z\0"
  /* 13908 */ "KC0_159_Z\0"
  /* 13918 */ "T59_Z\0"
  /* 13924 */ "Addr59_Z\0"
  /* 13933 */ "KC1_169_Z\0"
  /* 13943 */ "T69_Z\0"
  /* 13949 */ "Addr69_Z\0"
  /* 13958 */ "KC1_179_Z\0"
  /* 13968 */ "T79_Z\0"
  /* 13974 */ "Addr79_Z\0"
  /* 13983 */ "KC1_189_Z\0"
  /* 13993 */ "T89_Z\0"
  /* 13999 */ "Addr89_Z\0"
  /* 14008 */ "T99_Z\0"
  /* 14014 */ "Addr99_Z\0"
  /* 14023 */ "T9_Z\0"
  /* 14028 */ "Addr9_Z\0"
  /* 14036 */ "ALU_LITERAL_Z\0"
  /* 14050 */ "PV_Z\0"
};
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif

extern const MCRegisterDesc R600RegDesc[] = { // Descriptors
  { 12, 0, 0, 0, 0, 0 },
  { 584, 4, 4, 2, 16384, 13 },
  { 5212, 4, 4, 2, 16385, 13 },
  { 7847, 4, 4, 2, 16386, 13 },
  { 11401, 4, 4, 2, 16387, 13 },
  { 14036, 4, 4, 2, 16388, 13 },
  { 506, 4, 4, 2, 16389, 13 },
  { 7861, 4, 4, 2, 16390, 13 },
  { 501, 4, 4, 2, 16391, 13 },
  { 540, 4, 4, 2, 16392, 13 },
  { 433, 4, 4, 2, 16393, 13 },
  { 450, 4, 4, 2, 16394, 13 },
  { 497, 4, 4, 2, 16395, 13 },
  { 463, 4, 4, 2, 16396, 13 },
  { 467, 4, 4, 2, 16397, 13 },
  { 576, 4, 4, 2, 16398, 13 },
  { 429, 4, 4, 2, 16399, 13 },
  { 530, 4, 4, 2, 16400, 13 },
  { 446, 4, 4, 2, 16401, 13 },
  { 535, 4, 4, 2, 16402, 13 },
  { 562, 4, 4, 2, 16403, 13 },
  { 484, 4, 4, 2, 16404, 13 },
  { 471, 4, 4, 2, 16405, 13 },
  { 516, 4, 4, 2, 16406, 13 },
  { 559, 4, 4, 2, 16407, 13 },
  { 5226, 4, 4, 2, 16408, 13 },
  { 7866, 4, 4, 2, 16409, 13 },
  { 11415, 4, 4, 2, 16410, 13 },
  { 14050, 4, 4, 2, 16411, 13 },
  { 525, 4, 4, 2, 16412, 13 },
  { 325, 4, 4, 2, 16413, 13 },
  { 377, 4, 4, 2, 16414, 13 },
  { 0, 4, 4, 2, 16415, 13 },
  { 52, 4, 4, 2, 16416, 13 },
  { 91, 4, 4, 2, 16417, 13 },
  { 130, 4, 4, 2, 16418, 13 },
  { 169, 4, 4, 2, 16419, 13 },
  { 208, 4, 4, 2, 16420, 13 },
  { 247, 4, 4, 2, 16421, 13 },
  { 286, 4, 4, 2, 16422, 13 },
  { 338, 4, 4, 2, 16423, 13 },
  { 390, 4, 4, 2, 16424, 13 },
  { 13, 4, 4, 2, 16425, 13 },
  { 65, 4, 4, 2, 16426, 13 },
  { 104, 4, 4, 2, 16427, 13 },
  { 143, 4, 4, 2, 16428, 13 },
  { 182, 4, 4, 2, 16429, 13 },
  { 221, 4, 4, 2, 16430, 13 },
  { 260, 4, 4, 2, 16431, 13 },
  { 299, 4, 4, 2, 16432, 13 },
  { 351, 4, 4, 2, 16433, 13 },
  { 403, 4, 4, 2, 16434, 13 },
  { 26, 4, 4, 2, 16435, 13 },
  { 78, 4, 4, 2, 16436, 13 },
  { 117, 4, 4, 2, 16437, 13 },
  { 156, 4, 4, 2, 16438, 13 },
  { 195, 4, 4, 2, 16439, 13 },
  { 234, 4, 4, 2, 16440, 13 },
  { 273, 4, 4, 2, 16441, 13 },
  { 312, 4, 4, 2, 16442, 13 },
  { 364, 4, 4, 2, 16443, 13 },
  { 416, 4, 4, 2, 16444, 13 },
  { 39, 4, 4, 2, 16445, 13 },
  { 2857, 4, 4, 2, 16446, 13 },
  { 3132, 4, 4, 2, 16447, 13 },
  { 3391, 4, 4, 2, 16448, 13 },
  { 3664, 4, 4, 2, 16449, 13 },
  { 3923, 4, 4, 2, 16450, 13 },
  { 4182, 4, 4, 2, 16451, 13 },
  { 4441, 4, 4, 2, 16452, 13 },
  { 4700, 4, 4, 2, 16453, 13 },
  { 4952, 4, 4, 2, 16454, 13 },
  { 5204, 4, 4, 2, 16455, 13 },
  { 2636, 4, 4, 2, 16456, 13 },
  { 2911, 4, 4, 2, 16457, 13 },
  { 3180, 4, 4, 2, 16458, 13 },
  { 3439, 4, 4, 2, 16459, 13 },
  { 3712, 4, 4, 2, 16460, 13 },
  { 3971, 4, 4, 2, 16461, 13 },
  { 4230, 4, 4, 2, 16462, 13 },
  { 4489, 4, 4, 2, 16463, 13 },
  { 4748, 4, 4, 2, 16464, 13 },
  { 5000, 4, 4, 2, 16465, 13 },
  { 2668, 4, 4, 2, 16466, 13 },
  { 2943, 4, 4, 2, 16467, 13 },
  { 3212, 4, 4, 2, 16468, 13 },
  { 3485, 4, 4, 2, 16469, 13 },
  { 3744, 4, 4, 2, 16470, 13 },
  { 4003, 4, 4, 2, 16471, 13 },
  { 4262, 4, 4, 2, 16472, 13 },
  { 4521, 4, 4, 2, 16473, 13 },
  { 4773, 4, 4, 2, 16474, 13 },
  { 5025, 4, 4, 2, 16475, 13 },
  { 2693, 4, 4, 2, 16476, 13 },
  { 2968, 4, 4, 2, 16477, 13 },
  { 3237, 4, 4, 2, 16478, 13 },
  { 3510, 4, 4, 2, 16479, 13 },
  { 3769, 4, 4, 2, 16480, 13 },
  { 4028, 4, 4, 2, 16481, 13 },
  { 4287, 4, 4, 2, 16482, 13 },
  { 4546, 4, 4, 2, 16483, 13 },
  { 4798, 4, 4, 2, 16484, 13 },
  { 5050, 4, 4, 2, 16485, 13 },
  { 2718, 4, 4, 2, 16486, 13 },
  { 2993, 4, 4, 2, 16487, 13 },
  { 3262, 4, 4, 2, 16488, 13 },
  { 3535, 4, 4, 2, 16489, 13 },
  { 3794, 4, 4, 2, 16490, 13 },
  { 4053, 4, 4, 2, 16491, 13 },
  { 4312, 4, 4, 2, 16492, 13 },
  { 4571, 4, 4, 2, 16493, 13 },
  { 4823, 4, 4, 2, 16494, 13 },
  { 5075, 4, 4, 2, 16495, 13 },
  { 2743, 4, 4, 2, 16496, 13 },
  { 3018, 4, 4, 2, 16497, 13 },
  { 3287, 4, 4, 2, 16498, 13 },
  { 3560, 4, 4, 2, 16499, 13 },
  { 3819, 4, 4, 2, 16500, 13 },
  { 4078, 4, 4, 2, 16501, 13 },
  { 4337, 4, 4, 2, 16502, 13 },
  { 4596, 4, 4, 2, 16503, 13 },
  { 4848, 4, 4, 2, 16504, 13 },
  { 5100, 4, 4, 2, 16505, 13 },
  { 2768, 4, 4, 2, 16506, 13 },
  { 3043, 4, 4, 2, 16507, 13 },
  { 3312, 4, 4, 2, 16508, 13 },
  { 3585, 4, 4, 2, 16509, 13 },
  { 3844, 4, 4, 2, 16510, 13 },
  { 4103, 4, 4, 2, 16511, 13 },
  { 4362, 4, 4, 2, 16512, 13 },
  { 4621, 4, 4, 2, 16513, 13 },
  { 4873, 4, 4, 2, 16514, 13 },
  { 5125, 4, 4, 2, 16515, 13 },
  { 2793, 4, 4, 2, 16516, 13 },
  { 3068, 4, 4, 2, 16517, 13 },
  { 3337, 4, 4, 2, 16518, 13 },
  { 3610, 4, 4, 2, 16519, 13 },
  { 3869, 4, 4, 2, 16520, 13 },
  { 4128, 4, 4, 2, 16521, 13 },
  { 4387, 4, 4, 2, 16522, 13 },
  { 4646, 4, 4, 2, 16523, 13 },
  { 4898, 4, 4, 2, 16524, 13 },
  { 5150, 4, 4, 2, 16525, 13 },
  { 2818, 4, 4, 2, 16526, 13 },
  { 3093, 4, 4, 2, 16527, 13 },
  { 3362, 4, 4, 2, 16528, 13 },
  { 3635, 4, 4, 2, 16529, 13 },
  { 3894, 4, 4, 2, 16530, 13 },
  { 4153, 4, 4, 2, 16531, 13 },
  { 4412, 4, 4, 2, 16532, 13 },
  { 4671, 4, 4, 2, 16533, 13 },
  { 4923, 4, 4, 2, 16534, 13 },
  { 5175, 4, 4, 2, 16535, 13 },
  { 2843, 4, 4, 2, 16536, 13 },
  { 3118, 4, 4, 2, 16537, 13 },
  { 3377, 4, 4, 2, 16538, 13 },
  { 3650, 4, 4, 2, 16539, 13 },
  { 3909, 4, 4, 2, 16540, 13 },
  { 4168, 4, 4, 2, 16541, 13 },
  { 4427, 4, 4, 2, 16542, 13 },
  { 4686, 4, 4, 2, 16543, 13 },
  { 4938, 4, 4, 2, 16544, 13 },
  { 5190, 4, 4, 2, 16545, 13 },
  { 2603, 4, 4, 2, 16546, 13 },
  { 2872, 4, 4, 2, 16547, 13 },
  { 3147, 4, 4, 2, 16548, 13 },
  { 3406, 4, 4, 2, 16549, 13 },
  { 3679, 4, 4, 2, 16550, 13 },
  { 3938, 4, 4, 2, 16551, 13 },
  { 4197, 4, 4, 2, 16552, 13 },
  { 4456, 4, 4, 2, 16553, 13 },
  { 4715, 4, 4, 2, 16554, 13 },
  { 4967, 4, 4, 2, 16555, 13 },
  { 2620, 4, 4, 2, 16556, 13 },
  { 2895, 4, 4, 2, 16557, 13 },
  { 3164, 4, 4, 2, 16558, 13 },
  { 3423, 4, 4, 2, 16559, 13 },
  { 3696, 4, 4, 2, 16560, 13 },
  { 3955, 4, 4, 2, 16561, 13 },
  { 4214, 4, 4, 2, 16562, 13 },
  { 4473, 4, 4, 2, 16563, 13 },
  { 4732, 4, 4, 2, 16564, 13 },
  { 4984, 4, 4, 2, 16565, 13 },
  { 2652, 4, 4, 2, 16566, 13 },
  { 2927, 4, 4, 2, 16567, 13 },
  { 3196, 4, 4, 2, 16568, 13 },
  { 3463, 4, 4, 2, 16569, 13 },
  { 3728, 4, 4, 2, 16570, 13 },
  { 3987, 4, 4, 2, 16571, 13 },
  { 4246, 4, 4, 2, 16572, 13 },
  { 4505, 4, 4, 2, 16573, 13 },
  { 5492, 4, 4, 2, 16574, 13 },
  { 5767, 4, 4, 2, 16575, 13 },
  { 6026, 4, 4, 2, 16576, 13 },
  { 6299, 4, 4, 2, 16577, 13 },
  { 6558, 4, 4, 2, 16578, 13 },
  { 6817, 4, 4, 2, 16579, 13 },
  { 7076, 4, 4, 2, 16580, 13 },
  { 7335, 4, 4, 2, 16581, 13 },
  { 7587, 4, 4, 2, 16582, 13 },
  { 7839, 4, 4, 2, 16583, 13 },
  { 5271, 4, 4, 2, 16584, 13 },
  { 5546, 4, 4, 2, 16585, 13 },
  { 5815, 4, 4, 2, 16586, 13 },
  { 6074, 4, 4, 2, 16587, 13 },
  { 6347, 4, 4, 2, 16588, 13 },
  { 6606, 4, 4, 2, 16589, 13 },
  { 6865, 4, 4, 2, 16590, 13 },
  { 7124, 4, 4, 2, 16591, 13 },
  { 7383, 4, 4, 2, 16592, 13 },
  { 7635, 4, 4, 2, 16593, 13 },
  { 5303, 4, 4, 2, 16594, 13 },
  { 5578, 4, 4, 2, 16595, 13 },
  { 5847, 4, 4, 2, 16596, 13 },
  { 6120, 4, 4, 2, 16597, 13 },
  { 6379, 4, 4, 2, 16598, 13 },
  { 6638, 4, 4, 2, 16599, 13 },
  { 6897, 4, 4, 2, 16600, 13 },
  { 7156, 4, 4, 2, 16601, 13 },
  { 7408, 4, 4, 2, 16602, 13 },
  { 7660, 4, 4, 2, 16603, 13 },
  { 5328, 4, 4, 2, 16604, 13 },
  { 5603, 4, 4, 2, 16605, 13 },
  { 5872, 4, 4, 2, 16606, 13 },
  { 6145, 4, 4, 2, 16607, 13 },
  { 6404, 4, 4, 2, 16608, 13 },
  { 6663, 4, 4, 2, 16609, 13 },
  { 6922, 4, 4, 2, 16610, 13 },
  { 7181, 4, 4, 2, 16611, 13 },
  { 7433, 4, 4, 2, 16612, 13 },
  { 7685, 4, 4, 2, 16613, 13 },
  { 5353, 4, 4, 2, 16614, 13 },
  { 5628, 4, 4, 2, 16615, 13 },
  { 5897, 4, 4, 2, 16616, 13 },
  { 6170, 4, 4, 2, 16617, 13 },
  { 6429, 4, 4, 2, 16618, 13 },
  { 6688, 4, 4, 2, 16619, 13 },
  { 6947, 4, 4, 2, 16620, 13 },
  { 7206, 4, 4, 2, 16621, 13 },
  { 7458, 4, 4, 2, 16622, 13 },
  { 7710, 4, 4, 2, 16623, 13 },
  { 5378, 4, 4, 2, 16624, 13 },
  { 5653, 4, 4, 2, 16625, 13 },
  { 5922, 4, 4, 2, 16626, 13 },
  { 6195, 4, 4, 2, 16627, 13 },
  { 6454, 4, 4, 2, 16628, 13 },
  { 6713, 4, 4, 2, 16629, 13 },
  { 6972, 4, 4, 2, 16630, 13 },
  { 7231, 4, 4, 2, 16631, 13 },
  { 7483, 4, 4, 2, 16632, 13 },
  { 7735, 4, 4, 2, 16633, 13 },
  { 5403, 4, 4, 2, 16634, 13 },
  { 5678, 4, 4, 2, 16635, 13 },
  { 5947, 4, 4, 2, 16636, 13 },
  { 6220, 4, 4, 2, 16637, 13 },
  { 6479, 4, 4, 2, 16638, 13 },
  { 6738, 4, 4, 2, 16639, 13 },
  { 6997, 4, 4, 2, 16640, 13 },
  { 7256, 4, 4, 2, 16641, 13 },
  { 7508, 4, 4, 2, 16642, 13 },
  { 7760, 4, 4, 2, 16643, 13 },
  { 5428, 4, 4, 2, 16644, 13 },
  { 5703, 4, 4, 2, 16645, 13 },
  { 5972, 4, 4, 2, 16646, 13 },
  { 6245, 4, 4, 2, 16647, 13 },
  { 6504, 4, 4, 2, 16648, 13 },
  { 6763, 4, 4, 2, 16649, 13 },
  { 7022, 4, 4, 2, 16650, 13 },
  { 7281, 4, 4, 2, 16651, 13 },
  { 7533, 4, 4, 2, 16652, 13 },
  { 7785, 4, 4, 2, 16653, 13 },
  { 5453, 4, 4, 2, 16654, 13 },
  { 5728, 4, 4, 2, 16655, 13 },
  { 5997, 4, 4, 2, 16656, 13 },
  { 6270, 4, 4, 2, 16657, 13 },
  { 6529, 4, 4, 2, 16658, 13 },
  { 6788, 4, 4, 2, 16659, 13 },
  { 7047, 4, 4, 2, 16660, 13 },
  { 7306, 4, 4, 2, 16661, 13 },
  { 7558, 4, 4, 2, 16662, 13 },
  { 7810, 4, 4, 2, 16663, 13 },
  { 5478, 4, 4, 2, 16664, 13 },
  { 5753, 4, 4, 2, 16665, 13 },
  { 6012, 4, 4, 2, 16666, 13 },
  { 6285, 4, 4, 2, 16667, 13 },
  { 6544, 4, 4, 2, 16668, 13 },
  { 6803, 4, 4, 2, 16669, 13 },
  { 7062, 4, 4, 2, 16670, 13 },
  { 7321, 4, 4, 2, 16671, 13 },
  { 7573, 4, 4, 2, 16672, 13 },
  { 7825, 4, 4, 2, 16673, 13 },
  { 5238, 4, 4, 2, 16674, 13 },
  { 5507, 4, 4, 2, 16675, 13 },
  { 5782, 4, 4, 2, 16676, 13 },
  { 6041, 4, 4, 2, 16677, 13 },
  { 6314, 4, 4, 2, 16678, 13 },
  { 6573, 4, 4, 2, 16679, 13 },
  { 6832, 4, 4, 2, 16680, 13 },
  { 7091, 4, 4, 2, 16681, 13 },
  { 7350, 4, 4, 2, 16682, 13 },
  { 7602, 4, 4, 2, 16683, 13 },
  { 5255, 4, 4, 2, 16684, 13 },
  { 5530, 4, 4, 2, 16685, 13 },
  { 5799, 4, 4, 2, 16686, 13 },
  { 6058, 4, 4, 2, 16687, 13 },
  { 6331, 4, 4, 2, 16688, 13 },
  { 6590, 4, 4, 2, 16689, 13 },
  { 6849, 4, 4, 2, 16690, 13 },
  { 7108, 4, 4, 2, 16691, 13 },
  { 7367, 4, 4, 2, 16692, 13 },
  { 7619, 4, 4, 2, 16693, 13 },
  { 5287, 4, 4, 2, 16694, 13 },
  { 5562, 4, 4, 2, 16695, 13 },
  { 5831, 4, 4, 2, 16696, 13 },
  { 6098, 4, 4, 2, 16697, 13 },
  { 6363, 4, 4, 2, 16698, 13 },
  { 6622, 4, 4, 2, 16699, 13 },
  { 6881, 4, 4, 2, 16700, 13 },
  { 7140, 4, 4, 2, 16701, 13 },
  { 9046, 4, 4, 2, 16702, 13 },
  { 9321, 4, 4, 2, 16703, 13 },
  { 9580, 4, 4, 2, 16704, 13 },
  { 9853, 4, 4, 2, 16705, 13 },
  { 10112, 4, 4, 2, 16706, 13 },
  { 10371, 4, 4, 2, 16707, 13 },
  { 10630, 4, 4, 2, 16708, 13 },
  { 10889, 4, 4, 2, 16709, 13 },
  { 11141, 4, 4, 2, 16710, 13 },
  { 11393, 4, 4, 2, 16711, 13 },
  { 8825, 4, 4, 2, 16712, 13 },
  { 9100, 4, 4, 2, 16713, 13 },
  { 9369, 4, 4, 2, 16714, 13 },
  { 9628, 4, 4, 2, 16715, 13 },
  { 9901, 4, 4, 2, 16716, 13 },
  { 10160, 4, 4, 2, 16717, 13 },
  { 10419, 4, 4, 2, 16718, 13 },
  { 10678, 4, 4, 2, 16719, 13 },
  { 10937, 4, 4, 2, 16720, 13 },
  { 11189, 4, 4, 2, 16721, 13 },
  { 8857, 4, 4, 2, 16722, 13 },
  { 9132, 4, 4, 2, 16723, 13 },
  { 9401, 4, 4, 2, 16724, 13 },
  { 9674, 4, 4, 2, 16725, 13 },
  { 9933, 4, 4, 2, 16726, 13 },
  { 10192, 4, 4, 2, 16727, 13 },
  { 10451, 4, 4, 2, 16728, 13 },
  { 10710, 4, 4, 2, 16729, 13 },
  { 10962, 4, 4, 2, 16730, 13 },
  { 11214, 4, 4, 2, 16731, 13 },
  { 8882, 4, 4, 2, 16732, 13 },
  { 9157, 4, 4, 2, 16733, 13 },
  { 9426, 4, 4, 2, 16734, 13 },
  { 9699, 4, 4, 2, 16735, 13 },
  { 9958, 4, 4, 2, 16736, 13 },
  { 10217, 4, 4, 2, 16737, 13 },
  { 10476, 4, 4, 2, 16738, 13 },
  { 10735, 4, 4, 2, 16739, 13 },
  { 10987, 4, 4, 2, 16740, 13 },
  { 11239, 4, 4, 2, 16741, 13 },
  { 8907, 4, 4, 2, 16742, 13 },
  { 9182, 4, 4, 2, 16743, 13 },
  { 9451, 4, 4, 2, 16744, 13 },
  { 9724, 4, 4, 2, 16745, 13 },
  { 9983, 4, 4, 2, 16746, 13 },
  { 10242, 4, 4, 2, 16747, 13 },
  { 10501, 4, 4, 2, 16748, 13 },
  { 10760, 4, 4, 2, 16749, 13 },
  { 11012, 4, 4, 2, 16750, 13 },
  { 11264, 4, 4, 2, 16751, 13 },
  { 8932, 4, 4, 2, 16752, 13 },
  { 9207, 4, 4, 2, 16753, 13 },
  { 9476, 4, 4, 2, 16754, 13 },
  { 9749, 4, 4, 2, 16755, 13 },
  { 10008, 4, 4, 2, 16756, 13 },
  { 10267, 4, 4, 2, 16757, 13 },
  { 10526, 4, 4, 2, 16758, 13 },
  { 10785, 4, 4, 2, 16759, 13 },
  { 11037, 4, 4, 2, 16760, 13 },
  { 11289, 4, 4, 2, 16761, 13 },
  { 8957, 4, 4, 2, 16762, 13 },
  { 9232, 4, 4, 2, 16763, 13 },
  { 9501, 4, 4, 2, 16764, 13 },
  { 9774, 4, 4, 2, 16765, 13 },
  { 10033, 4, 4, 2, 16766, 13 },
  { 10292, 4, 4, 2, 16767, 13 },
  { 10551, 4, 4, 2, 16768, 13 },
  { 10810, 4, 4, 2, 16769, 13 },
  { 11062, 4, 4, 2, 16770, 13 },
  { 11314, 4, 4, 2, 16771, 13 },
  { 8982, 4, 4, 2, 16772, 13 },
  { 9257, 4, 4, 2, 16773, 13 },
  { 9526, 4, 4, 2, 16774, 13 },
  { 9799, 4, 4, 2, 16775, 13 },
  { 10058, 4, 4, 2, 16776, 13 },
  { 10317, 4, 4, 2, 16777, 13 },
  { 10576, 4, 4, 2, 16778, 13 },
  { 10835, 4, 4, 2, 16779, 13 },
  { 11087, 4, 4, 2, 16780, 13 },
  { 11339, 4, 4, 2, 16781, 13 },
  { 9007, 4, 4, 2, 16782, 13 },
  { 9282, 4, 4, 2, 16783, 13 },
  { 9551, 4, 4, 2, 16784, 13 },
  { 9824, 4, 4, 2, 16785, 13 },
  { 10083, 4, 4, 2, 16786, 13 },
  { 10342, 4, 4, 2, 16787, 13 },
  { 10601, 4, 4, 2, 16788, 13 },
  { 10860, 4, 4, 2, 16789, 13 },
  { 11112, 4, 4, 2, 16790, 13 },
  { 11364, 4, 4, 2, 16791, 13 },
  { 9032, 4, 4, 2, 16792, 13 },
  { 9307, 4, 4, 2, 16793, 13 },
  { 9566, 4, 4, 2, 16794, 13 },
  { 9839, 4, 4, 2, 16795, 13 },
  { 10098, 4, 4, 2, 16796, 13 },
  { 10357, 4, 4, 2, 16797, 13 },
  { 10616, 4, 4, 2, 16798, 13 },
  { 10875, 4, 4, 2, 16799, 13 },
  { 11127, 4, 4, 2, 16800, 13 },
  { 11379, 4, 4, 2, 16801, 13 },
  { 8792, 4, 4, 2, 16802, 13 },
  { 9061, 4, 4, 2, 16803, 13 },
  { 9336, 4, 4, 2, 16804, 13 },
  { 9595, 4, 4, 2, 16805, 13 },
  { 9868, 4, 4, 2, 16806, 13 },
  { 10127, 4, 4, 2, 16807, 13 },
  { 10386, 4, 4, 2, 16808, 13 },
  { 10645, 4, 4, 2, 16809, 13 },
  { 10904, 4, 4, 2, 16810, 13 },
  { 11156, 4, 4, 2, 16811, 13 },
  { 8809, 4, 4, 2, 16812, 13 },
  { 9084, 4, 4, 2, 16813, 13 },
  { 9353, 4, 4, 2, 16814, 13 },
  { 9612, 4, 4, 2, 16815, 13 },
  { 9885, 4, 4, 2, 16816, 13 },
  { 10144, 4, 4, 2, 16817, 13 },
  { 10403, 4, 4, 2, 16818, 13 },
  { 10662, 4, 4, 2, 16819, 13 },
  { 10921, 4, 4, 2, 16820, 13 },
  { 11173, 4, 4, 2, 16821, 13 },
  { 8841, 4, 4, 2, 16822, 13 },
  { 9116, 4, 4, 2, 16823, 13 },
  { 9385, 4, 4, 2, 16824, 13 },
  { 9652, 4, 4, 2, 16825, 13 },
  { 9917, 4, 4, 2, 16826, 13 },
  { 10176, 4, 4, 2, 16827, 13 },
  { 10435, 4, 4, 2, 16828, 13 },
  { 10694, 4, 4, 2, 16829, 13 },
  { 11681, 4, 4, 2, 16830, 13 },
  { 11956, 4, 4, 2, 16831, 13 },
  { 12215, 4, 4, 2, 16832, 13 },
  { 12488, 4, 4, 2, 16833, 13 },
  { 12747, 4, 4, 2, 16834, 13 },
  { 13006, 4, 4, 2, 16835, 13 },
  { 13265, 4, 4, 2, 16836, 13 },
  { 13524, 4, 4, 2, 16837, 13 },
  { 13776, 4, 4, 2, 16838, 13 },
  { 14028, 4, 4, 2, 16839, 13 },
  { 11460, 4, 4, 2, 16840, 13 },
  { 11735, 4, 4, 2, 16841, 13 },
  { 12004, 4, 4, 2, 16842, 13 },
  { 12263, 4, 4, 2, 16843, 13 },
  { 12536, 4, 4, 2, 16844, 13 },
  { 12795, 4, 4, 2, 16845, 13 },
  { 13054, 4, 4, 2, 16846, 13 },
  { 13313, 4, 4, 2, 16847, 13 },
  { 13572, 4, 4, 2, 16848, 13 },
  { 13824, 4, 4, 2, 16849, 13 },
  { 11492, 4, 4, 2, 16850, 13 },
  { 11767, 4, 4, 2, 16851, 13 },
  { 12036, 4, 4, 2, 16852, 13 },
  { 12309, 4, 4, 2, 16853, 13 },
  { 12568, 4, 4, 2, 16854, 13 },
  { 12827, 4, 4, 2, 16855, 13 },
  { 13086, 4, 4, 2, 16856, 13 },
  { 13345, 4, 4, 2, 16857, 13 },
  { 13597, 4, 4, 2, 16858, 13 },
  { 13849, 4, 4, 2, 16859, 13 },
  { 11517, 4, 4, 2, 16860, 13 },
  { 11792, 4, 4, 2, 16861, 13 },
  { 12061, 4, 4, 2, 16862, 13 },
  { 12334, 4, 4, 2, 16863, 13 },
  { 12593, 4, 4, 2, 16864, 13 },
  { 12852, 4, 4, 2, 16865, 13 },
  { 13111, 4, 4, 2, 16866, 13 },
  { 13370, 4, 4, 2, 16867, 13 },
  { 13622, 4, 4, 2, 16868, 13 },
  { 13874, 4, 4, 2, 16869, 13 },
  { 11542, 4, 4, 2, 16870, 13 },
  { 11817, 4, 4, 2, 16871, 13 },
  { 12086, 4, 4, 2, 16872, 13 },
  { 12359, 4, 4, 2, 16873, 13 },
  { 12618, 4, 4, 2, 16874, 13 },
  { 12877, 4, 4, 2, 16875, 13 },
  { 13136, 4, 4, 2, 16876, 13 },
  { 13395, 4, 4, 2, 16877, 13 },
  { 13647, 4, 4, 2, 16878, 13 },
  { 13899, 4, 4, 2, 16879, 13 },
  { 11567, 4, 4, 2, 16880, 13 },
  { 11842, 4, 4, 2, 16881, 13 },
  { 12111, 4, 4, 2, 16882, 13 },
  { 12384, 4, 4, 2, 16883, 13 },
  { 12643, 4, 4, 2, 16884, 13 },
  { 12902, 4, 4, 2, 16885, 13 },
  { 13161, 4, 4, 2, 16886, 13 },
  { 13420, 4, 4, 2, 16887, 13 },
  { 13672, 4, 4, 2, 16888, 13 },
  { 13924, 4, 4, 2, 16889, 13 },
  { 11592, 4, 4, 2, 16890, 13 },
  { 11867, 4, 4, 2, 16891, 13 },
  { 12136, 4, 4, 2, 16892, 13 },
  { 12409, 4, 4, 2, 16893, 13 },
  { 12668, 4, 4, 2, 16894, 13 },
  { 12927, 4, 4, 2, 16895, 13 },
  { 13186, 4, 4, 2, 16896, 13 },
  { 13445, 4, 4, 2, 16897, 13 },
  { 13697, 4, 4, 2, 16898, 13 },
  { 13949, 4, 4, 2, 16899, 13 },
  { 11617, 4, 4, 2, 16900, 13 },
  { 11892, 4, 4, 2, 16901, 13 },
  { 12161, 4, 4, 2, 16902, 13 },
  { 12434, 4, 4, 2, 16903, 13 },
  { 12693, 4, 4, 2, 16904, 13 },
  { 12952, 4, 4, 2, 16905, 13 },
  { 13211, 4, 4, 2, 16906, 13 },
  { 13470, 4, 4, 2, 16907, 13 },
  { 13722, 4, 4, 2, 16908, 13 },
  { 13974, 4, 4, 2, 16909, 13 },
  { 11642, 4, 4, 2, 16910, 13 },
  { 11917, 4, 4, 2, 16911, 13 },
  { 12186, 4, 4, 2, 16912, 13 },
  { 12459, 4, 4, 2, 16913, 13 },
  { 12718, 4, 4, 2, 16914, 13 },
  { 12977, 4, 4, 2, 16915, 13 },
  { 13236, 4, 4, 2, 16916, 13 },
  { 13495, 4, 4, 2, 16917, 13 },
  { 13747, 4, 4, 2, 16918, 13 },
  { 13999, 4, 4, 2, 16919, 13 },
  { 11667, 4, 4, 2, 16920, 13 },
  { 11942, 4, 4, 2, 16921, 13 },
  { 12201, 4, 4, 2, 16922, 13 },
  { 12474, 4, 4, 2, 16923, 13 },
  { 12733, 4, 4, 2, 16924, 13 },
  { 12992, 4, 4, 2, 16925, 13 },
  { 13251, 4, 4, 2, 16926, 13 },
  { 13510, 4, 4, 2, 16927, 13 },
  { 13762, 4, 4, 2, 16928, 13 },
  { 14014, 4, 4, 2, 16929, 13 },
  { 11427, 4, 4, 2, 16930, 13 },
  { 11696, 4, 4, 2, 16931, 13 },
  { 11971, 4, 4, 2, 16932, 13 },
  { 12230, 4, 4, 2, 16933, 13 },
  { 12503, 4, 4, 2, 16934, 13 },
  { 12762, 4, 4, 2, 16935, 13 },
  { 13021, 4, 4, 2, 16936, 13 },
  { 13280, 4, 4, 2, 16937, 13 },
  { 13539, 4, 4, 2, 16938, 13 },
  { 13791, 4, 4, 2, 16939, 13 },
  { 11444, 4, 4, 2, 16940, 13 },
  { 11719, 4, 4, 2, 16941, 13 },
  { 11988, 4, 4, 2, 16942, 13 },
  { 12247, 4, 4, 2, 16943, 13 },
  { 12520, 4, 4, 2, 16944, 13 },
  { 12779, 4, 4, 2, 16945, 13 },
  { 13038, 4, 4, 2, 16946, 13 },
  { 13297, 4, 4, 2, 16947, 13 },
  { 13556, 4, 4, 2, 16948, 13 },
  { 13808, 4, 4, 2, 16949, 13 },
  { 11476, 4, 4, 2, 16950, 13 },
  { 11751, 4, 4, 2, 16951, 13 },
  { 12020, 4, 4, 2, 16952, 13 },
  { 12287, 4, 4, 2, 16953, 13 },
  { 12552, 4, 4, 2, 16954, 13 },
  { 12811, 4, 4, 2, 16955, 13 },
  { 13070, 4, 4, 2, 16956, 13 },
  { 13329, 4, 4, 2, 16957, 13 },
  { 2852, 4, 354, 2, 16958, 13 },
  { 3127, 4, 350, 2, 16959, 13 },
  { 3386, 4, 318, 2, 16960, 13 },
  { 3659, 4, 314, 2, 16961, 13 },
  { 3918, 4, 396, 2, 16962, 13 },
  { 4177, 4, 396, 2, 16963, 13 },
  { 4436, 4, 396, 2, 16964, 13 },
  { 4695, 4, 396, 2, 16965, 13 },
  { 4947, 4, 396, 2, 16966, 13 },
  { 5199, 4, 396, 2, 16967, 13 },
  { 2630, 4, 396, 2, 16968, 13 },
  { 2905, 4, 396, 2, 16969, 13 },
  { 3174, 4, 396, 2, 16970, 13 },
  { 3433, 4, 396, 2, 16971, 13 },
  { 3706, 4, 396, 2, 16972, 13 },
  { 3965, 4, 396, 2, 16973, 13 },
  { 4224, 4, 396, 2, 16974, 13 },
  { 4483, 4, 396, 2, 16975, 13 },
  { 4742, 4, 396, 2, 16976, 13 },
  { 4994, 4, 396, 2, 16977, 13 },
  { 2662, 4, 396, 2, 16978, 13 },
  { 2937, 4, 396, 2, 16979, 13 },
  { 3206, 4, 396, 2, 16980, 13 },
  { 3473, 4, 396, 2, 16981, 13 },
  { 3738, 4, 396, 2, 16982, 13 },
  { 3997, 4, 396, 2, 16983, 13 },
  { 4256, 4, 396, 2, 16984, 13 },
  { 4515, 4, 396, 2, 16985, 13 },
  { 4767, 4, 396, 2, 16986, 13 },
  { 5019, 4, 396, 2, 16987, 13 },
  { 2687, 4, 396, 2, 16988, 13 },
  { 2962, 4, 396, 2, 16989, 13 },
  { 3231, 4, 396, 2, 16990, 13 },
  { 3504, 4, 396, 2, 16991, 13 },
  { 3763, 4, 396, 2, 16992, 13 },
  { 4022, 4, 396, 2, 16993, 13 },
  { 4281, 4, 396, 2, 16994, 13 },
  { 4540, 4, 396, 2, 16995, 13 },
  { 4792, 4, 396, 2, 16996, 13 },
  { 5044, 4, 396, 2, 16997, 13 },
  { 2712, 4, 396, 2, 16998, 13 },
  { 2987, 4, 396, 2, 16999, 13 },
  { 3256, 4, 396, 2, 17000, 13 },
  { 3529, 4, 396, 2, 17001, 13 },
  { 3788, 4, 396, 2, 17002, 13 },
  { 4047, 4, 396, 2, 17003, 13 },
  { 4306, 4, 396, 2, 17004, 13 },
  { 4565, 4, 396, 2, 17005, 13 },
  { 4817, 4, 396, 2, 17006, 13 },
  { 5069, 4, 396, 2, 17007, 13 },
  { 2737, 4, 396, 2, 17008, 13 },
  { 3012, 4, 396, 2, 17009, 13 },
  { 3281, 4, 396, 2, 17010, 13 },
  { 3554, 4, 396, 2, 17011, 13 },
  { 3813, 4, 396, 2, 17012, 13 },
  { 4072, 4, 396, 2, 17013, 13 },
  { 4331, 4, 396, 2, 17014, 13 },
  { 4590, 4, 396, 2, 17015, 13 },
  { 4842, 4, 396, 2, 17016, 13 },
  { 5094, 4, 396, 2, 17017, 13 },
  { 2762, 4, 396, 2, 17018, 13 },
  { 3037, 4, 396, 2, 17019, 13 },
  { 3306, 4, 396, 2, 17020, 13 },
  { 3579, 4, 396, 2, 17021, 13 },
  { 3838, 4, 396, 2, 17022, 13 },
  { 4097, 4, 396, 2, 17023, 13 },
  { 4356, 4, 396, 2, 17024, 13 },
  { 4615, 4, 396, 2, 17025, 13 },
  { 4867, 4, 396, 2, 17026, 13 },
  { 5119, 4, 396, 2, 17027, 13 },
  { 2787, 4, 396, 2, 17028, 13 },
  { 3062, 4, 396, 2, 17029, 13 },
  { 3331, 4, 396, 2, 17030, 13 },
  { 3604, 4, 396, 2, 17031, 13 },
  { 3863, 4, 396, 2, 17032, 13 },
  { 4122, 4, 396, 2, 17033, 13 },
  { 4381, 4, 396, 2, 17034, 13 },
  { 4640, 4, 396, 2, 17035, 13 },
  { 4892, 4, 396, 2, 17036, 13 },
  { 5144, 4, 396, 2, 17037, 13 },
  { 2812, 4, 396, 2, 17038, 13 },
  { 3087, 4, 396, 2, 17039, 13 },
  { 3356, 4, 396, 2, 17040, 13 },
  { 3629, 4, 396, 2, 17041, 13 },
  { 3888, 4, 396, 2, 17042, 13 },
  { 4147, 4, 396, 2, 17043, 13 },
  { 4406, 4, 396, 2, 17044, 13 },
  { 4665, 4, 396, 2, 17045, 13 },
  { 4917, 4, 396, 2, 17046, 13 },
  { 5169, 4, 396, 2, 17047, 13 },
  { 2837, 4, 396, 2, 17048, 13 },
  { 3112, 4, 396, 2, 17049, 13 },
  { 3371, 4, 396, 2, 17050, 13 },
  { 3644, 4, 396, 2, 17051, 13 },
  { 3903, 4, 396, 2, 17052, 13 },
  { 4162, 4, 396, 2, 17053, 13 },
  { 4421, 4, 396, 2, 17054, 13 },
  { 4680, 4, 396, 2, 17055, 13 },
  { 4932, 4, 396, 2, 17056, 13 },
  { 5184, 4, 396, 2, 17057, 13 },
  { 2596, 4, 396, 2, 17058, 13 },
  { 2865, 4, 396, 2, 17059, 13 },
  { 3140, 4, 396, 2, 17060, 13 },
  { 3399, 4, 396, 2, 17061, 13 },
  { 3672, 4, 396, 2, 17062, 13 },
  { 3931, 4, 396, 2, 17063, 13 },
  { 4190, 4, 396, 2, 17064, 13 },
  { 4449, 4, 396, 2, 17065, 13 },
  { 4708, 4, 396, 2, 17066, 13 },
  { 4960, 4, 396, 2, 17067, 13 },
  { 2613, 4, 396, 2, 17068, 13 },
  { 2888, 4, 396, 2, 17069, 13 },
  { 3157, 4, 396, 2, 17070, 13 },
  { 3416, 4, 396, 2, 17071, 13 },
  { 3689, 4, 396, 2, 17072, 13 },
  { 3948, 4, 396, 2, 17073, 13 },
  { 4207, 4, 396, 2, 17074, 13 },
  { 4466, 4, 396, 2, 17075, 13 },
  { 4725, 4, 396, 2, 17076, 13 },
  { 4977, 4, 396, 2, 17077, 13 },
  { 2645, 4, 396, 2, 17078, 13 },
  { 2920, 4, 396, 2, 17079, 13 },
  { 3189, 4, 396, 2, 17080, 13 },
  { 3456, 4, 396, 2, 17081, 13 },
  { 3721, 4, 396, 2, 17082, 13 },
  { 3980, 4, 396, 2, 17083, 13 },
  { 4239, 4, 396, 2, 17084, 13 },
  { 4498, 4, 396, 2, 17085, 13 },
  { 5487, 4, 363, 2, 17086, 13 },
  { 5762, 4, 358, 2, 17087, 13 },
  { 6021, 4, 327, 2, 17088, 13 },
  { 6294, 4, 322, 2, 17089, 13 },
  { 6553, 4, 392, 2, 17090, 13 },
  { 6812, 4, 392, 2, 17091, 13 },
  { 7071, 4, 392, 2, 17092, 13 },
  { 7330, 4, 392, 2, 17093, 13 },
  { 7582, 4, 392, 2, 17094, 13 },
  { 7834, 4, 392, 2, 17095, 13 },
  { 5265, 4, 392, 2, 17096, 13 },
  { 5540, 4, 392, 2, 17097, 13 },
  { 5809, 4, 392, 2, 17098, 13 },
  { 6068, 4, 392, 2, 17099, 13 },
  { 6341, 4, 392, 2, 17100, 13 },
  { 6600, 4, 392, 2, 17101, 13 },
  { 6859, 4, 392, 2, 17102, 13 },
  { 7118, 4, 392, 2, 17103, 13 },
  { 7377, 4, 392, 2, 17104, 13 },
  { 7629, 4, 392, 2, 17105, 13 },
  { 5297, 4, 392, 2, 17106, 13 },
  { 5572, 4, 392, 2, 17107, 13 },
  { 5841, 4, 392, 2, 17108, 13 },
  { 6108, 4, 392, 2, 17109, 13 },
  { 6373, 4, 392, 2, 17110, 13 },
  { 6632, 4, 392, 2, 17111, 13 },
  { 6891, 4, 392, 2, 17112, 13 },
  { 7150, 4, 392, 2, 17113, 13 },
  { 7402, 4, 392, 2, 17114, 13 },
  { 7654, 4, 392, 2, 17115, 13 },
  { 5322, 4, 392, 2, 17116, 13 },
  { 5597, 4, 392, 2, 17117, 13 },
  { 5866, 4, 392, 2, 17118, 13 },
  { 6139, 4, 392, 2, 17119, 13 },
  { 6398, 4, 392, 2, 17120, 13 },
  { 6657, 4, 392, 2, 17121, 13 },
  { 6916, 4, 392, 2, 17122, 13 },
  { 7175, 4, 392, 2, 17123, 13 },
  { 7427, 4, 392, 2, 17124, 13 },
  { 7679, 4, 392, 2, 17125, 13 },
  { 5347, 4, 392, 2, 17126, 13 },
  { 5622, 4, 392, 2, 17127, 13 },
  { 5891, 4, 392, 2, 17128, 13 },
  { 6164, 4, 392, 2, 17129, 13 },
  { 6423, 4, 392, 2, 17130, 13 },
  { 6682, 4, 392, 2, 17131, 13 },
  { 6941, 4, 392, 2, 17132, 13 },
  { 7200, 4, 392, 2, 17133, 13 },
  { 7452, 4, 392, 2, 17134, 13 },
  { 7704, 4, 392, 2, 17135, 13 },
  { 5372, 4, 392, 2, 17136, 13 },
  { 5647, 4, 392, 2, 17137, 13 },
  { 5916, 4, 392, 2, 17138, 13 },
  { 6189, 4, 392, 2, 17139, 13 },
  { 6448, 4, 392, 2, 17140, 13 },
  { 6707, 4, 392, 2, 17141, 13 },
  { 6966, 4, 392, 2, 17142, 13 },
  { 7225, 4, 392, 2, 17143, 13 },
  { 7477, 4, 392, 2, 17144, 13 },
  { 7729, 4, 392, 2, 17145, 13 },
  { 5397, 4, 392, 2, 17146, 13 },
  { 5672, 4, 392, 2, 17147, 13 },
  { 5941, 4, 392, 2, 17148, 13 },
  { 6214, 4, 392, 2, 17149, 13 },
  { 6473, 4, 392, 2, 17150, 13 },
  { 6732, 4, 392, 2, 17151, 13 },
  { 6991, 4, 392, 2, 17152, 13 },
  { 7250, 4, 392, 2, 17153, 13 },
  { 7502, 4, 392, 2, 17154, 13 },
  { 7754, 4, 392, 2, 17155, 13 },
  { 5422, 4, 392, 2, 17156, 13 },
  { 5697, 4, 392, 2, 17157, 13 },
  { 5966, 4, 392, 2, 17158, 13 },
  { 6239, 4, 392, 2, 17159, 13 },
  { 6498, 4, 392, 2, 17160, 13 },
  { 6757, 4, 392, 2, 17161, 13 },
  { 7016, 4, 392, 2, 17162, 13 },
  { 7275, 4, 392, 2, 17163, 13 },
  { 7527, 4, 392, 2, 17164, 13 },
  { 7779, 4, 392, 2, 17165, 13 },
  { 5447, 4, 392, 2, 17166, 13 },
  { 5722, 4, 392, 2, 17167, 13 },
  { 5991, 4, 392, 2, 17168, 13 },
  { 6264, 4, 392, 2, 17169, 13 },
  { 6523, 4, 392, 2, 17170, 13 },
  { 6782, 4, 392, 2, 17171, 13 },
  { 7041, 4, 392, 2, 17172, 13 },
  { 7300, 4, 392, 2, 17173, 13 },
  { 7552, 4, 392, 2, 17174, 13 },
  { 7804, 4, 392, 2, 17175, 13 },
  { 5472, 4, 392, 2, 17176, 13 },
  { 5747, 4, 392, 2, 17177, 13 },
  { 6006, 4, 392, 2, 17178, 13 },
  { 6279, 4, 392, 2, 17179, 13 },
  { 6538, 4, 392, 2, 17180, 13 },
  { 6797, 4, 392, 2, 17181, 13 },
  { 7056, 4, 392, 2, 17182, 13 },
  { 7315, 4, 392, 2, 17183, 13 },
  { 7567, 4, 392, 2, 17184, 13 },
  { 7819, 4, 392, 2, 17185, 13 },
  { 5231, 4, 392, 2, 17186, 13 },
  { 5500, 4, 392, 2, 17187, 13 },
  { 5775, 4, 392, 2, 17188, 13 },
  { 6034, 4, 392, 2, 17189, 13 },
  { 6307, 4, 392, 2, 17190, 13 },
  { 6566, 4, 392, 2, 17191, 13 },
  { 6825, 4, 392, 2, 17192, 13 },
  { 7084, 4, 392, 2, 17193, 13 },
  { 7343, 4, 392, 2, 17194, 13 },
  { 7595, 4, 392, 2, 17195, 13 },
  { 5248, 4, 392, 2, 17196, 13 },
  { 5523, 4, 392, 2, 17197, 13 },
  { 5792, 4, 392, 2, 17198, 13 },
  { 6051, 4, 392, 2, 17199, 13 },
  { 6324, 4, 392, 2, 17200, 13 },
  { 6583, 4, 392, 2, 17201, 13 },
  { 6842, 4, 392, 2, 17202, 13 },
  { 7101, 4, 392, 2, 17203, 13 },
  { 7360, 4, 392, 2, 17204, 13 },
  { 7612, 4, 392, 2, 17205, 13 },
  { 5280, 4, 392, 2, 17206, 13 },
  { 5555, 4, 392, 2, 17207, 13 },
  { 5824, 4, 392, 2, 17208, 13 },
  { 6091, 4, 392, 2, 17209, 13 },
  { 6356, 4, 392, 2, 17210, 13 },
  { 6615, 4, 392, 2, 17211, 13 },
  { 6874, 4, 392, 2, 17212, 13 },
  { 7133, 4, 392, 2, 17213, 13 },
  { 7958, 395, 4, 0, 1594046, 0 },
  { 8051, 395, 4, 0, 1594047, 0 },
  { 8144, 395, 4, 0, 1594048, 0 },
  { 8237, 395, 4, 0, 1594049, 0 },
  { 8330, 395, 4, 0, 1594050, 0 },
  { 8423, 395, 4, 0, 1594051, 0 },
  { 8516, 395, 4, 0, 1594052, 0 },
  { 8609, 395, 4, 0, 1594053, 0 },
  { 8694, 395, 4, 0, 1594054, 0 },
  { 8779, 395, 4, 0, 1594055, 0 },
  { 7887, 395, 4, 0, 1594056, 0 },
  { 7980, 395, 4, 0, 1594057, 0 },
  { 8073, 395, 4, 0, 1594058, 0 },
  { 8166, 395, 4, 0, 1594059, 0 },
  { 8259, 395, 4, 0, 1594060, 0 },
  { 8352, 395, 4, 0, 1594061, 0 },
  { 8445, 395, 4, 0, 1594062, 0 },
  { 8538, 395, 4, 0, 1594063, 0 },
  { 8631, 395, 4, 0, 1594064, 0 },
  { 8716, 395, 4, 0, 1594065, 0 },
  { 7902, 395, 4, 0, 1594066, 0 },
  { 7995, 395, 4, 0, 1594067, 0 },
  { 8088, 395, 4, 0, 1594068, 0 },
  { 8181, 395, 4, 0, 1594069, 0 },
  { 8274, 395, 4, 0, 1594070, 0 },
  { 8367, 395, 4, 0, 1594071, 0 },
  { 8460, 395, 4, 0, 1594072, 0 },
  { 8553, 395, 4, 0, 1594073, 0 },
  { 8638, 395, 4, 0, 1594074, 0 },
  { 8723, 395, 4, 0, 1594075, 0 },
  { 7909, 395, 4, 0, 1594076, 0 },
  { 8002, 395, 4, 0, 1594077, 0 },
  { 8095, 395, 4, 0, 1594078, 0 },
  { 8188, 395, 4, 0, 1594079, 0 },
  { 8281, 395, 4, 0, 1594080, 0 },
  { 8374, 395, 4, 0, 1594081, 0 },
  { 8467, 395, 4, 0, 1594082, 0 },
  { 8560, 395, 4, 0, 1594083, 0 },
  { 8645, 395, 4, 0, 1594084, 0 },
  { 8730, 395, 4, 0, 1594085, 0 },
  { 7916, 395, 4, 0, 1594086, 0 },
  { 8009, 395, 4, 0, 1594087, 0 },
  { 8102, 395, 4, 0, 1594088, 0 },
  { 8195, 395, 4, 0, 1594089, 0 },
  { 8288, 395, 4, 0, 1594090, 0 },
  { 8381, 395, 4, 0, 1594091, 0 },
  { 8474, 395, 4, 0, 1594092, 0 },
  { 8567, 395, 4, 0, 1594093, 0 },
  { 8652, 395, 4, 0, 1594094, 0 },
  { 8737, 395, 4, 0, 1594095, 0 },
  { 7923, 395, 4, 0, 1594096, 0 },
  { 8016, 395, 4, 0, 1594097, 0 },
  { 8109, 395, 4, 0, 1594098, 0 },
  { 8202, 395, 4, 0, 1594099, 0 },
  { 8295, 395, 4, 0, 1594100, 0 },
  { 8388, 395, 4, 0, 1594101, 0 },
  { 8481, 395, 4, 0, 1594102, 0 },
  { 8574, 395, 4, 0, 1594103, 0 },
  { 8659, 395, 4, 0, 1594104, 0 },
  { 8744, 395, 4, 0, 1594105, 0 },
  { 7930, 395, 4, 0, 1594106, 0 },
  { 8023, 395, 4, 0, 1594107, 0 },
  { 8116, 395, 4, 0, 1594108, 0 },
  { 8209, 395, 4, 0, 1594109, 0 },
  { 8302, 395, 4, 0, 1594110, 0 },
  { 8395, 395, 4, 0, 1594111, 0 },
  { 8488, 395, 4, 0, 1594112, 0 },
  { 8581, 395, 4, 0, 1594113, 0 },
  { 8666, 395, 4, 0, 1594114, 0 },
  { 8751, 395, 4, 0, 1594115, 0 },
  { 7937, 395, 4, 0, 1594116, 0 },
  { 8030, 395, 4, 0, 1594117, 0 },
  { 8123, 395, 4, 0, 1594118, 0 },
  { 8216, 395, 4, 0, 1594119, 0 },
  { 8309, 395, 4, 0, 1594120, 0 },
  { 8402, 395, 4, 0, 1594121, 0 },
  { 8495, 395, 4, 0, 1594122, 0 },
  { 8588, 395, 4, 0, 1594123, 0 },
  { 8673, 395, 4, 0, 1594124, 0 },
  { 8758, 395, 4, 0, 1594125, 0 },
  { 7944, 395, 4, 0, 1594126, 0 },
  { 8037, 395, 4, 0, 1594127, 0 },
  { 8130, 395, 4, 0, 1594128, 0 },
  { 8223, 395, 4, 0, 1594129, 0 },
  { 8316, 395, 4, 0, 1594130, 0 },
  { 8409, 395, 4, 0, 1594131, 0 },
  { 8502, 395, 4, 0, 1594132, 0 },
  { 8595, 395, 4, 0, 1594133, 0 },
  { 8680, 395, 4, 0, 1594134, 0 },
  { 8765, 395, 4, 0, 1594135, 0 },
  { 7951, 395, 4, 0, 1594136, 0 },
  { 8044, 395, 4, 0, 1594137, 0 },
  { 8137, 395, 4, 0, 1594138, 0 },
  { 8230, 395, 4, 0, 1594139, 0 },
  { 8323, 395, 4, 0, 1594140, 0 },
  { 8416, 395, 4, 0, 1594141, 0 },
  { 8509, 395, 4, 0, 1594142, 0 },
  { 8602, 395, 4, 0, 1594143, 0 },
  { 8687, 395, 4, 0, 1594144, 0 },
  { 8772, 395, 4, 0, 1594145, 0 },
  { 7871, 395, 4, 0, 1594146, 0 },
  { 7964, 395, 4, 0, 1594147, 0 },
  { 8057, 395, 4, 0, 1594148, 0 },
  { 8150, 395, 4, 0, 1594149, 0 },
  { 8243, 395, 4, 0, 1594150, 0 },
  { 8336, 395, 4, 0, 1594151, 0 },
  { 8429, 395, 4, 0, 1594152, 0 },
  { 8522, 395, 4, 0, 1594153, 0 },
  { 8615, 395, 4, 0, 1594154, 0 },
  { 8700, 395, 4, 0, 1594155, 0 },
  { 7879, 395, 4, 0, 1594156, 0 },
  { 7972, 395, 4, 0, 1594157, 0 },
  { 8065, 395, 4, 0, 1594158, 0 },
  { 8158, 395, 4, 0, 1594159, 0 },
  { 8251, 395, 4, 0, 1594160, 0 },
  { 8344, 395, 4, 0, 1594161, 0 },
  { 8437, 395, 4, 0, 1594162, 0 },
  { 8530, 395, 4, 0, 1594163, 0 },
  { 8623, 395, 4, 0, 1594164, 0 },
  { 8708, 395, 4, 0, 1594165, 0 },
  { 7894, 395, 4, 0, 1594166, 0 },
  { 7987, 395, 4, 0, 1594167, 0 },
  { 8080, 395, 4, 0, 1594168, 0 },
  { 8173, 395, 4, 0, 1594169, 0 },
  { 8266, 395, 4, 0, 1594170, 0 },
  { 8359, 395, 4, 0, 1594171, 0 },
  { 8452, 395, 4, 0, 1594172, 0 },
  { 8545, 395, 4, 0, 1594173, 0 },
  { 796, 0, 4, 3, 1602110, 3 },
  { 1006, 0, 4, 3, 1602111, 3 },
  { 1203, 0, 4, 3, 1602112, 3 },
  { 1400, 0, 4, 3, 1602113, 3 },
  { 1597, 0, 4, 3, 1602114, 3 },
  { 1794, 0, 4, 3, 1602115, 3 },
  { 1991, 0, 4, 3, 1602116, 3 },
  { 2188, 0, 4, 3, 1602117, 3 },
  { 2388, 0, 4, 3, 1602118, 3 },
  { 2588, 0, 4, 3, 1602119, 3 },
  { 614, 0, 4, 3, 1602120, 3 },
  { 824, 0, 4, 3, 1602121, 3 },
  { 1034, 0, 4, 3, 1602122, 3 },
  { 1231, 0, 4, 3, 1602123, 3 },
  { 1428, 0, 4, 3, 1602124, 3 },
  { 1625, 0, 4, 3, 1602125, 3 },
  { 1822, 0, 4, 3, 1602126, 3 },
  { 2019, 0, 4, 3, 1602127, 3 },
  { 2216, 0, 4, 3, 1602128, 3 },
  { 2416, 0, 4, 3, 1602129, 3 },
  { 633, 0, 4, 3, 1602130, 3 },
  { 843, 0, 4, 3, 1602131, 3 },
  { 1053, 0, 4, 3, 1602132, 3 },
  { 1250, 0, 4, 3, 1602133, 3 },
  { 1447, 0, 4, 3, 1602134, 3 },
  { 1644, 0, 4, 3, 1602135, 3 },
  { 1841, 0, 4, 3, 1602136, 3 },
  { 2038, 0, 4, 3, 1602137, 3 },
  { 2238, 0, 4, 3, 1602138, 3 },
  { 2438, 0, 4, 3, 1602139, 3 },
  { 655, 0, 4, 3, 1602140, 3 },
  { 865, 0, 4, 3, 1602141, 3 },
  { 1075, 0, 4, 3, 1602142, 3 },
  { 1272, 0, 4, 3, 1602143, 3 },
  { 1469, 0, 4, 3, 1602144, 3 },
  { 1666, 0, 4, 3, 1602145, 3 },
  { 1863, 0, 4, 3, 1602146, 3 },
  { 2060, 0, 4, 3, 1602147, 3 },
  { 2260, 0, 4, 3, 1602148, 3 },
  { 2460, 0, 4, 3, 1602149, 3 },
  { 677, 0, 4, 3, 1602150, 3 },
  { 887, 0, 4, 3, 1602151, 3 },
  { 1097, 0, 4, 3, 1602152, 3 },
  { 1294, 0, 4, 3, 1602153, 3 },
  { 1491, 0, 4, 3, 1602154, 3 },
  { 1688, 0, 4, 3, 1602155, 3 },
  { 1885, 0, 4, 3, 1602156, 3 },
  { 2082, 0, 4, 3, 1602157, 3 },
  { 2282, 0, 4, 3, 1602158, 3 },
  { 2482, 0, 4, 3, 1602159, 3 },
  { 699, 0, 4, 3, 1602160, 3 },
  { 909, 0, 4, 3, 1602161, 3 },
  { 1119, 0, 4, 3, 1602162, 3 },
  { 1316, 0, 4, 3, 1602163, 3 },
  { 1513, 0, 4, 3, 1602164, 3 },
  { 1710, 0, 4, 3, 1602165, 3 },
  { 1907, 0, 4, 3, 1602166, 3 },
  { 2104, 0, 4, 3, 1602167, 3 },
  { 2304, 0, 4, 3, 1602168, 3 },
  { 2504, 0, 4, 3, 1602169, 3 },
  { 721, 0, 4, 3, 1602170, 3 },
  { 931, 0, 4, 3, 1602171, 3 },
  { 1141, 0, 4, 3, 1602172, 3 },
  { 1338, 0, 4, 3, 1602173, 3 },
  { 1535, 0, 4, 3, 1602174, 3 },
  { 1732, 0, 4, 3, 1602175, 3 },
  { 1929, 0, 4, 3, 1602176, 3 },
  { 2126, 0, 4, 3, 1602177, 3 },
  { 2326, 0, 4, 3, 1602178, 3 },
  { 2526, 0, 4, 3, 1602179, 3 },
  { 743, 0, 4, 3, 1602180, 3 },
  { 953, 0, 4, 3, 1602181, 3 },
  { 1163, 0, 4, 3, 1602182, 3 },
  { 1360, 0, 4, 3, 1602183, 3 },
  { 1557, 0, 4, 3, 1602184, 3 },
  { 1754, 0, 4, 3, 1602185, 3 },
  { 1951, 0, 4, 3, 1602186, 3 },
  { 2148, 0, 4, 3, 1602187, 3 },
  { 2348, 0, 4, 3, 1602188, 3 },
  { 2548, 0, 4, 3, 1602189, 3 },
  { 765, 0, 4, 3, 1602190, 3 },
  { 975, 0, 4, 3, 1602191, 3 },
  { 1185, 0, 4, 3, 1602192, 3 },
  { 1382, 0, 4, 3, 1602193, 3 },
  { 1579, 0, 4, 3, 1602194, 3 },
  { 1776, 0, 4, 3, 1602195, 3 },
  { 1973, 0, 4, 3, 1602196, 3 },
  { 2170, 0, 4, 3, 1602197, 3 },
  { 2370, 0, 4, 3, 1602198, 3 },
  { 2570, 0, 4, 3, 1602199, 3 },
  { 787, 0, 4, 3, 1602200, 3 },
  { 997, 0, 4, 3, 1602201, 3 },
  { 1194, 0, 4, 3, 1602202, 3 },
  { 1391, 0, 4, 3, 1602203, 3 },
  { 1588, 0, 4, 3, 1602204, 3 },
  { 1785, 0, 4, 3, 1602205, 3 },
  { 1982, 0, 4, 3, 1602206, 3 },
  { 2179, 0, 4, 3, 1602207, 3 },
  { 2379, 0, 4, 3, 1602208, 3 },
  { 2579, 0, 4, 3, 1602209, 3 },
  { 594, 0, 4, 3, 1602210, 3 },
  { 804, 0, 4, 3, 1602211, 3 },
  { 1014, 0, 4, 3, 1602212, 3 },
  { 1211, 0, 4, 3, 1602213, 3 },
  { 1408, 0, 4, 3, 1602214, 3 },
  { 1605, 0, 4, 3, 1602215, 3 },
  { 1802, 0, 4, 3, 1602216, 3 },
  { 1999, 0, 4, 3, 1602217, 3 },
  { 2196, 0, 4, 3, 1602218, 3 },
  { 2396, 0, 4, 3, 1602219, 3 },
  { 604, 0, 4, 3, 1602220, 3 },
  { 814, 0, 4, 3, 1602221, 3 },
  { 1024, 0, 4, 3, 1602222, 3 },
  { 1221, 0, 4, 3, 1602223, 3 },
  { 1418, 0, 4, 3, 1602224, 3 },
  { 1615, 0, 4, 3, 1602225, 3 },
  { 1812, 0, 4, 3, 1602226, 3 },
  { 2009, 0, 4, 3, 1602227, 3 },
  { 2206, 0, 4, 3, 1602228, 3 },
  { 2406, 0, 4, 3, 1602229, 3 },
  { 623, 0, 4, 3, 1602230, 3 },
  { 833, 0, 4, 3, 1602231, 3 },
  { 1043, 0, 4, 3, 1602232, 3 },
  { 1240, 0, 4, 3, 1602233, 3 },
  { 1437, 0, 4, 3, 1602234, 3 },
  { 1634, 0, 4, 3, 1602235, 3 },
  { 1831, 0, 4, 3, 1602236, 3 },
  { 2028, 0, 4, 3, 1602237, 3 },
  { 9041, 4, 373, 2, 17214, 13 },
  { 9316, 4, 368, 2, 17215, 13 },
  { 9575, 4, 337, 2, 17216, 13 },
  { 9848, 4, 332, 2, 17217, 13 },
  { 10107, 4, 388, 2, 17218, 13 },
  { 10366, 4, 388, 2, 17219, 13 },
  { 10625, 4, 388, 2, 17220, 13 },
  { 10884, 4, 388, 2, 17221, 13 },
  { 11136, 4, 388, 2, 17222, 13 },
  { 11388, 4, 388, 2, 17223, 13 },
  { 8819, 4, 388, 2, 17224, 13 },
  { 9094, 4, 388, 2, 17225, 13 },
  { 9363, 4, 388, 2, 17226, 13 },
  { 9622, 4, 388, 2, 17227, 13 },
  { 9895, 4, 388, 2, 17228, 13 },
  { 10154, 4, 388, 2, 17229, 13 },
  { 10413, 4, 388, 2, 17230, 13 },
  { 10672, 4, 388, 2, 17231, 13 },
  { 10931, 4, 388, 2, 17232, 13 },
  { 11183, 4, 388, 2, 17233, 13 },
  { 8851, 4, 388, 2, 17234, 13 },
  { 9126, 4, 388, 2, 17235, 13 },
  { 9395, 4, 388, 2, 17236, 13 },
  { 9662, 4, 388, 2, 17237, 13 },
  { 9927, 4, 388, 2, 17238, 13 },
  { 10186, 4, 388, 2, 17239, 13 },
  { 10445, 4, 388, 2, 17240, 13 },
  { 10704, 4, 388, 2, 17241, 13 },
  { 10956, 4, 388, 2, 17242, 13 },
  { 11208, 4, 388, 2, 17243, 13 },
  { 8876, 4, 388, 2, 17244, 13 },
  { 9151, 4, 388, 2, 17245, 13 },
  { 9420, 4, 388, 2, 17246, 13 },
  { 9693, 4, 388, 2, 17247, 13 },
  { 9952, 4, 388, 2, 17248, 13 },
  { 10211, 4, 388, 2, 17249, 13 },
  { 10470, 4, 388, 2, 17250, 13 },
  { 10729, 4, 388, 2, 17251, 13 },
  { 10981, 4, 388, 2, 17252, 13 },
  { 11233, 4, 388, 2, 17253, 13 },
  { 8901, 4, 388, 2, 17254, 13 },
  { 9176, 4, 388, 2, 17255, 13 },
  { 9445, 4, 388, 2, 17256, 13 },
  { 9718, 4, 388, 2, 17257, 13 },
  { 9977, 4, 388, 2, 17258, 13 },
  { 10236, 4, 388, 2, 17259, 13 },
  { 10495, 4, 388, 2, 17260, 13 },
  { 10754, 4, 388, 2, 17261, 13 },
  { 11006, 4, 388, 2, 17262, 13 },
  { 11258, 4, 388, 2, 17263, 13 },
  { 8926, 4, 388, 2, 17264, 13 },
  { 9201, 4, 388, 2, 17265, 13 },
  { 9470, 4, 388, 2, 17266, 13 },
  { 9743, 4, 388, 2, 17267, 13 },
  { 10002, 4, 388, 2, 17268, 13 },
  { 10261, 4, 388, 2, 17269, 13 },
  { 10520, 4, 388, 2, 17270, 13 },
  { 10779, 4, 388, 2, 17271, 13 },
  { 11031, 4, 388, 2, 17272, 13 },
  { 11283, 4, 388, 2, 17273, 13 },
  { 8951, 4, 388, 2, 17274, 13 },
  { 9226, 4, 388, 2, 17275, 13 },
  { 9495, 4, 388, 2, 17276, 13 },
  { 9768, 4, 388, 2, 17277, 13 },
  { 10027, 4, 388, 2, 17278, 13 },
  { 10286, 4, 388, 2, 17279, 13 },
  { 10545, 4, 388, 2, 17280, 13 },
  { 10804, 4, 388, 2, 17281, 13 },
  { 11056, 4, 388, 2, 17282, 13 },
  { 11308, 4, 388, 2, 17283, 13 },
  { 8976, 4, 388, 2, 17284, 13 },
  { 9251, 4, 388, 2, 17285, 13 },
  { 9520, 4, 388, 2, 17286, 13 },
  { 9793, 4, 388, 2, 17287, 13 },
  { 10052, 4, 388, 2, 17288, 13 },
  { 10311, 4, 388, 2, 17289, 13 },
  { 10570, 4, 388, 2, 17290, 13 },
  { 10829, 4, 388, 2, 17291, 13 },
  { 11081, 4, 388, 2, 17292, 13 },
  { 11333, 4, 388, 2, 17293, 13 },
  { 9001, 4, 388, 2, 17294, 13 },
  { 9276, 4, 388, 2, 17295, 13 },
  { 9545, 4, 388, 2, 17296, 13 },
  { 9818, 4, 388, 2, 17297, 13 },
  { 10077, 4, 388, 2, 17298, 13 },
  { 10336, 4, 388, 2, 17299, 13 },
  { 10595, 4, 388, 2, 17300, 13 },
  { 10854, 4, 388, 2, 17301, 13 },
  { 11106, 4, 388, 2, 17302, 13 },
  { 11358, 4, 388, 2, 17303, 13 },
  { 9026, 4, 388, 2, 17304, 13 },
  { 9301, 4, 388, 2, 17305, 13 },
  { 9560, 4, 388, 2, 17306, 13 },
  { 9833, 4, 388, 2, 17307, 13 },
  { 10092, 4, 388, 2, 17308, 13 },
  { 10351, 4, 388, 2, 17309, 13 },
  { 10610, 4, 388, 2, 17310, 13 },
  { 10869, 4, 388, 2, 17311, 13 },
  { 11121, 4, 388, 2, 17312, 13 },
  { 11373, 4, 388, 2, 17313, 13 },
  { 8785, 4, 388, 2, 17314, 13 },
  { 9054, 4, 388, 2, 17315, 13 },
  { 9329, 4, 388, 2, 17316, 13 },
  { 9588, 4, 388, 2, 17317, 13 },
  { 9861, 4, 388, 2, 17318, 13 },
  { 10120, 4, 388, 2, 17319, 13 },
  { 10379, 4, 388, 2, 17320, 13 },
  { 10638, 4, 388, 2, 17321, 13 },
  { 10897, 4, 388, 2, 17322, 13 },
  { 11149, 4, 388, 2, 17323, 13 },
  { 8802, 4, 388, 2, 17324, 13 },
  { 9077, 4, 388, 2, 17325, 13 },
  { 9346, 4, 388, 2, 17326, 13 },
  { 9605, 4, 388, 2, 17327, 13 },
  { 9878, 4, 388, 2, 17328, 13 },
  { 10137, 4, 388, 2, 17329, 13 },
  { 10396, 4, 388, 2, 17330, 13 },
  { 10655, 4, 388, 2, 17331, 13 },
  { 10914, 4, 388, 2, 17332, 13 },
  { 11166, 4, 388, 2, 17333, 13 },
  { 8834, 4, 388, 2, 17334, 13 },
  { 9109, 4, 388, 2, 17335, 13 },
  { 9378, 4, 388, 2, 17336, 13 },
  { 9645, 4, 388, 2, 17337, 13 },
  { 9910, 4, 388, 2, 17338, 13 },
  { 10169, 4, 388, 2, 17339, 13 },
  { 10428, 4, 388, 2, 17340, 13 },
  { 10687, 4, 388, 2, 17341, 13 },
  { 11676, 4, 382, 2, 17342, 13 },
  { 11951, 4, 378, 2, 17343, 13 },
  { 12210, 4, 346, 2, 17344, 13 },
  { 12483, 4, 342, 2, 17345, 13 },
  { 12742, 4, 8, 2, 17346, 13 },
  { 13001, 4, 8, 2, 17347, 13 },
  { 13260, 4, 8, 2, 17348, 13 },
  { 13519, 4, 8, 2, 17349, 13 },
  { 13771, 4, 8, 2, 17350, 13 },
  { 14023, 4, 8, 2, 17351, 13 },
  { 11454, 4, 8, 2, 17352, 13 },
  { 11729, 4, 8, 2, 17353, 13 },
  { 11998, 4, 8, 2, 17354, 13 },
  { 12257, 4, 8, 2, 17355, 13 },
  { 12530, 4, 8, 2, 17356, 13 },
  { 12789, 4, 8, 2, 17357, 13 },
  { 13048, 4, 8, 2, 17358, 13 },
  { 13307, 4, 8, 2, 17359, 13 },
  { 13566, 4, 8, 2, 17360, 13 },
  { 13818, 4, 8, 2, 17361, 13 },
  { 11486, 4, 8, 2, 17362, 13 },
  { 11761, 4, 8, 2, 17363, 13 },
  { 12030, 4, 8, 2, 17364, 13 },
  { 12297, 4, 8, 2, 17365, 13 },
  { 12562, 4, 8, 2, 17366, 13 },
  { 12821, 4, 8, 2, 17367, 13 },
  { 13080, 4, 8, 2, 17368, 13 },
  { 13339, 4, 8, 2, 17369, 13 },
  { 13591, 4, 8, 2, 17370, 13 },
  { 13843, 4, 8, 2, 17371, 13 },
  { 11511, 4, 8, 2, 17372, 13 },
  { 11786, 4, 8, 2, 17373, 13 },
  { 12055, 4, 8, 2, 17374, 13 },
  { 12328, 4, 8, 2, 17375, 13 },
  { 12587, 4, 8, 2, 17376, 13 },
  { 12846, 4, 8, 2, 17377, 13 },
  { 13105, 4, 8, 2, 17378, 13 },
  { 13364, 4, 8, 2, 17379, 13 },
  { 13616, 4, 8, 2, 17380, 13 },
  { 13868, 4, 8, 2, 17381, 13 },
  { 11536, 4, 8, 2, 17382, 13 },
  { 11811, 4, 8, 2, 17383, 13 },
  { 12080, 4, 8, 2, 17384, 13 },
  { 12353, 4, 8, 2, 17385, 13 },
  { 12612, 4, 8, 2, 17386, 13 },
  { 12871, 4, 8, 2, 17387, 13 },
  { 13130, 4, 8, 2, 17388, 13 },
  { 13389, 4, 8, 2, 17389, 13 },
  { 13641, 4, 8, 2, 17390, 13 },
  { 13893, 4, 8, 2, 17391, 13 },
  { 11561, 4, 8, 2, 17392, 13 },
  { 11836, 4, 8, 2, 17393, 13 },
  { 12105, 4, 8, 2, 17394, 13 },
  { 12378, 4, 8, 2, 17395, 13 },
  { 12637, 4, 8, 2, 17396, 13 },
  { 12896, 4, 8, 2, 17397, 13 },
  { 13155, 4, 8, 2, 17398, 13 },
  { 13414, 4, 8, 2, 17399, 13 },
  { 13666, 4, 8, 2, 17400, 13 },
  { 13918, 4, 8, 2, 17401, 13 },
  { 11586, 4, 8, 2, 17402, 13 },
  { 11861, 4, 8, 2, 17403, 13 },
  { 12130, 4, 8, 2, 17404, 13 },
  { 12403, 4, 8, 2, 17405, 13 },
  { 12662, 4, 8, 2, 17406, 13 },
  { 12921, 4, 8, 2, 17407, 13 },
  { 13180, 4, 8, 2, 17408, 13 },
  { 13439, 4, 8, 2, 17409, 13 },
  { 13691, 4, 8, 2, 17410, 13 },
  { 13943, 4, 8, 2, 17411, 13 },
  { 11611, 4, 8, 2, 17412, 13 },
  { 11886, 4, 8, 2, 17413, 13 },
  { 12155, 4, 8, 2, 17414, 13 },
  { 12428, 4, 8, 2, 17415, 13 },
  { 12687, 4, 8, 2, 17416, 13 },
  { 12946, 4, 8, 2, 17417, 13 },
  { 13205, 4, 8, 2, 17418, 13 },
  { 13464, 4, 8, 2, 17419, 13 },
  { 13716, 4, 8, 2, 17420, 13 },
  { 13968, 4, 8, 2, 17421, 13 },
  { 11636, 4, 8, 2, 17422, 13 },
  { 11911, 4, 8, 2, 17423, 13 },
  { 12180, 4, 8, 2, 17424, 13 },
  { 12453, 4, 8, 2, 17425, 13 },
  { 12712, 4, 8, 2, 17426, 13 },
  { 12971, 4, 8, 2, 17427, 13 },
  { 13230, 4, 8, 2, 17428, 13 },
  { 13489, 4, 8, 2, 17429, 13 },
  { 13741, 4, 8, 2, 17430, 13 },
  { 13993, 4, 8, 2, 17431, 13 },
  { 11661, 4, 8, 2, 17432, 13 },
  { 11936, 4, 8, 2, 17433, 13 },
  { 12195, 4, 8, 2, 17434, 13 },
  { 12468, 4, 8, 2, 17435, 13 },
  { 12727, 4, 8, 2, 17436, 13 },
  { 12986, 4, 8, 2, 17437, 13 },
  { 13245, 4, 8, 2, 17438, 13 },
  { 13504, 4, 8, 2, 17439, 13 },
  { 13756, 4, 8, 2, 17440, 13 },
  { 14008, 4, 8, 2, 17441, 13 },
  { 11420, 4, 8, 2, 17442, 13 },
  { 11689, 4, 8, 2, 17443, 13 },
  { 11964, 4, 8, 2, 17444, 13 },
  { 12223, 4, 8, 2, 17445, 13 },
  { 12496, 4, 8, 2, 17446, 13 },
  { 12755, 4, 8, 2, 17447, 13 },
  { 13014, 4, 8, 2, 17448, 13 },
  { 13273, 4, 8, 2, 17449, 13 },
  { 13532, 4, 8, 2, 17450, 13 },
  { 13784, 4, 8, 2, 17451, 13 },
  { 11437, 4, 8, 2, 17452, 13 },
  { 11712, 4, 8, 2, 17453, 13 },
  { 11981, 4, 8, 2, 17454, 13 },
  { 12240, 4, 8, 2, 17455, 13 },
  { 12513, 4, 8, 2, 17456, 13 },
  { 12772, 4, 8, 2, 17457, 13 },
  { 13031, 4, 8, 2, 17458, 13 },
  { 13290, 4, 8, 2, 17459, 13 },
  { 13549, 4, 8, 2, 17460, 13 },
  { 13801, 4, 8, 2, 17461, 13 },
  { 11469, 4, 8, 2, 17462, 13 },
  { 11744, 4, 8, 2, 17463, 13 },
  { 12013, 4, 8, 2, 17464, 13 },
  { 12280, 4, 8, 2, 17465, 13 },
  { 12545, 4, 8, 2, 17466, 13 },
  { 12804, 4, 8, 2, 17467, 13 },
  { 13063, 4, 8, 2, 17468, 13 },
  { 13322, 4, 8, 2, 17469, 13 },
  { 2882, 14, 4, 0, 62014, 0 },
  { 3479, 17, 4, 0, 62016, 0 },
  { 3448, 38, 4, 3, 160318, 8 },
  { 5517, 20, 4, 0, 62142, 0 },
  { 6114, 23, 4, 0, 62144, 0 },
  { 6083, 43, 4, 3, 160446, 8 },
  { 9071, 26, 4, 0, 62270, 0 },
  { 9668, 29, 4, 0, 62272, 0 },
  { 9637, 48, 4, 3, 160574, 8 },
  { 11706, 32, 4, 0, 62398, 0 },
  { 12303, 35, 4, 0, 62400, 0 },
  { 12272, 53, 4, 3, 160702, 8 },
  { 4757, 4, 389, 2, 17470, 13 },
  { 5009, 4, 389, 2, 17471, 13 },
  { 2677, 4, 389, 2, 17472, 13 },
  { 2952, 4, 389, 2, 17473, 13 },
  { 3221, 4, 389, 2, 17474, 13 },
  { 3494, 4, 389, 2, 17475, 13 },
  { 3753, 4, 389, 2, 17476, 13 },
  { 4012, 4, 389, 2, 17477, 13 },
  { 4271, 4, 389, 2, 17478, 13 },
  { 4530, 4, 389, 2, 17479, 13 },
  { 4782, 4, 389, 2, 17480, 13 },
  { 5034, 4, 389, 2, 17481, 13 },
  { 2702, 4, 389, 2, 17482, 13 },
  { 2977, 4, 389, 2, 17483, 13 },
  { 3246, 4, 389, 2, 17484, 13 },
  { 3519, 4, 389, 2, 17485, 13 },
  { 3778, 4, 389, 2, 17486, 13 },
  { 4037, 4, 389, 2, 17487, 13 },
  { 4296, 4, 389, 2, 17488, 13 },
  { 4555, 4, 389, 2, 17489, 13 },
  { 4807, 4, 389, 2, 17490, 13 },
  { 5059, 4, 389, 2, 17491, 13 },
  { 2727, 4, 389, 2, 17492, 13 },
  { 3002, 4, 389, 2, 17493, 13 },
  { 3271, 4, 389, 2, 17494, 13 },
  { 3544, 4, 389, 2, 17495, 13 },
  { 3803, 4, 389, 2, 17496, 13 },
  { 4062, 4, 389, 2, 17497, 13 },
  { 4321, 4, 389, 2, 17498, 13 },
  { 4580, 4, 389, 2, 17499, 13 },
  { 4832, 4, 389, 2, 17500, 13 },
  { 5084, 4, 389, 2, 17501, 13 },
  { 2752, 4, 389, 2, 17502, 13 },
  { 3027, 4, 389, 2, 17503, 13 },
  { 3296, 4, 389, 2, 17504, 13 },
  { 3569, 4, 389, 2, 17505, 13 },
  { 3828, 4, 389, 2, 17506, 13 },
  { 4087, 4, 389, 2, 17507, 13 },
  { 4346, 4, 389, 2, 17508, 13 },
  { 4605, 4, 389, 2, 17509, 13 },
  { 4857, 4, 389, 2, 17510, 13 },
  { 5109, 4, 389, 2, 17511, 13 },
  { 2777, 4, 389, 2, 17512, 13 },
  { 3052, 4, 389, 2, 17513, 13 },
  { 3321, 4, 389, 2, 17514, 13 },
  { 3594, 4, 389, 2, 17515, 13 },
  { 3853, 4, 389, 2, 17516, 13 },
  { 4112, 4, 389, 2, 17517, 13 },
  { 4371, 4, 389, 2, 17518, 13 },
  { 4630, 4, 389, 2, 17519, 13 },
  { 4882, 4, 389, 2, 17520, 13 },
  { 5134, 4, 389, 2, 17521, 13 },
  { 2802, 4, 389, 2, 17522, 13 },
  { 3077, 4, 389, 2, 17523, 13 },
  { 3346, 4, 389, 2, 17524, 13 },
  { 3619, 4, 389, 2, 17525, 13 },
  { 3878, 4, 389, 2, 17526, 13 },
  { 4137, 4, 389, 2, 17527, 13 },
  { 4396, 4, 389, 2, 17528, 13 },
  { 4655, 4, 389, 2, 17529, 13 },
  { 4907, 4, 389, 2, 17530, 13 },
  { 5159, 4, 389, 2, 17531, 13 },
  { 2827, 4, 389, 2, 17532, 13 },
  { 3102, 4, 389, 2, 17533, 13 },
  { 7392, 4, 386, 2, 17534, 13 },
  { 7644, 4, 386, 2, 17535, 13 },
  { 5312, 4, 386, 2, 17536, 13 },
  { 5587, 4, 386, 2, 17537, 13 },
  { 5856, 4, 386, 2, 17538, 13 },
  { 6129, 4, 386, 2, 17539, 13 },
  { 6388, 4, 386, 2, 17540, 13 },
  { 6647, 4, 386, 2, 17541, 13 },
  { 6906, 4, 386, 2, 17542, 13 },
  { 7165, 4, 386, 2, 17543, 13 },
  { 7417, 4, 386, 2, 17544, 13 },
  { 7669, 4, 386, 2, 17545, 13 },
  { 5337, 4, 386, 2, 17546, 13 },
  { 5612, 4, 386, 2, 17547, 13 },
  { 5881, 4, 386, 2, 17548, 13 },
  { 6154, 4, 386, 2, 17549, 13 },
  { 6413, 4, 386, 2, 17550, 13 },
  { 6672, 4, 386, 2, 17551, 13 },
  { 6931, 4, 386, 2, 17552, 13 },
  { 7190, 4, 386, 2, 17553, 13 },
  { 7442, 4, 386, 2, 17554, 13 },
  { 7694, 4, 386, 2, 17555, 13 },
  { 5362, 4, 386, 2, 17556, 13 },
  { 5637, 4, 386, 2, 17557, 13 },
  { 5906, 4, 386, 2, 17558, 13 },
  { 6179, 4, 386, 2, 17559, 13 },
  { 6438, 4, 386, 2, 17560, 13 },
  { 6697, 4, 386, 2, 17561, 13 },
  { 6956, 4, 386, 2, 17562, 13 },
  { 7215, 4, 386, 2, 17563, 13 },
  { 7467, 4, 386, 2, 17564, 13 },
  { 7719, 4, 386, 2, 17565, 13 },
  { 5387, 4, 386, 2, 17566, 13 },
  { 5662, 4, 386, 2, 17567, 13 },
  { 5931, 4, 386, 2, 17568, 13 },
  { 6204, 4, 386, 2, 17569, 13 },
  { 6463, 4, 386, 2, 17570, 13 },
  { 6722, 4, 386, 2, 17571, 13 },
  { 6981, 4, 386, 2, 17572, 13 },
  { 7240, 4, 386, 2, 17573, 13 },
  { 7492, 4, 386, 2, 17574, 13 },
  { 7744, 4, 386, 2, 17575, 13 },
  { 5412, 4, 386, 2, 17576, 13 },
  { 5687, 4, 386, 2, 17577, 13 },
  { 5956, 4, 386, 2, 17578, 13 },
  { 6229, 4, 386, 2, 17579, 13 },
  { 6488, 4, 386, 2, 17580, 13 },
  { 6747, 4, 386, 2, 17581, 13 },
  { 7006, 4, 386, 2, 17582, 13 },
  { 7265, 4, 386, 2, 17583, 13 },
  { 7517, 4, 386, 2, 17584, 13 },
  { 7769, 4, 386, 2, 17585, 13 },
  { 5437, 4, 386, 2, 17586, 13 },
  { 5712, 4, 386, 2, 17587, 13 },
  { 5981, 4, 386, 2, 17588, 13 },
  { 6254, 4, 386, 2, 17589, 13 },
  { 6513, 4, 386, 2, 17590, 13 },
  { 6772, 4, 386, 2, 17591, 13 },
  { 7031, 4, 386, 2, 17592, 13 },
  { 7290, 4, 386, 2, 17593, 13 },
  { 7542, 4, 386, 2, 17594, 13 },
  { 7794, 4, 386, 2, 17595, 13 },
  { 5462, 4, 386, 2, 17596, 13 },
  { 5737, 4, 386, 2, 17597, 13 },
  { 2225, 5, 4, 3, 238654, 3 },
  { 2425, 5, 4, 3, 255039, 3 },
  { 642, 5, 4, 3, 271424, 3 },
  { 852, 5, 4, 3, 287809, 3 },
  { 1062, 5, 4, 3, 304194, 3 },
  { 1259, 5, 4, 3, 320579, 3 },
  { 1456, 5, 4, 3, 336964, 3 },
  { 1653, 5, 4, 3, 353349, 3 },
  { 1850, 5, 4, 3, 369734, 3 },
  { 2047, 5, 4, 3, 386119, 3 },
  { 2247, 5, 4, 3, 402504, 3 },
  { 2447, 5, 4, 3, 418889, 3 },
  { 664, 5, 4, 3, 435274, 3 },
  { 874, 5, 4, 3, 451659, 3 },
  { 1084, 5, 4, 3, 468044, 3 },
  { 1281, 5, 4, 3, 484429, 3 },
  { 1478, 5, 4, 3, 500814, 3 },
  { 1675, 5, 4, 3, 517199, 3 },
  { 1872, 5, 4, 3, 533584, 3 },
  { 2069, 5, 4, 3, 549969, 3 },
  { 2269, 5, 4, 3, 566354, 3 },
  { 2469, 5, 4, 3, 582739, 3 },
  { 686, 5, 4, 3, 599124, 3 },
  { 896, 5, 4, 3, 615509, 3 },
  { 1106, 5, 4, 3, 631894, 3 },
  { 1303, 5, 4, 3, 648279, 3 },
  { 1500, 5, 4, 3, 664664, 3 },
  { 1697, 5, 4, 3, 681049, 3 },
  { 1894, 5, 4, 3, 697434, 3 },
  { 2091, 5, 4, 3, 713819, 3 },
  { 2291, 5, 4, 3, 730204, 3 },
  { 2491, 5, 4, 3, 746589, 3 },
  { 708, 5, 4, 3, 762974, 3 },
  { 918, 5, 4, 3, 779359, 3 },
  { 1128, 5, 4, 3, 795744, 3 },
  { 1325, 5, 4, 3, 812129, 3 },
  { 1522, 5, 4, 3, 828514, 3 },
  { 1719, 5, 4, 3, 844899, 3 },
  { 1916, 5, 4, 3, 861284, 3 },
  { 2113, 5, 4, 3, 877669, 3 },
  { 2313, 5, 4, 3, 894054, 3 },
  { 2513, 5, 4, 3, 910439, 3 },
  { 730, 5, 4, 3, 926824, 3 },
  { 940, 5, 4, 3, 943209, 3 },
  { 1150, 5, 4, 3, 959594, 3 },
  { 1347, 5, 4, 3, 975979, 3 },
  { 1544, 5, 4, 3, 992364, 3 },
  { 1741, 5, 4, 3, 1008749, 3 },
  { 1938, 5, 4, 3, 1025134, 3 },
  { 2135, 5, 4, 3, 1041519, 3 },
  { 2335, 5, 4, 3, 1057904, 3 },
  { 2535, 5, 4, 3, 1074289, 3 },
  { 752, 5, 4, 3, 1090674, 3 },
  { 962, 5, 4, 3, 1107059, 3 },
  { 1172, 5, 4, 3, 1123444, 3 },
  { 1369, 5, 4, 3, 1139829, 3 },
  { 1566, 5, 4, 3, 1156214, 3 },
  { 1763, 5, 4, 3, 1172599, 3 },
  { 1960, 5, 4, 3, 1188984, 3 },
  { 2157, 5, 4, 3, 1205369, 3 },
  { 2357, 5, 4, 3, 1221754, 3 },
  { 2557, 5, 4, 3, 1238139, 3 },
  { 774, 5, 4, 3, 1254524, 3 },
  { 984, 5, 4, 3, 1270909, 3 },
  { 10946, 4, 12, 2, 17598, 13 },
  { 11198, 4, 12, 2, 17600, 13 },
  { 8866, 4, 12, 2, 17602, 13 },
  { 9141, 4, 12, 2, 17604, 13 },
  { 9410, 4, 12, 2, 17606, 13 },
  { 9683, 4, 12, 2, 17608, 13 },
  { 9942, 4, 12, 2, 17610, 13 },
  { 10201, 4, 12, 2, 17612, 13 },
  { 10460, 4, 12, 2, 17614, 13 },
  { 10719, 4, 12, 2, 17616, 13 },
  { 10971, 4, 12, 2, 17618, 13 },
  { 11223, 4, 12, 2, 17620, 13 },
  { 8891, 4, 12, 2, 17622, 13 },
  { 9166, 4, 12, 2, 17624, 13 },
  { 9435, 4, 12, 2, 17626, 13 },
  { 9708, 4, 12, 2, 17628, 13 },
  { 9967, 4, 12, 2, 17630, 13 },
  { 10226, 4, 12, 2, 17632, 13 },
  { 10485, 4, 12, 2, 17634, 13 },
  { 10744, 4, 12, 2, 17636, 13 },
  { 10996, 4, 12, 2, 17638, 13 },
  { 11248, 4, 12, 2, 17640, 13 },
  { 8916, 4, 12, 2, 17642, 13 },
  { 9191, 4, 12, 2, 17644, 13 },
  { 9460, 4, 12, 2, 17646, 13 },
  { 9733, 4, 12, 2, 17648, 13 },
  { 9992, 4, 12, 2, 17650, 13 },
  { 10251, 4, 12, 2, 17652, 13 },
  { 10510, 4, 12, 2, 17654, 13 },
  { 10769, 4, 12, 2, 17656, 13 },
  { 11021, 4, 12, 2, 17658, 13 },
  { 11273, 4, 12, 2, 17660, 13 },
  { 8941, 4, 12, 2, 17662, 13 },
  { 9216, 4, 12, 2, 17664, 13 },
  { 9485, 4, 12, 2, 17666, 13 },
  { 9758, 4, 12, 2, 17668, 13 },
  { 10017, 4, 12, 2, 17670, 13 },
  { 10276, 4, 12, 2, 17672, 13 },
  { 10535, 4, 12, 2, 17674, 13 },
  { 10794, 4, 12, 2, 17676, 13 },
  { 11046, 4, 12, 2, 17678, 13 },
  { 11298, 4, 12, 2, 17680, 13 },
  { 8966, 4, 12, 2, 17682, 13 },
  { 9241, 4, 12, 2, 17684, 13 },
  { 9510, 4, 12, 2, 17686, 13 },
  { 9783, 4, 12, 2, 17688, 13 },
  { 10042, 4, 12, 2, 17690, 13 },
  { 10301, 4, 12, 2, 17692, 13 },
  { 10560, 4, 12, 2, 17694, 13 },
  { 10819, 4, 12, 2, 17696, 13 },
  { 11071, 4, 12, 2, 17698, 13 },
  { 11323, 4, 12, 2, 17700, 13 },
  { 8991, 4, 12, 2, 17702, 13 },
  { 9266, 4, 12, 2, 17704, 13 },
  { 9535, 4, 12, 2, 17706, 13 },
  { 9808, 4, 12, 2, 17708, 13 },
  { 10067, 4, 12, 2, 17710, 13 },
  { 10326, 4, 12, 2, 17712, 13 },
  { 10585, 4, 12, 2, 17714, 13 },
  { 10844, 4, 12, 2, 17716, 13 },
  { 11096, 4, 12, 2, 17718, 13 },
  { 11348, 4, 12, 2, 17720, 13 },
  { 9016, 4, 12, 2, 17722, 13 },
  { 9291, 4, 12, 2, 17724, 13 },
  { 13581, 4, 10, 2, 17599, 13 },
  { 13833, 4, 10, 2, 17601, 13 },
  { 11501, 4, 10, 2, 17603, 13 },
  { 11776, 4, 10, 2, 17605, 13 },
  { 12045, 4, 10, 2, 17607, 13 },
  { 12318, 4, 10, 2, 17609, 13 },
  { 12577, 4, 10, 2, 17611, 13 },
  { 12836, 4, 10, 2, 17613, 13 },
  { 13095, 4, 10, 2, 17615, 13 },
  { 13354, 4, 10, 2, 17617, 13 },
  { 13606, 4, 10, 2, 17619, 13 },
  { 13858, 4, 10, 2, 17621, 13 },
  { 11526, 4, 10, 2, 17623, 13 },
  { 11801, 4, 10, 2, 17625, 13 },
  { 12070, 4, 10, 2, 17627, 13 },
  { 12343, 4, 10, 2, 17629, 13 },
  { 12602, 4, 10, 2, 17631, 13 },
  { 12861, 4, 10, 2, 17633, 13 },
  { 13120, 4, 10, 2, 17635, 13 },
  { 13379, 4, 10, 2, 17637, 13 },
  { 13631, 4, 10, 2, 17639, 13 },
  { 13883, 4, 10, 2, 17641, 13 },
  { 11551, 4, 10, 2, 17643, 13 },
  { 11826, 4, 10, 2, 17645, 13 },
  { 12095, 4, 10, 2, 17647, 13 },
  { 12368, 4, 10, 2, 17649, 13 },
  { 12627, 4, 10, 2, 17651, 13 },
  { 12886, 4, 10, 2, 17653, 13 },
  { 13145, 4, 10, 2, 17655, 13 },
  { 13404, 4, 10, 2, 17657, 13 },
  { 13656, 4, 10, 2, 17659, 13 },
  { 13908, 4, 10, 2, 17661, 13 },
  { 11576, 4, 10, 2, 17663, 13 },
  { 11851, 4, 10, 2, 17665, 13 },
  { 12120, 4, 10, 2, 17667, 13 },
  { 12393, 4, 10, 2, 17669, 13 },
  { 12652, 4, 10, 2, 17671, 13 },
  { 12911, 4, 10, 2, 17673, 13 },
  { 13170, 4, 10, 2, 17675, 13 },
  { 13429, 4, 10, 2, 17677, 13 },
  { 13681, 4, 10, 2, 17679, 13 },
  { 13933, 4, 10, 2, 17681, 13 },
  { 11601, 4, 10, 2, 17683, 13 },
  { 11876, 4, 10, 2, 17685, 13 },
  { 12145, 4, 10, 2, 17687, 13 },
  { 12418, 4, 10, 2, 17689, 13 },
  { 12677, 4, 10, 2, 17691, 13 },
  { 12936, 4, 10, 2, 17693, 13 },
  { 13195, 4, 10, 2, 17695, 13 },
  { 13454, 4, 10, 2, 17697, 13 },
  { 13706, 4, 10, 2, 17699, 13 },
  { 13958, 4, 10, 2, 17701, 13 },
  { 11626, 4, 10, 2, 17703, 13 },
  { 11901, 4, 10, 2, 17705, 13 },
  { 12170, 4, 10, 2, 17707, 13 },
  { 12443, 4, 10, 2, 17709, 13 },
  { 12702, 4, 10, 2, 17711, 13 },
  { 12961, 4, 10, 2, 17713, 13 },
  { 13220, 4, 10, 2, 17715, 13 },
  { 13479, 4, 10, 2, 17717, 13 },
  { 13731, 4, 10, 2, 17719, 13 },
  { 13983, 4, 10, 2, 17721, 13 },
  { 11651, 4, 10, 2, 17723, 13 },
  { 11926, 4, 10, 2, 17725, 13 },
};

extern const MCPhysReg R600RegUnitRoots[][2] = {
  { R600::ALU_CONST },
  { R600::ALU_LITERAL_W },
  { R600::ALU_LITERAL_X },
  { R600::ALU_LITERAL_Y },
  { R600::ALU_LITERAL_Z },
  { R600::ALU_PARAM },
  { R600::AR_X },
  { R600::HALF },
  { R600::INDIRECT_BASE_ADDR },
  { R600::LDS_DIRECT_A },
  { R600::LDS_DIRECT_B },
  { R600::NEG_HALF },
  { R600::NEG_ONE },
  { R600::ONE },
  { R600::ONE_INT },
  { R600::OQA },
  { R600::OQAP },
  { R600::OQB },
  { R600::OQBP },
  { R600::PREDICATE_BIT },
  { R600::PRED_SEL_OFF },
  { R600::PRED_SEL_ONE },
  { R600::PRED_SEL_ZERO },
  { R600::PS },
  { R600::PV_W },
  { R600::PV_X },
  { R600::PV_Y },
  { R600::PV_Z },
  { R600::ZERO },
  { R600::ArrayBase448 },
  { R600::ArrayBase449 },
  { R600::ArrayBase450 },
  { R600::ArrayBase451 },
  { R600::ArrayBase452 },
  { R600::ArrayBase453 },
  { R600::ArrayBase454 },
  { R600::ArrayBase455 },
  { R600::ArrayBase456 },
  { R600::ArrayBase457 },
  { R600::ArrayBase458 },
  { R600::ArrayBase459 },
  { R600::ArrayBase460 },
  { R600::ArrayBase461 },
  { R600::ArrayBase462 },
  { R600::ArrayBase463 },
  { R600::ArrayBase464 },
  { R600::ArrayBase465 },
  { R600::ArrayBase466 },
  { R600::ArrayBase467 },
  { R600::ArrayBase468 },
  { R600::ArrayBase469 },
  { R600::ArrayBase470 },
  { R600::ArrayBase471 },
  { R600::ArrayBase472 },
  { R600::ArrayBase473 },
  { R600::ArrayBase474 },
  { R600::ArrayBase475 },
  { R600::ArrayBase476 },
  { R600::ArrayBase477 },
  { R600::ArrayBase478 },
  { R600::ArrayBase479 },
  { R600::ArrayBase480 },
  { R600::Addr0_W },
  { R600::Addr1_W },
  { R600::Addr2_W },
  { R600::Addr3_W },
  { R600::Addr4_W },
  { R600::Addr5_W },
  { R600::Addr6_W },
  { R600::Addr7_W },
  { R600::Addr8_W },
  { R600::Addr9_W },
  { R600::Addr10_W },
  { R600::Addr11_W },
  { R600::Addr12_W },
  { R600::Addr13_W },
  { R600::Addr14_W },
  { R600::Addr15_W },
  { R600::Addr16_W },
  { R600::Addr17_W },
  { R600::Addr18_W },
  { R600::Addr19_W },
  { R600::Addr20_W },
  { R600::Addr21_W },
  { R600::Addr22_W },
  { R600::Addr23_W },
  { R600::Addr24_W },
  { R600::Addr25_W },
  { R600::Addr26_W },
  { R600::Addr27_W },
  { R600::Addr28_W },
  { R600::Addr29_W },
  { R600::Addr30_W },
  { R600::Addr31_W },
  { R600::Addr32_W },
  { R600::Addr33_W },
  { R600::Addr34_W },
  { R600::Addr35_W },
  { R600::Addr36_W },
  { R600::Addr37_W },
  { R600::Addr38_W },
  { R600::Addr39_W },
  { R600::Addr40_W },
  { R600::Addr41_W },
  { R600::Addr42_W },
  { R600::Addr43_W },
  { R600::Addr44_W },
  { R600::Addr45_W },
  { R600::Addr46_W },
  { R600::Addr47_W },
  { R600::Addr48_W },
  { R600::Addr49_W },
  { R600::Addr50_W },
  { R600::Addr51_W },
  { R600::Addr52_W },
  { R600::Addr53_W },
  { R600::Addr54_W },
  { R600::Addr55_W },
  { R600::Addr56_W },
  { R600::Addr57_W },
  { R600::Addr58_W },
  { R600::Addr59_W },
  { R600::Addr60_W },
  { R600::Addr61_W },
  { R600::Addr62_W },
  { R600::Addr63_W },
  { R600::Addr64_W },
  { R600::Addr65_W },
  { R600::Addr66_W },
  { R600::Addr67_W },
  { R600::Addr68_W },
  { R600::Addr69_W },
  { R600::Addr70_W },
  { R600::Addr71_W },
  { R600::Addr72_W },
  { R600::Addr73_W },
  { R600::Addr74_W },
  { R600::Addr75_W },
  { R600::Addr76_W },
  { R600::Addr77_W },
  { R600::Addr78_W },
  { R600::Addr79_W },
  { R600::Addr80_W },
  { R600::Addr81_W },
  { R600::Addr82_W },
  { R600::Addr83_W },
  { R600::Addr84_W },
  { R600::Addr85_W },
  { R600::Addr86_W },
  { R600::Addr87_W },
  { R600::Addr88_W },
  { R600::Addr89_W },
  { R600::Addr90_W },
  { R600::Addr91_W },
  { R600::Addr92_W },
  { R600::Addr93_W },
  { R600::Addr94_W },
  { R600::Addr95_W },
  { R600::Addr96_W },
  { R600::Addr97_W },
  { R600::Addr98_W },
  { R600::Addr99_W },
  { R600::Addr100_W },
  { R600::Addr101_W },
  { R600::Addr102_W },
  { R600::Addr103_W },
  { R600::Addr104_W },
  { R600::Addr105_W },
  { R600::Addr106_W },
  { R600::Addr107_W },
  { R600::Addr108_W },
  { R600::Addr109_W },
  { R600::Addr110_W },
  { R600::Addr111_W },
  { R600::Addr112_W },
  { R600::Addr113_W },
  { R600::Addr114_W },
  { R600::Addr115_W },
  { R600::Addr116_W },
  { R600::Addr117_W },
  { R600::Addr118_W },
  { R600::Addr119_W },
  { R600::Addr120_W },
  { R600::Addr121_W },
  { R600::Addr122_W },
  { R600::Addr123_W },
  { R600::Addr124_W },
  { R600::Addr125_W },
  { R600::Addr126_W },
  { R600::Addr127_W },
  { R600::Addr0_X },
  { R600::Addr1_X },
  { R600::Addr2_X },
  { R600::Addr3_X },
  { R600::Addr4_X },
  { R600::Addr5_X },
  { R600::Addr6_X },
  { R600::Addr7_X },
  { R600::Addr8_X },
  { R600::Addr9_X },
  { R600::Addr10_X },
  { R600::Addr11_X },
  { R600::Addr12_X },
  { R600::Addr13_X },
  { R600::Addr14_X },
  { R600::Addr15_X },
  { R600::Addr16_X },
  { R600::Addr17_X },
  { R600::Addr18_X },
  { R600::Addr19_X },
  { R600::Addr20_X },
  { R600::Addr21_X },
  { R600::Addr22_X },
  { R600::Addr23_X },
  { R600::Addr24_X },
  { R600::Addr25_X },
  { R600::Addr26_X },
  { R600::Addr27_X },
  { R600::Addr28_X },
  { R600::Addr29_X },
  { R600::Addr30_X },
  { R600::Addr31_X },
  { R600::Addr32_X },
  { R600::Addr33_X },
  { R600::Addr34_X },
  { R600::Addr35_X },
  { R600::Addr36_X },
  { R600::Addr37_X },
  { R600::Addr38_X },
  { R600::Addr39_X },
  { R600::Addr40_X },
  { R600::Addr41_X },
  { R600::Addr42_X },
  { R600::Addr43_X },
  { R600::Addr44_X },
  { R600::Addr45_X },
  { R600::Addr46_X },
  { R600::Addr47_X },
  { R600::Addr48_X },
  { R600::Addr49_X },
  { R600::Addr50_X },
  { R600::Addr51_X },
  { R600::Addr52_X },
  { R600::Addr53_X },
  { R600::Addr54_X },
  { R600::Addr55_X },
  { R600::Addr56_X },
  { R600::Addr57_X },
  { R600::Addr58_X },
  { R600::Addr59_X },
  { R600::Addr60_X },
  { R600::Addr61_X },
  { R600::Addr62_X },
  { R600::Addr63_X },
  { R600::Addr64_X },
  { R600::Addr65_X },
  { R600::Addr66_X },
  { R600::Addr67_X },
  { R600::Addr68_X },
  { R600::Addr69_X },
  { R600::Addr70_X },
  { R600::Addr71_X },
  { R600::Addr72_X },
  { R600::Addr73_X },
  { R600::Addr74_X },
  { R600::Addr75_X },
  { R600::Addr76_X },
  { R600::Addr77_X },
  { R600::Addr78_X },
  { R600::Addr79_X },
  { R600::Addr80_X },
  { R600::Addr81_X },
  { R600::Addr82_X },
  { R600::Addr83_X },
  { R600::Addr84_X },
  { R600::Addr85_X },
  { R600::Addr86_X },
  { R600::Addr87_X },
  { R600::Addr88_X },
  { R600::Addr89_X },
  { R600::Addr90_X },
  { R600::Addr91_X },
  { R600::Addr92_X },
  { R600::Addr93_X },
  { R600::Addr94_X },
  { R600::Addr95_X },
  { R600::Addr96_X },
  { R600::Addr97_X },
  { R600::Addr98_X },
  { R600::Addr99_X },
  { R600::Addr100_X },
  { R600::Addr101_X },
  { R600::Addr102_X },
  { R600::Addr103_X },
  { R600::Addr104_X },
  { R600::Addr105_X },
  { R600::Addr106_X },
  { R600::Addr107_X },
  { R600::Addr108_X },
  { R600::Addr109_X },
  { R600::Addr110_X },
  { R600::Addr111_X },
  { R600::Addr112_X },
  { R600::Addr113_X },
  { R600::Addr114_X },
  { R600::Addr115_X },
  { R600::Addr116_X },
  { R600::Addr117_X },
  { R600::Addr118_X },
  { R600::Addr119_X },
  { R600::Addr120_X },
  { R600::Addr121_X },
  { R600::Addr122_X },
  { R600::Addr123_X },
  { R600::Addr124_X },
  { R600::Addr125_X },
  { R600::Addr126_X },
  { R600::Addr127_X },
  { R600::Addr0_Y },
  { R600::Addr1_Y },
  { R600::Addr2_Y },
  { R600::Addr3_Y },
  { R600::Addr4_Y },
  { R600::Addr5_Y },
  { R600::Addr6_Y },
  { R600::Addr7_Y },
  { R600::Addr8_Y },
  { R600::Addr9_Y },
  { R600::Addr10_Y },
  { R600::Addr11_Y },
  { R600::Addr12_Y },
  { R600::Addr13_Y },
  { R600::Addr14_Y },
  { R600::Addr15_Y },
  { R600::Addr16_Y },
  { R600::Addr17_Y },
  { R600::Addr18_Y },
  { R600::Addr19_Y },
  { R600::Addr20_Y },
  { R600::Addr21_Y },
  { R600::Addr22_Y },
  { R600::Addr23_Y },
  { R600::Addr24_Y },
  { R600::Addr25_Y },
  { R600::Addr26_Y },
  { R600::Addr27_Y },
  { R600::Addr28_Y },
  { R600::Addr29_Y },
  { R600::Addr30_Y },
  { R600::Addr31_Y },
  { R600::Addr32_Y },
  { R600::Addr33_Y },
  { R600::Addr34_Y },
  { R600::Addr35_Y },
  { R600::Addr36_Y },
  { R600::Addr37_Y },
  { R600::Addr38_Y },
  { R600::Addr39_Y },
  { R600::Addr40_Y },
  { R600::Addr41_Y },
  { R600::Addr42_Y },
  { R600::Addr43_Y },
  { R600::Addr44_Y },
  { R600::Addr45_Y },
  { R600::Addr46_Y },
  { R600::Addr47_Y },
  { R600::Addr48_Y },
  { R600::Addr49_Y },
  { R600::Addr50_Y },
  { R600::Addr51_Y },
  { R600::Addr52_Y },
  { R600::Addr53_Y },
  { R600::Addr54_Y },
  { R600::Addr55_Y },
  { R600::Addr56_Y },
  { R600::Addr57_Y },
  { R600::Addr58_Y },
  { R600::Addr59_Y },
  { R600::Addr60_Y },
  { R600::Addr61_Y },
  { R600::Addr62_Y },
  { R600::Addr63_Y },
  { R600::Addr64_Y },
  { R600::Addr65_Y },
  { R600::Addr66_Y },
  { R600::Addr67_Y },
  { R600::Addr68_Y },
  { R600::Addr69_Y },
  { R600::Addr70_Y },
  { R600::Addr71_Y },
  { R600::Addr72_Y },
  { R600::Addr73_Y },
  { R600::Addr74_Y },
  { R600::Addr75_Y },
  { R600::Addr76_Y },
  { R600::Addr77_Y },
  { R600::Addr78_Y },
  { R600::Addr79_Y },
  { R600::Addr80_Y },
  { R600::Addr81_Y },
  { R600::Addr82_Y },
  { R600::Addr83_Y },
  { R600::Addr84_Y },
  { R600::Addr85_Y },
  { R600::Addr86_Y },
  { R600::Addr87_Y },
  { R600::Addr88_Y },
  { R600::Addr89_Y },
  { R600::Addr90_Y },
  { R600::Addr91_Y },
  { R600::Addr92_Y },
  { R600::Addr93_Y },
  { R600::Addr94_Y },
  { R600::Addr95_Y },
  { R600::Addr96_Y },
  { R600::Addr97_Y },
  { R600::Addr98_Y },
  { R600::Addr99_Y },
  { R600::Addr100_Y },
  { R600::Addr101_Y },
  { R600::Addr102_Y },
  { R600::Addr103_Y },
  { R600::Addr104_Y },
  { R600::Addr105_Y },
  { R600::Addr106_Y },
  { R600::Addr107_Y },
  { R600::Addr108_Y },
  { R600::Addr109_Y },
  { R600::Addr110_Y },
  { R600::Addr111_Y },
  { R600::Addr112_Y },
  { R600::Addr113_Y },
  { R600::Addr114_Y },
  { R600::Addr115_Y },
  { R600::Addr116_Y },
  { R600::Addr117_Y },
  { R600::Addr118_Y },
  { R600::Addr119_Y },
  { R600::Addr120_Y },
  { R600::Addr121_Y },
  { R600::Addr122_Y },
  { R600::Addr123_Y },
  { R600::Addr124_Y },
  { R600::Addr125_Y },
  { R600::Addr126_Y },
  { R600::Addr127_Y },
  { R600::Addr0_Z },
  { R600::Addr1_Z },
  { R600::Addr2_Z },
  { R600::Addr3_Z },
  { R600::Addr4_Z },
  { R600::Addr5_Z },
  { R600::Addr6_Z },
  { R600::Addr7_Z },
  { R600::Addr8_Z },
  { R600::Addr9_Z },
  { R600::Addr10_Z },
  { R600::Addr11_Z },
  { R600::Addr12_Z },
  { R600::Addr13_Z },
  { R600::Addr14_Z },
  { R600::Addr15_Z },
  { R600::Addr16_Z },
  { R600::Addr17_Z },
  { R600::Addr18_Z },
  { R600::Addr19_Z },
  { R600::Addr20_Z },
  { R600::Addr21_Z },
  { R600::Addr22_Z },
  { R600::Addr23_Z },
  { R600::Addr24_Z },
  { R600::Addr25_Z },
  { R600::Addr26_Z },
  { R600::Addr27_Z },
  { R600::Addr28_Z },
  { R600::Addr29_Z },
  { R600::Addr30_Z },
  { R600::Addr31_Z },
  { R600::Addr32_Z },
  { R600::Addr33_Z },
  { R600::Addr34_Z },
  { R600::Addr35_Z },
  { R600::Addr36_Z },
  { R600::Addr37_Z },
  { R600::Addr38_Z },
  { R600::Addr39_Z },
  { R600::Addr40_Z },
  { R600::Addr41_Z },
  { R600::Addr42_Z },
  { R600::Addr43_Z },
  { R600::Addr44_Z },
  { R600::Addr45_Z },
  { R600::Addr46_Z },
  { R600::Addr47_Z },
  { R600::Addr48_Z },
  { R600::Addr49_Z },
  { R600::Addr50_Z },
  { R600::Addr51_Z },
  { R600::Addr52_Z },
  { R600::Addr53_Z },
  { R600::Addr54_Z },
  { R600::Addr55_Z },
  { R600::Addr56_Z },
  { R600::Addr57_Z },
  { R600::Addr58_Z },
  { R600::Addr59_Z },
  { R600::Addr60_Z },
  { R600::Addr61_Z },
  { R600::Addr62_Z },
  { R600::Addr63_Z },
  { R600::Addr64_Z },
  { R600::Addr65_Z },
  { R600::Addr66_Z },
  { R600::Addr67_Z },
  { R600::Addr68_Z },
  { R600::Addr69_Z },
  { R600::Addr70_Z },
  { R600::Addr71_Z },
  { R600::Addr72_Z },
  { R600::Addr73_Z },
  { R600::Addr74_Z },
  { R600::Addr75_Z },
  { R600::Addr76_Z },
  { R600::Addr77_Z },
  { R600::Addr78_Z },
  { R600::Addr79_Z },
  { R600::Addr80_Z },
  { R600::Addr81_Z },
  { R600::Addr82_Z },
  { R600::Addr83_Z },
  { R600::Addr84_Z },
  { R600::Addr85_Z },
  { R600::Addr86_Z },
  { R600::Addr87_Z },
  { R600::Addr88_Z },
  { R600::Addr89_Z },
  { R600::Addr90_Z },
  { R600::Addr91_Z },
  { R600::Addr92_Z },
  { R600::Addr93_Z },
  { R600::Addr94_Z },
  { R600::Addr95_Z },
  { R600::Addr96_Z },
  { R600::Addr97_Z },
  { R600::Addr98_Z },
  { R600::Addr99_Z },
  { R600::Addr100_Z },
  { R600::Addr101_Z },
  { R600::Addr102_Z },
  { R600::Addr103_Z },
  { R600::Addr104_Z },
  { R600::Addr105_Z },
  { R600::Addr106_Z },
  { R600::Addr107_Z },
  { R600::Addr108_Z },
  { R600::Addr109_Z },
  { R600::Addr110_Z },
  { R600::Addr111_Z },
  { R600::Addr112_Z },
  { R600::Addr113_Z },
  { R600::Addr114_Z },
  { R600::Addr115_Z },
  { R600::Addr116_Z },
  { R600::Addr117_Z },
  { R600::Addr118_Z },
  { R600::Addr119_Z },
  { R600::Addr120_Z },
  { R600::Addr121_Z },
  { R600::Addr122_Z },
  { R600::Addr123_Z },
  { R600::Addr124_Z },
  { R600::Addr125_Z },
  { R600::Addr126_Z },
  { R600::Addr127_Z },
  { R600::T0_W },
  { R600::T1_W },
  { R600::T2_W },
  { R600::T3_W },
  { R600::T4_W },
  { R600::T5_W },
  { R600::T6_W },
  { R600::T7_W },
  { R600::T8_W },
  { R600::T9_W },
  { R600::T10_W },
  { R600::T11_W },
  { R600::T12_W },
  { R600::T13_W },
  { R600::T14_W },
  { R600::T15_W },
  { R600::T16_W },
  { R600::T17_W },
  { R600::T18_W },
  { R600::T19_W },
  { R600::T20_W },
  { R600::T21_W },
  { R600::T22_W },
  { R600::T23_W },
  { R600::T24_W },
  { R600::T25_W },
  { R600::T26_W },
  { R600::T27_W },
  { R600::T28_W },
  { R600::T29_W },
  { R600::T30_W },
  { R600::T31_W },
  { R600::T32_W },
  { R600::T33_W },
  { R600::T34_W },
  { R600::T35_W },
  { R600::T36_W },
  { R600::T37_W },
  { R600::T38_W },
  { R600::T39_W },
  { R600::T40_W },
  { R600::T41_W },
  { R600::T42_W },
  { R600::T43_W },
  { R600::T44_W },
  { R600::T45_W },
  { R600::T46_W },
  { R600::T47_W },
  { R600::T48_W },
  { R600::T49_W },
  { R600::T50_W },
  { R600::T51_W },
  { R600::T52_W },
  { R600::T53_W },
  { R600::T54_W },
  { R600::T55_W },
  { R600::T56_W },
  { R600::T57_W },
  { R600::T58_W },
  { R600::T59_W },
  { R600::T60_W },
  { R600::T61_W },
  { R600::T62_W },
  { R600::T63_W },
  { R600::T64_W },
  { R600::T65_W },
  { R600::T66_W },
  { R600::T67_W },
  { R600::T68_W },
  { R600::T69_W },
  { R600::T70_W },
  { R600::T71_W },
  { R600::T72_W },
  { R600::T73_W },
  { R600::T74_W },
  { R600::T75_W },
  { R600::T76_W },
  { R600::T77_W },
  { R600::T78_W },
  { R600::T79_W },
  { R600::T80_W },
  { R600::T81_W },
  { R600::T82_W },
  { R600::T83_W },
  { R600::T84_W },
  { R600::T85_W },
  { R600::T86_W },
  { R600::T87_W },
  { R600::T88_W },
  { R600::T89_W },
  { R600::T90_W },
  { R600::T91_W },
  { R600::T92_W },
  { R600::T93_W },
  { R600::T94_W },
  { R600::T95_W },
  { R600::T96_W },
  { R600::T97_W },
  { R600::T98_W },
  { R600::T99_W },
  { R600::T100_W },
  { R600::T101_W },
  { R600::T102_W },
  { R600::T103_W },
  { R600::T104_W },
  { R600::T105_W },
  { R600::T106_W },
  { R600::T107_W },
  { R600::T108_W },
  { R600::T109_W },
  { R600::T110_W },
  { R600::T111_W },
  { R600::T112_W },
  { R600::T113_W },
  { R600::T114_W },
  { R600::T115_W },
  { R600::T116_W },
  { R600::T117_W },
  { R600::T118_W },
  { R600::T119_W },
  { R600::T120_W },
  { R600::T121_W },
  { R600::T122_W },
  { R600::T123_W },
  { R600::T124_W },
  { R600::T125_W },
  { R600::T126_W },
  { R600::T127_W },
  { R600::T0_X },
  { R600::T1_X },
  { R600::T2_X },
  { R600::T3_X },
  { R600::T4_X },
  { R600::T5_X },
  { R600::T6_X },
  { R600::T7_X },
  { R600::T8_X },
  { R600::T9_X },
  { R600::T10_X },
  { R600::T11_X },
  { R600::T12_X },
  { R600::T13_X },
  { R600::T14_X },
  { R600::T15_X },
  { R600::T16_X },
  { R600::T17_X },
  { R600::T18_X },
  { R600::T19_X },
  { R600::T20_X },
  { R600::T21_X },
  { R600::T22_X },
  { R600::T23_X },
  { R600::T24_X },
  { R600::T25_X },
  { R600::T26_X },
  { R600::T27_X },
  { R600::T28_X },
  { R600::T29_X },
  { R600::T30_X },
  { R600::T31_X },
  { R600::T32_X },
  { R600::T33_X },
  { R600::T34_X },
  { R600::T35_X },
  { R600::T36_X },
  { R600::T37_X },
  { R600::T38_X },
  { R600::T39_X },
  { R600::T40_X },
  { R600::T41_X },
  { R600::T42_X },
  { R600::T43_X },
  { R600::T44_X },
  { R600::T45_X },
  { R600::T46_X },
  { R600::T47_X },
  { R600::T48_X },
  { R600::T49_X },
  { R600::T50_X },
  { R600::T51_X },
  { R600::T52_X },
  { R600::T53_X },
  { R600::T54_X },
  { R600::T55_X },
  { R600::T56_X },
  { R600::T57_X },
  { R600::T58_X },
  { R600::T59_X },
  { R600::T60_X },
  { R600::T61_X },
  { R600::T62_X },
  { R600::T63_X },
  { R600::T64_X },
  { R600::T65_X },
  { R600::T66_X },
  { R600::T67_X },
  { R600::T68_X },
  { R600::T69_X },
  { R600::T70_X },
  { R600::T71_X },
  { R600::T72_X },
  { R600::T73_X },
  { R600::T74_X },
  { R600::T75_X },
  { R600::T76_X },
  { R600::T77_X },
  { R600::T78_X },
  { R600::T79_X },
  { R600::T80_X },
  { R600::T81_X },
  { R600::T82_X },
  { R600::T83_X },
  { R600::T84_X },
  { R600::T85_X },
  { R600::T86_X },
  { R600::T87_X },
  { R600::T88_X },
  { R600::T89_X },
  { R600::T90_X },
  { R600::T91_X },
  { R600::T92_X },
  { R600::T93_X },
  { R600::T94_X },
  { R600::T95_X },
  { R600::T96_X },
  { R600::T97_X },
  { R600::T98_X },
  { R600::T99_X },
  { R600::T100_X },
  { R600::T101_X },
  { R600::T102_X },
  { R600::T103_X },
  { R600::T104_X },
  { R600::T105_X },
  { R600::T106_X },
  { R600::T107_X },
  { R600::T108_X },
  { R600::T109_X },
  { R600::T110_X },
  { R600::T111_X },
  { R600::T112_X },
  { R600::T113_X },
  { R600::T114_X },
  { R600::T115_X },
  { R600::T116_X },
  { R600::T117_X },
  { R600::T118_X },
  { R600::T119_X },
  { R600::T120_X },
  { R600::T121_X },
  { R600::T122_X },
  { R600::T123_X },
  { R600::T124_X },
  { R600::T125_X },
  { R600::T126_X },
  { R600::T127_X },
  { R600::T0_Y },
  { R600::T1_Y },
  { R600::T2_Y },
  { R600::T3_Y },
  { R600::T4_Y },
  { R600::T5_Y },
  { R600::T6_Y },
  { R600::T7_Y },
  { R600::T8_Y },
  { R600::T9_Y },
  { R600::T10_Y },
  { R600::T11_Y },
  { R600::T12_Y },
  { R600::T13_Y },
  { R600::T14_Y },
  { R600::T15_Y },
  { R600::T16_Y },
  { R600::T17_Y },
  { R600::T18_Y },
  { R600::T19_Y },
  { R600::T20_Y },
  { R600::T21_Y },
  { R600::T22_Y },
  { R600::T23_Y },
  { R600::T24_Y },
  { R600::T25_Y },
  { R600::T26_Y },
  { R600::T27_Y },
  { R600::T28_Y },
  { R600::T29_Y },
  { R600::T30_Y },
  { R600::T31_Y },
  { R600::T32_Y },
  { R600::T33_Y },
  { R600::T34_Y },
  { R600::T35_Y },
  { R600::T36_Y },
  { R600::T37_Y },
  { R600::T38_Y },
  { R600::T39_Y },
  { R600::T40_Y },
  { R600::T41_Y },
  { R600::T42_Y },
  { R600::T43_Y },
  { R600::T44_Y },
  { R600::T45_Y },
  { R600::T46_Y },
  { R600::T47_Y },
  { R600::T48_Y },
  { R600::T49_Y },
  { R600::T50_Y },
  { R600::T51_Y },
  { R600::T52_Y },
  { R600::T53_Y },
  { R600::T54_Y },
  { R600::T55_Y },
  { R600::T56_Y },
  { R600::T57_Y },
  { R600::T58_Y },
  { R600::T59_Y },
  { R600::T60_Y },
  { R600::T61_Y },
  { R600::T62_Y },
  { R600::T63_Y },
  { R600::T64_Y },
  { R600::T65_Y },
  { R600::T66_Y },
  { R600::T67_Y },
  { R600::T68_Y },
  { R600::T69_Y },
  { R600::T70_Y },
  { R600::T71_Y },
  { R600::T72_Y },
  { R600::T73_Y },
  { R600::T74_Y },
  { R600::T75_Y },
  { R600::T76_Y },
  { R600::T77_Y },
  { R600::T78_Y },
  { R600::T79_Y },
  { R600::T80_Y },
  { R600::T81_Y },
  { R600::T82_Y },
  { R600::T83_Y },
  { R600::T84_Y },
  { R600::T85_Y },
  { R600::T86_Y },
  { R600::T87_Y },
  { R600::T88_Y },
  { R600::T89_Y },
  { R600::T90_Y },
  { R600::T91_Y },
  { R600::T92_Y },
  { R600::T93_Y },
  { R600::T94_Y },
  { R600::T95_Y },
  { R600::T96_Y },
  { R600::T97_Y },
  { R600::T98_Y },
  { R600::T99_Y },
  { R600::T100_Y },
  { R600::T101_Y },
  { R600::T102_Y },
  { R600::T103_Y },
  { R600::T104_Y },
  { R600::T105_Y },
  { R600::T106_Y },
  { R600::T107_Y },
  { R600::T108_Y },
  { R600::T109_Y },
  { R600::T110_Y },
  { R600::T111_Y },
  { R600::T112_Y },
  { R600::T113_Y },
  { R600::T114_Y },
  { R600::T115_Y },
  { R600::T116_Y },
  { R600::T117_Y },
  { R600::T118_Y },
  { R600::T119_Y },
  { R600::T120_Y },
  { R600::T121_Y },
  { R600::T122_Y },
  { R600::T123_Y },
  { R600::T124_Y },
  { R600::T125_Y },
  { R600::T126_Y },
  { R600::T127_Y },
  { R600::T0_Z },
  { R600::T1_Z },
  { R600::T2_Z },
  { R600::T3_Z },
  { R600::T4_Z },
  { R600::T5_Z },
  { R600::T6_Z },
  { R600::T7_Z },
  { R600::T8_Z },
  { R600::T9_Z },
  { R600::T10_Z },
  { R600::T11_Z },
  { R600::T12_Z },
  { R600::T13_Z },
  { R600::T14_Z },
  { R600::T15_Z },
  { R600::T16_Z },
  { R600::T17_Z },
  { R600::T18_Z },
  { R600::T19_Z },
  { R600::T20_Z },
  { R600::T21_Z },
  { R600::T22_Z },
  { R600::T23_Z },
  { R600::T24_Z },
  { R600::T25_Z },
  { R600::T26_Z },
  { R600::T27_Z },
  { R600::T28_Z },
  { R600::T29_Z },
  { R600::T30_Z },
  { R600::T31_Z },
  { R600::T32_Z },
  { R600::T33_Z },
  { R600::T34_Z },
  { R600::T35_Z },
  { R600::T36_Z },
  { R600::T37_Z },
  { R600::T38_Z },
  { R600::T39_Z },
  { R600::T40_Z },
  { R600::T41_Z },
  { R600::T42_Z },
  { R600::T43_Z },
  { R600::T44_Z },
  { R600::T45_Z },
  { R600::T46_Z },
  { R600::T47_Z },
  { R600::T48_Z },
  { R600::T49_Z },
  { R600::T50_Z },
  { R600::T51_Z },
  { R600::T52_Z },
  { R600::T53_Z },
  { R600::T54_Z },
  { R600::T55_Z },
  { R600::T56_Z },
  { R600::T57_Z },
  { R600::T58_Z },
  { R600::T59_Z },
  { R600::T60_Z },
  { R600::T61_Z },
  { R600::T62_Z },
  { R600::T63_Z },
  { R600::T64_Z },
  { R600::T65_Z },
  { R600::T66_Z },
  { R600::T67_Z },
  { R600::T68_Z },
  { R600::T69_Z },
  { R600::T70_Z },
  { R600::T71_Z },
  { R600::T72_Z },
  { R600::T73_Z },
  { R600::T74_Z },
  { R600::T75_Z },
  { R600::T76_Z },
  { R600::T77_Z },
  { R600::T78_Z },
  { R600::T79_Z },
  { R600::T80_Z },
  { R600::T81_Z },
  { R600::T82_Z },
  { R600::T83_Z },
  { R600::T84_Z },
  { R600::T85_Z },
  { R600::T86_Z },
  { R600::T87_Z },
  { R600::T88_Z },
  { R600::T89_Z },
  { R600::T90_Z },
  { R600::T91_Z },
  { R600::T92_Z },
  { R600::T93_Z },
  { R600::T94_Z },
  { R600::T95_Z },
  { R600::T96_Z },
  { R600::T97_Z },
  { R600::T98_Z },
  { R600::T99_Z },
  { R600::T100_Z },
  { R600::T101_Z },
  { R600::T102_Z },
  { R600::T103_Z },
  { R600::T104_Z },
  { R600::T105_Z },
  { R600::T106_Z },
  { R600::T107_Z },
  { R600::T108_Z },
  { R600::T109_Z },
  { R600::T110_Z },
  { R600::T111_Z },
  { R600::T112_Z },
  { R600::T113_Z },
  { R600::T114_Z },
  { R600::T115_Z },
  { R600::T116_Z },
  { R600::T117_Z },
  { R600::T118_Z },
  { R600::T119_Z },
  { R600::T120_Z },
  { R600::T121_Z },
  { R600::T122_Z },
  { R600::T123_Z },
  { R600::T124_Z },
  { R600::T125_Z },
  { R600::T126_Z },
  { R600::T127_Z },
  { R600::KC0_128_W },
  { R600::KC0_129_W },
  { R600::KC0_130_W },
  { R600::KC0_131_W },
  { R600::KC0_132_W },
  { R600::KC0_133_W },
  { R600::KC0_134_W },
  { R600::KC0_135_W },
  { R600::KC0_136_W },
  { R600::KC0_137_W },
  { R600::KC0_138_W },
  { R600::KC0_139_W },
  { R600::KC0_140_W },
  { R600::KC0_141_W },
  { R600::KC0_142_W },
  { R600::KC0_143_W },
  { R600::KC0_144_W },
  { R600::KC0_145_W },
  { R600::KC0_146_W },
  { R600::KC0_147_W },
  { R600::KC0_148_W },
  { R600::KC0_149_W },
  { R600::KC0_150_W },
  { R600::KC0_151_W },
  { R600::KC0_152_W },
  { R600::KC0_153_W },
  { R600::KC0_154_W },
  { R600::KC0_155_W },
  { R600::KC0_156_W },
  { R600::KC0_157_W },
  { R600::KC0_158_W },
  { R600::KC0_159_W },
  { R600::KC1_160_W },
  { R600::KC1_161_W },
  { R600::KC1_162_W },
  { R600::KC1_163_W },
  { R600::KC1_164_W },
  { R600::KC1_165_W },
  { R600::KC1_166_W },
  { R600::KC1_167_W },
  { R600::KC1_168_W },
  { R600::KC1_169_W },
  { R600::KC1_170_W },
  { R600::KC1_171_W },
  { R600::KC1_172_W },
  { R600::KC1_173_W },
  { R600::KC1_174_W },
  { R600::KC1_175_W },
  { R600::KC1_176_W },
  { R600::KC1_177_W },
  { R600::KC1_178_W },
  { R600::KC1_179_W },
  { R600::KC1_180_W },
  { R600::KC1_181_W },
  { R600::KC1_182_W },
  { R600::KC1_183_W },
  { R600::KC1_184_W },
  { R600::KC1_185_W },
  { R600::KC1_186_W },
  { R600::KC1_187_W },
  { R600::KC1_188_W },
  { R600::KC1_189_W },
  { R600::KC1_190_W },
  { R600::KC1_191_W },
  { R600::KC0_128_X },
  { R600::KC0_129_X },
  { R600::KC0_130_X },
  { R600::KC0_131_X },
  { R600::KC0_132_X },
  { R600::KC0_133_X },
  { R600::KC0_134_X },
  { R600::KC0_135_X },
  { R600::KC0_136_X },
  { R600::KC0_137_X },
  { R600::KC0_138_X },
  { R600::KC0_139_X },
  { R600::KC0_140_X },
  { R600::KC0_141_X },
  { R600::KC0_142_X },
  { R600::KC0_143_X },
  { R600::KC0_144_X },
  { R600::KC0_145_X },
  { R600::KC0_146_X },
  { R600::KC0_147_X },
  { R600::KC0_148_X },
  { R600::KC0_149_X },
  { R600::KC0_150_X },
  { R600::KC0_151_X },
  { R600::KC0_152_X },
  { R600::KC0_153_X },
  { R600::KC0_154_X },
  { R600::KC0_155_X },
  { R600::KC0_156_X },
  { R600::KC0_157_X },
  { R600::KC0_158_X },
  { R600::KC0_159_X },
  { R600::KC1_160_X },
  { R600::KC1_161_X },
  { R600::KC1_162_X },
  { R600::KC1_163_X },
  { R600::KC1_164_X },
  { R600::KC1_165_X },
  { R600::KC1_166_X },
  { R600::KC1_167_X },
  { R600::KC1_168_X },
  { R600::KC1_169_X },
  { R600::KC1_170_X },
  { R600::KC1_171_X },
  { R600::KC1_172_X },
  { R600::KC1_173_X },
  { R600::KC1_174_X },
  { R600::KC1_175_X },
  { R600::KC1_176_X },
  { R600::KC1_177_X },
  { R600::KC1_178_X },
  { R600::KC1_179_X },
  { R600::KC1_180_X },
  { R600::KC1_181_X },
  { R600::KC1_182_X },
  { R600::KC1_183_X },
  { R600::KC1_184_X },
  { R600::KC1_185_X },
  { R600::KC1_186_X },
  { R600::KC1_187_X },
  { R600::KC1_188_X },
  { R600::KC1_189_X },
  { R600::KC1_190_X },
  { R600::KC1_191_X },
  { R600::KC0_128_Y },
  { R600::KC0_128_Z },
  { R600::KC0_129_Y },
  { R600::KC0_129_Z },
  { R600::KC0_130_Y },
  { R600::KC0_130_Z },
  { R600::KC0_131_Y },
  { R600::KC0_131_Z },
  { R600::KC0_132_Y },
  { R600::KC0_132_Z },
  { R600::KC0_133_Y },
  { R600::KC0_133_Z },
  { R600::KC0_134_Y },
  { R600::KC0_134_Z },
  { R600::KC0_135_Y },
  { R600::KC0_135_Z },
  { R600::KC0_136_Y },
  { R600::KC0_136_Z },
  { R600::KC0_137_Y },
  { R600::KC0_137_Z },
  { R600::KC0_138_Y },
  { R600::KC0_138_Z },
  { R600::KC0_139_Y },
  { R600::KC0_139_Z },
  { R600::KC0_140_Y },
  { R600::KC0_140_Z },
  { R600::KC0_141_Y },
  { R600::KC0_141_Z },
  { R600::KC0_142_Y },
  { R600::KC0_142_Z },
  { R600::KC0_143_Y },
  { R600::KC0_143_Z },
  { R600::KC0_144_Y },
  { R600::KC0_144_Z },
  { R600::KC0_145_Y },
  { R600::KC0_145_Z },
  { R600::KC0_146_Y },
  { R600::KC0_146_Z },
  { R600::KC0_147_Y },
  { R600::KC0_147_Z },
  { R600::KC0_148_Y },
  { R600::KC0_148_Z },
  { R600::KC0_149_Y },
  { R600::KC0_149_Z },
  { R600::KC0_150_Y },
  { R600::KC0_150_Z },
  { R600::KC0_151_Y },
  { R600::KC0_151_Z },
  { R600::KC0_152_Y },
  { R600::KC0_152_Z },
  { R600::KC0_153_Y },
  { R600::KC0_153_Z },
  { R600::KC0_154_Y },
  { R600::KC0_154_Z },
  { R600::KC0_155_Y },
  { R600::KC0_155_Z },
  { R600::KC0_156_Y },
  { R600::KC0_156_Z },
  { R600::KC0_157_Y },
  { R600::KC0_157_Z },
  { R600::KC0_158_Y },
  { R600::KC0_158_Z },
  { R600::KC0_159_Y },
  { R600::KC0_159_Z },
  { R600::KC1_160_Y },
  { R600::KC1_160_Z },
  { R600::KC1_161_Y },
  { R600::KC1_161_Z },
  { R600::KC1_162_Y },
  { R600::KC1_162_Z },
  { R600::KC1_163_Y },
  { R600::KC1_163_Z },
  { R600::KC1_164_Y },
  { R600::KC1_164_Z },
  { R600::KC1_165_Y },
  { R600::KC1_165_Z },
  { R600::KC1_166_Y },
  { R600::KC1_166_Z },
  { R600::KC1_167_Y },
  { R600::KC1_167_Z },
  { R600::KC1_168_Y },
  { R600::KC1_168_Z },
  { R600::KC1_169_Y },
  { R600::KC1_169_Z },
  { R600::KC1_170_Y },
  { R600::KC1_170_Z },
  { R600::KC1_171_Y },
  { R600::KC1_171_Z },
  { R600::KC1_172_Y },
  { R600::KC1_172_Z },
  { R600::KC1_173_Y },
  { R600::KC1_173_Z },
  { R600::KC1_174_Y },
  { R600::KC1_174_Z },
  { R600::KC1_175_Y },
  { R600::KC1_175_Z },
  { R600::KC1_176_Y },
  { R600::KC1_176_Z },
  { R600::KC1_177_Y },
  { R600::KC1_177_Z },
  { R600::KC1_178_Y },
  { R600::KC1_178_Z },
  { R600::KC1_179_Y },
  { R600::KC1_179_Z },
  { R600::KC1_180_Y },
  { R600::KC1_180_Z },
  { R600::KC1_181_Y },
  { R600::KC1_181_Z },
  { R600::KC1_182_Y },
  { R600::KC1_182_Z },
  { R600::KC1_183_Y },
  { R600::KC1_183_Z },
  { R600::KC1_184_Y },
  { R600::KC1_184_Z },
  { R600::KC1_185_Y },
  { R600::KC1_185_Z },
  { R600::KC1_186_Y },
  { R600::KC1_186_Z },
  { R600::KC1_187_Y },
  { R600::KC1_187_Z },
  { R600::KC1_188_Y },
  { R600::KC1_188_Z },
  { R600::KC1_189_Y },
  { R600::KC1_189_Z },
  { R600::KC1_190_Y },
  { R600::KC1_190_Z },
  { R600::KC1_191_Y },
  { R600::KC1_191_Z },
};

namespace {     // Register classes...
  // R600_Reg32 Register Class...
  const MCPhysReg R600_Reg32[] = {
    R600::T0_X, R600::T0_Y, R600::T0_Z, R600::T0_W, R600::T1_X, R600::T1_Y, R600::T1_Z, R600::T1_W, R600::T2_X, R600::T2_Y, R600::T2_Z, R600::T2_W, R600::T3_X, R600::T3_Y, R600::T3_Z, R600::T3_W, R600::T4_X, R600::T4_Y, R600::T4_Z, R600::T4_W, R600::T5_X, R600::T5_Y, R600::T5_Z, R600::T5_W, R600::T6_X, R600::T6_Y, R600::T6_Z, R600::T6_W, R600::T7_X, R600::T7_Y, R600::T7_Z, R600::T7_W, R600::T8_X, R600::T8_Y, R600::T8_Z, R600::T8_W, R600::T9_X, R600::T9_Y, R600::T9_Z, R600::T9_W, R600::T10_X, R600::T10_Y, R600::T10_Z, R600::T10_W, R600::T11_X, R600::T11_Y, R600::T11_Z, R600::T11_W, R600::T12_X, R600::T12_Y, R600::T12_Z, R600::T12_W, R600::T13_X, R600::T13_Y, R600::T13_Z, R600::T13_W, R600::T14_X, R600::T14_Y, R600::T14_Z, R600::T14_W, R600::T15_X, R600::T15_Y, R600::T15_Z, R600::T15_W, R600::T16_X, R600::T16_Y, R600::T16_Z, R600::T16_W, R600::T17_X, R600::T17_Y, R600::T17_Z, R600::T17_W, R600::T18_X, R600::T18_Y, R600::T18_Z, R600::T18_W, R600::T19_X, R600::T19_Y, R600::T19_Z, R600::T19_W, R600::T20_X, R600::T20_Y, R600::T20_Z, R600::T20_W, R600::T21_X, R600::T21_Y, R600::T21_Z, R600::T21_W, R600::T22_X, R600::T22_Y, R600::T22_Z, R600::T22_W, R600::T23_X, R600::T23_Y, R600::T23_Z, R600::T23_W, R600::T24_X, R600::T24_Y, R600::T24_Z, R600::T24_W, R600::T25_X, R600::T25_Y, R600::T25_Z, R600::T25_W, R600::T26_X, R600::T26_Y, R600::T26_Z, R600::T26_W, R600::T27_X, R600::T27_Y, R600::T27_Z, R600::T27_W, R600::T28_X, R600::T28_Y, R600::T28_Z, R600::T28_W, R600::T29_X, R600::T29_Y, R600::T29_Z, R600::T29_W, R600::T30_X, R600::T30_Y, R600::T30_Z, R600::T30_W, R600::T31_X, R600::T31_Y, R600::T31_Z, R600::T31_W, R600::T32_X, R600::T32_Y, R600::T32_Z, R600::T32_W, R600::T33_X, R600::T33_Y, R600::T33_Z, R600::T33_W, R600::T34_X, R600::T34_Y, R600::T34_Z, R600::T34_W, R600::T35_X, R600::T35_Y, R600::T35_Z, R600::T35_W, R600::T36_X, R600::T36_Y, R600::T36_Z, R600::T36_W, R600::T37_X, R600::T37_Y, R600::T37_Z, R600::T37_W, R600::T38_X, R600::T38_Y, R600::T38_Z, R600::T38_W, R600::T39_X, R600::T39_Y, R600::T39_Z, R600::T39_W, R600::T40_X, R600::T40_Y, R600::T40_Z, R600::T40_W, R600::T41_X, R600::T41_Y, R600::T41_Z, R600::T41_W, R600::T42_X, R600::T42_Y, R600::T42_Z, R600::T42_W, R600::T43_X, R600::T43_Y, R600::T43_Z, R600::T43_W, R600::T44_X, R600::T44_Y, R600::T44_Z, R600::T44_W, R600::T45_X, R600::T45_Y, R600::T45_Z, R600::T45_W, R600::T46_X, R600::T46_Y, R600::T46_Z, R600::T46_W, R600::T47_X, R600::T47_Y, R600::T47_Z, R600::T47_W, R600::T48_X, R600::T48_Y, R600::T48_Z, R600::T48_W, R600::T49_X, R600::T49_Y, R600::T49_Z, R600::T49_W, R600::T50_X, R600::T50_Y, R600::T50_Z, R600::T50_W, R600::T51_X, R600::T51_Y, R600::T51_Z, R600::T51_W, R600::T52_X, R600::T52_Y, R600::T52_Z, R600::T52_W, R600::T53_X, R600::T53_Y, R600::T53_Z, R600::T53_W, R600::T54_X, R600::T54_Y, R600::T54_Z, R600::T54_W, R600::T55_X, R600::T55_Y, R600::T55_Z, R600::T55_W, R600::T56_X, R600::T56_Y, R600::T56_Z, R600::T56_W, R600::T57_X, R600::T57_Y, R600::T57_Z, R600::T57_W, R600::T58_X, R600::T58_Y, R600::T58_Z, R600::T58_W, R600::T59_X, R600::T59_Y, R600::T59_Z, R600::T59_W, R600::T60_X, R600::T60_Y, R600::T60_Z, R600::T60_W, R600::T61_X, R600::T61_Y, R600::T61_Z, R600::T61_W, R600::T62_X, R600::T62_Y, R600::T62_Z, R600::T62_W, R600::T63_X, R600::T63_Y, R600::T63_Z, R600::T63_W, R600::T64_X, R600::T64_Y, R600::T64_Z, R600::T64_W, R600::T65_X, R600::T65_Y, R600::T65_Z, R600::T65_W, R600::T66_X, R600::T66_Y, R600::T66_Z, R600::T66_W, R600::T67_X, R600::T67_Y, R600::T67_Z, R600::T67_W, R600::T68_X, R600::T68_Y, R600::T68_Z, R600::T68_W, R600::T69_X, R600::T69_Y, R600::T69_Z, R600::T69_W, R600::T70_X, R600::T70_Y, R600::T70_Z, R600::T70_W, R600::T71_X, R600::T71_Y, R600::T71_Z, R600::T71_W, R600::T72_X, R600::T72_Y, R600::T72_Z, R600::T72_W, R600::T73_X, R600::T73_Y, R600::T73_Z, R600::T73_W, R600::T74_X, R600::T74_Y, R600::T74_Z, R600::T74_W, R600::T75_X, R600::T75_Y, R600::T75_Z, R600::T75_W, R600::T76_X, R600::T76_Y, R600::T76_Z, R600::T76_W, R600::T77_X, R600::T77_Y, R600::T77_Z, R600::T77_W, R600::T78_X, R600::T78_Y, R600::T78_Z, R600::T78_W, R600::T79_X, R600::T79_Y, R600::T79_Z, R600::T79_W, R600::T80_X, R600::T80_Y, R600::T80_Z, R600::T80_W, R600::T81_X, R600::T81_Y, R600::T81_Z, R600::T81_W, R600::T82_X, R600::T82_Y, R600::T82_Z, R600::T82_W, R600::T83_X, R600::T83_Y, R600::T83_Z, R600::T83_W, R600::T84_X, R600::T84_Y, R600::T84_Z, R600::T84_W, R600::T85_X, R600::T85_Y, R600::T85_Z, R600::T85_W, R600::T86_X, R600::T86_Y, R600::T86_Z, R600::T86_W, R600::T87_X, R600::T87_Y, R600::T87_Z, R600::T87_W, R600::T88_X, R600::T88_Y, R600::T88_Z, R600::T88_W, R600::T89_X, R600::T89_Y, R600::T89_Z, R600::T89_W, R600::T90_X, R600::T90_Y, R600::T90_Z, R600::T90_W, R600::T91_X, R600::T91_Y, R600::T91_Z, R600::T91_W, R600::T92_X, R600::T92_Y, R600::T92_Z, R600::T92_W, R600::T93_X, R600::T93_Y, R600::T93_Z, R600::T93_W, R600::T94_X, R600::T94_Y, R600::T94_Z, R600::T94_W, R600::T95_X, R600::T95_Y, R600::T95_Z, R600::T95_W, R600::T96_X, R600::T96_Y, R600::T96_Z, R600::T96_W, R600::T97_X, R600::T97_Y, R600::T97_Z, R600::T97_W, R600::T98_X, R600::T98_Y, R600::T98_Z, R600::T98_W, R600::T99_X, R600::T99_Y, R600::T99_Z, R600::T99_W, R600::T100_X, R600::T100_Y, R600::T100_Z, R600::T100_W, R600::T101_X, R600::T101_Y, R600::T101_Z, R600::T101_W, R600::T102_X, R600::T102_Y, R600::T102_Z, R600::T102_W, R600::T103_X, R600::T103_Y, R600::T103_Z, R600::T103_W, R600::T104_X, R600::T104_Y, R600::T104_Z, R600::T104_W, R600::T105_X, R600::T105_Y, R600::T105_Z, R600::T105_W, R600::T106_X, R600::T106_Y, R600::T106_Z, R600::T106_W, R600::T107_X, R600::T107_Y, R600::T107_Z, R600::T107_W, R600::T108_X, R600::T108_Y, R600::T108_Z, R600::T108_W, R600::T109_X, R600::T109_Y, R600::T109_Z, R600::T109_W, R600::T110_X, R600::T110_Y, R600::T110_Z, R600::T110_W, R600::T111_X, R600::T111_Y, R600::T111_Z, R600::T111_W, R600::T112_X, R600::T112_Y, R600::T112_Z, R600::T112_W, R600::T113_X, R600::T113_Y, R600::T113_Z, R600::T113_W, R600::T114_X, R600::T114_Y, R600::T114_Z, R600::T114_W, R600::T115_X, R600::T115_Y, R600::T115_Z, R600::T115_W, R600::T116_X, R600::T116_Y, R600::T116_Z, R600::T116_W, R600::T117_X, R600::T117_Y, R600::T117_Z, R600::T117_W, R600::T118_X, R600::T118_Y, R600::T118_Z, R600::T118_W, R600::T119_X, R600::T119_Y, R600::T119_Z, R600::T119_W, R600::T120_X, R600::T120_Y, R600::T120_Z, R600::T120_W, R600::T121_X, R600::T121_Y, R600::T121_Z, R600::T121_W, R600::T122_X, R600::T122_Y, R600::T122_Z, R600::T122_W, R600::T123_X, R600::T123_Y, R600::T123_Z, R600::T123_W, R600::T124_X, R600::T124_Y, R600::T124_Z, R600::T124_W, R600::T125_X, R600::T125_Y, R600::T125_Z, R600::T125_W, R600::T126_X, R600::T126_Y, R600::T126_Z, R600::T126_W, R600::T127_X, R600::T127_Y, R600::T127_Z, R600::T127_W, R600::AR_X, R600::ArrayBase448, R600::ArrayBase449, R600::ArrayBase450, R600::ArrayBase451, R600::ArrayBase452, R600::ArrayBase453, R600::ArrayBase454, R600::ArrayBase455, R600::ArrayBase456, R600::ArrayBase457, R600::ArrayBase458, R600::ArrayBase459, R600::ArrayBase460, R600::ArrayBase461, R600::ArrayBase462, R600::ArrayBase463, R600::ArrayBase464, R600::ArrayBase465, R600::ArrayBase466, R600::ArrayBase467, R600::ArrayBase468, R600::ArrayBase469, R600::ArrayBase470, R600::ArrayBase471, R600::ArrayBase472, R600::ArrayBase473, R600::ArrayBase474, R600::ArrayBase475, R600::ArrayBase476, R600::ArrayBase477, R600::ArrayBase478, R600::ArrayBase479, R600::ArrayBase480, R600::Addr0_X, R600::Addr1_X, R600::Addr2_X, R600::Addr3_X, R600::Addr4_X, R600::Addr5_X, R600::Addr6_X, R600::Addr7_X, R600::Addr8_X, R600::Addr9_X, R600::Addr10_X, R600::Addr11_X, R600::Addr12_X, R600::Addr13_X, R600::Addr14_X, R600::Addr15_X, R600::Addr16_X, R600::Addr17_X, R600::Addr18_X, R600::Addr19_X, R600::Addr20_X, R600::Addr21_X, R600::Addr22_X, R600::Addr23_X, R600::Addr24_X, R600::Addr25_X, R600::Addr26_X, R600::Addr27_X, R600::Addr28_X, R600::Addr29_X, R600::Addr30_X, R600::Addr31_X, R600::Addr32_X, R600::Addr33_X, R600::Addr34_X, R600::Addr35_X, R600::Addr36_X, R600::Addr37_X, R600::Addr38_X, R600::Addr39_X, R600::Addr40_X, R600::Addr41_X, R600::Addr42_X, R600::Addr43_X, R600::Addr44_X, R600::Addr45_X, R600::Addr46_X, R600::Addr47_X, R600::Addr48_X, R600::Addr49_X, R600::Addr50_X, R600::Addr51_X, R600::Addr52_X, R600::Addr53_X, R600::Addr54_X, R600::Addr55_X, R600::Addr56_X, R600::Addr57_X, R600::Addr58_X, R600::Addr59_X, R600::Addr60_X, R600::Addr61_X, R600::Addr62_X, R600::Addr63_X, R600::Addr64_X, R600::Addr65_X, R600::Addr66_X, R600::Addr67_X, R600::Addr68_X, R600::Addr69_X, R600::Addr70_X, R600::Addr71_X, R600::Addr72_X, R600::Addr73_X, R600::Addr74_X, R600::Addr75_X, R600::Addr76_X, R600::Addr77_X, R600::Addr78_X, R600::Addr79_X, R600::Addr80_X, R600::Addr81_X, R600::Addr82_X, R600::Addr83_X, R600::Addr84_X, R600::Addr85_X, R600::Addr86_X, R600::Addr87_X, R600::Addr88_X, R600::Addr89_X, R600::Addr90_X, R600::Addr91_X, R600::Addr92_X, R600::Addr93_X, R600::Addr94_X, R600::Addr95_X, R600::Addr96_X, R600::Addr97_X, R600::Addr98_X, R600::Addr99_X, R600::Addr100_X, R600::Addr101_X, R600::Addr102_X, R600::Addr103_X, R600::Addr104_X, R600::Addr105_X, R600::Addr106_X, R600::Addr107_X, R600::Addr108_X, R600::Addr109_X, R600::Addr110_X, R600::Addr111_X, R600::Addr112_X, R600::Addr113_X, R600::Addr114_X, R600::Addr115_X, R600::Addr116_X, R600::Addr117_X, R600::Addr118_X, R600::Addr119_X, R600::Addr120_X, R600::Addr121_X, R600::Addr122_X, R600::Addr123_X, R600::Addr124_X, R600::Addr125_X, R600::Addr126_X, R600::Addr127_X, R600::KC0_128_X, R600::KC0_128_Y, R600::KC0_128_Z, R600::KC0_128_W, R600::KC0_129_X, R600::KC0_129_Y, R600::KC0_129_Z, R600::KC0_129_W, R600::KC0_130_X, R600::KC0_130_Y, R600::KC0_130_Z, R600::KC0_130_W, R600::KC0_131_X, R600::KC0_131_Y, R600::KC0_131_Z, R600::KC0_131_W, R600::KC0_132_X, R600::KC0_132_Y, R600::KC0_132_Z, R600::KC0_132_W, R600::KC0_133_X, R600::KC0_133_Y, R600::KC0_133_Z, R600::KC0_133_W, R600::KC0_134_X, R600::KC0_134_Y, R600::KC0_134_Z, R600::KC0_134_W, R600::KC0_135_X, R600::KC0_135_Y, R600::KC0_135_Z, R600::KC0_135_W, R600::KC0_136_X, R600::KC0_136_Y, R600::KC0_136_Z, R600::KC0_136_W, R600::KC0_137_X, R600::KC0_137_Y, R600::KC0_137_Z, R600::KC0_137_W, R600::KC0_138_X, R600::KC0_138_Y, R600::KC0_138_Z, R600::KC0_138_W, R600::KC0_139_X, R600::KC0_139_Y, R600::KC0_139_Z, R600::KC0_139_W, R600::KC0_140_X, R600::KC0_140_Y, R600::KC0_140_Z, R600::KC0_140_W, R600::KC0_141_X, R600::KC0_141_Y, R600::KC0_141_Z, R600::KC0_141_W, R600::KC0_142_X, R600::KC0_142_Y, R600::KC0_142_Z, R600::KC0_142_W, R600::KC0_143_X, R600::KC0_143_Y, R600::KC0_143_Z, R600::KC0_143_W, R600::KC0_144_X, R600::KC0_144_Y, R600::KC0_144_Z, R600::KC0_144_W, R600::KC0_145_X, R600::KC0_145_Y, R600::KC0_145_Z, R600::KC0_145_W, R600::KC0_146_X, R600::KC0_146_Y, R600::KC0_146_Z, R600::KC0_146_W, R600::KC0_147_X, R600::KC0_147_Y, R600::KC0_147_Z, R600::KC0_147_W, R600::KC0_148_X, R600::KC0_148_Y, R600::KC0_148_Z, R600::KC0_148_W, R600::KC0_149_X, R600::KC0_149_Y, R600::KC0_149_Z, R600::KC0_149_W, R600::KC0_150_X, R600::KC0_150_Y, R600::KC0_150_Z, R600::KC0_150_W, R600::KC0_151_X, R600::KC0_151_Y, R600::KC0_151_Z, R600::KC0_151_W, R600::KC0_152_X, R600::KC0_152_Y, R600::KC0_152_Z, R600::KC0_152_W, R600::KC0_153_X, R600::KC0_153_Y, R600::KC0_153_Z, R600::KC0_153_W, R600::KC0_154_X, R600::KC0_154_Y, R600::KC0_154_Z, R600::KC0_154_W, R600::KC0_155_X, R600::KC0_155_Y, R600::KC0_155_Z, R600::KC0_155_W, R600::KC0_156_X, R600::KC0_156_Y, R600::KC0_156_Z, R600::KC0_156_W, R600::KC0_157_X, R600::KC0_157_Y, R600::KC0_157_Z, R600::KC0_157_W, R600::KC0_158_X, R600::KC0_158_Y, R600::KC0_158_Z, R600::KC0_158_W, R600::KC0_159_X, R600::KC0_159_Y, R600::KC0_159_Z, R600::KC0_159_W, R600::KC1_160_X, R600::KC1_160_Y, R600::KC1_160_Z, R600::KC1_160_W, R600::KC1_161_X, R600::KC1_161_Y, R600::KC1_161_Z, R600::KC1_161_W, R600::KC1_162_X, R600::KC1_162_Y, R600::KC1_162_Z, R600::KC1_162_W, R600::KC1_163_X, R600::KC1_163_Y, R600::KC1_163_Z, R600::KC1_163_W, R600::KC1_164_X, R600::KC1_164_Y, R600::KC1_164_Z, R600::KC1_164_W, R600::KC1_165_X, R600::KC1_165_Y, R600::KC1_165_Z, R600::KC1_165_W, R600::KC1_166_X, R600::KC1_166_Y, R600::KC1_166_Z, R600::KC1_166_W, R600::KC1_167_X, R600::KC1_167_Y, R600::KC1_167_Z, R600::KC1_167_W, R600::KC1_168_X, R600::KC1_168_Y, R600::KC1_168_Z, R600::KC1_168_W, R600::KC1_169_X, R600::KC1_169_Y, R600::KC1_169_Z, R600::KC1_169_W, R600::KC1_170_X, R600::KC1_170_Y, R600::KC1_170_Z, R600::KC1_170_W, R600::KC1_171_X, R600::KC1_171_Y, R600::KC1_171_Z, R600::KC1_171_W, R600::KC1_172_X, R600::KC1_172_Y, R600::KC1_172_Z, R600::KC1_172_W, R600::KC1_173_X, R600::KC1_173_Y, R600::KC1_173_Z, R600::KC1_173_W, R600::KC1_174_X, R600::KC1_174_Y, R600::KC1_174_Z, R600::KC1_174_W, R600::KC1_175_X, R600::KC1_175_Y, R600::KC1_175_Z, R600::KC1_175_W, R600::KC1_176_X, R600::KC1_176_Y, R600::KC1_176_Z, R600::KC1_176_W, R600::KC1_177_X, R600::KC1_177_Y, R600::KC1_177_Z, R600::KC1_177_W, R600::KC1_178_X, R600::KC1_178_Y, R600::KC1_178_Z, R600::KC1_178_W, R600::KC1_179_X, R600::KC1_179_Y, R600::KC1_179_Z, R600::KC1_179_W, R600::KC1_180_X, R600::KC1_180_Y, R600::KC1_180_Z, R600::KC1_180_W, R600::KC1_181_X, R600::KC1_181_Y, R600::KC1_181_Z, R600::KC1_181_W, R600::KC1_182_X, R600::KC1_182_Y, R600::KC1_182_Z, R600::KC1_182_W, R600::KC1_183_X, R600::KC1_183_Y, R600::KC1_183_Z, R600::KC1_183_W, R600::KC1_184_X, R600::KC1_184_Y, R600::KC1_184_Z, R600::KC1_184_W, R600::KC1_185_X, R600::KC1_185_Y, R600::KC1_185_Z, R600::KC1_185_W, R600::KC1_186_X, R600::KC1_186_Y, R600::KC1_186_Z, R600::KC1_186_W, R600::KC1_187_X, R600::KC1_187_Y, R600::KC1_187_Z, R600::KC1_187_W, R600::KC1_188_X, R600::KC1_188_Y, R600::KC1_188_Z, R600::KC1_188_W, R600::KC1_189_X, R600::KC1_189_Y, R600::KC1_189_Z, R600::KC1_189_W, R600::KC1_190_X, R600::KC1_190_Y, R600::KC1_190_Z, R600::KC1_190_W, R600::KC1_191_X, R600::KC1_191_Y, R600::KC1_191_Z, R600::KC1_191_W, R600::ZERO, R600::HALF, R600::ONE, R600::ONE_INT, R600::PV_X, R600::ALU_LITERAL_X, R600::NEG_ONE, R600::NEG_HALF, R600::ALU_CONST, R600::ALU_PARAM, R600::OQAP, R600::INDIRECT_BASE_ADDR, 
  };

  // R600_Reg32 Bit set.
  const uint8_t R600_Reg32Bits[] = {
    0xca, 0xf3, 0x02, 0xe4, 0xff, 0xff, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x00, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 
  };

  // R600_TReg32 Register Class...
  const MCPhysReg R600_TReg32[] = {
    R600::T0_X, R600::T0_Y, R600::T0_Z, R600::T0_W, R600::T1_X, R600::T1_Y, R600::T1_Z, R600::T1_W, R600::T2_X, R600::T2_Y, R600::T2_Z, R600::T2_W, R600::T3_X, R600::T3_Y, R600::T3_Z, R600::T3_W, R600::T4_X, R600::T4_Y, R600::T4_Z, R600::T4_W, R600::T5_X, R600::T5_Y, R600::T5_Z, R600::T5_W, R600::T6_X, R600::T6_Y, R600::T6_Z, R600::T6_W, R600::T7_X, R600::T7_Y, R600::T7_Z, R600::T7_W, R600::T8_X, R600::T8_Y, R600::T8_Z, R600::T8_W, R600::T9_X, R600::T9_Y, R600::T9_Z, R600::T9_W, R600::T10_X, R600::T10_Y, R600::T10_Z, R600::T10_W, R600::T11_X, R600::T11_Y, R600::T11_Z, R600::T11_W, R600::T12_X, R600::T12_Y, R600::T12_Z, R600::T12_W, R600::T13_X, R600::T13_Y, R600::T13_Z, R600::T13_W, R600::T14_X, R600::T14_Y, R600::T14_Z, R600::T14_W, R600::T15_X, R600::T15_Y, R600::T15_Z, R600::T15_W, R600::T16_X, R600::T16_Y, R600::T16_Z, R600::T16_W, R600::T17_X, R600::T17_Y, R600::T17_Z, R600::T17_W, R600::T18_X, R600::T18_Y, R600::T18_Z, R600::T18_W, R600::T19_X, R600::T19_Y, R600::T19_Z, R600::T19_W, R600::T20_X, R600::T20_Y, R600::T20_Z, R600::T20_W, R600::T21_X, R600::T21_Y, R600::T21_Z, R600::T21_W, R600::T22_X, R600::T22_Y, R600::T22_Z, R600::T22_W, R600::T23_X, R600::T23_Y, R600::T23_Z, R600::T23_W, R600::T24_X, R600::T24_Y, R600::T24_Z, R600::T24_W, R600::T25_X, R600::T25_Y, R600::T25_Z, R600::T25_W, R600::T26_X, R600::T26_Y, R600::T26_Z, R600::T26_W, R600::T27_X, R600::T27_Y, R600::T27_Z, R600::T27_W, R600::T28_X, R600::T28_Y, R600::T28_Z, R600::T28_W, R600::T29_X, R600::T29_Y, R600::T29_Z, R600::T29_W, R600::T30_X, R600::T30_Y, R600::T30_Z, R600::T30_W, R600::T31_X, R600::T31_Y, R600::T31_Z, R600::T31_W, R600::T32_X, R600::T32_Y, R600::T32_Z, R600::T32_W, R600::T33_X, R600::T33_Y, R600::T33_Z, R600::T33_W, R600::T34_X, R600::T34_Y, R600::T34_Z, R600::T34_W, R600::T35_X, R600::T35_Y, R600::T35_Z, R600::T35_W, R600::T36_X, R600::T36_Y, R600::T36_Z, R600::T36_W, R600::T37_X, R600::T37_Y, R600::T37_Z, R600::T37_W, R600::T38_X, R600::T38_Y, R600::T38_Z, R600::T38_W, R600::T39_X, R600::T39_Y, R600::T39_Z, R600::T39_W, R600::T40_X, R600::T40_Y, R600::T40_Z, R600::T40_W, R600::T41_X, R600::T41_Y, R600::T41_Z, R600::T41_W, R600::T42_X, R600::T42_Y, R600::T42_Z, R600::T42_W, R600::T43_X, R600::T43_Y, R600::T43_Z, R600::T43_W, R600::T44_X, R600::T44_Y, R600::T44_Z, R600::T44_W, R600::T45_X, R600::T45_Y, R600::T45_Z, R600::T45_W, R600::T46_X, R600::T46_Y, R600::T46_Z, R600::T46_W, R600::T47_X, R600::T47_Y, R600::T47_Z, R600::T47_W, R600::T48_X, R600::T48_Y, R600::T48_Z, R600::T48_W, R600::T49_X, R600::T49_Y, R600::T49_Z, R600::T49_W, R600::T50_X, R600::T50_Y, R600::T50_Z, R600::T50_W, R600::T51_X, R600::T51_Y, R600::T51_Z, R600::T51_W, R600::T52_X, R600::T52_Y, R600::T52_Z, R600::T52_W, R600::T53_X, R600::T53_Y, R600::T53_Z, R600::T53_W, R600::T54_X, R600::T54_Y, R600::T54_Z, R600::T54_W, R600::T55_X, R600::T55_Y, R600::T55_Z, R600::T55_W, R600::T56_X, R600::T56_Y, R600::T56_Z, R600::T56_W, R600::T57_X, R600::T57_Y, R600::T57_Z, R600::T57_W, R600::T58_X, R600::T58_Y, R600::T58_Z, R600::T58_W, R600::T59_X, R600::T59_Y, R600::T59_Z, R600::T59_W, R600::T60_X, R600::T60_Y, R600::T60_Z, R600::T60_W, R600::T61_X, R600::T61_Y, R600::T61_Z, R600::T61_W, R600::T62_X, R600::T62_Y, R600::T62_Z, R600::T62_W, R600::T63_X, R600::T63_Y, R600::T63_Z, R600::T63_W, R600::T64_X, R600::T64_Y, R600::T64_Z, R600::T64_W, R600::T65_X, R600::T65_Y, R600::T65_Z, R600::T65_W, R600::T66_X, R600::T66_Y, R600::T66_Z, R600::T66_W, R600::T67_X, R600::T67_Y, R600::T67_Z, R600::T67_W, R600::T68_X, R600::T68_Y, R600::T68_Z, R600::T68_W, R600::T69_X, R600::T69_Y, R600::T69_Z, R600::T69_W, R600::T70_X, R600::T70_Y, R600::T70_Z, R600::T70_W, R600::T71_X, R600::T71_Y, R600::T71_Z, R600::T71_W, R600::T72_X, R600::T72_Y, R600::T72_Z, R600::T72_W, R600::T73_X, R600::T73_Y, R600::T73_Z, R600::T73_W, R600::T74_X, R600::T74_Y, R600::T74_Z, R600::T74_W, R600::T75_X, R600::T75_Y, R600::T75_Z, R600::T75_W, R600::T76_X, R600::T76_Y, R600::T76_Z, R600::T76_W, R600::T77_X, R600::T77_Y, R600::T77_Z, R600::T77_W, R600::T78_X, R600::T78_Y, R600::T78_Z, R600::T78_W, R600::T79_X, R600::T79_Y, R600::T79_Z, R600::T79_W, R600::T80_X, R600::T80_Y, R600::T80_Z, R600::T80_W, R600::T81_X, R600::T81_Y, R600::T81_Z, R600::T81_W, R600::T82_X, R600::T82_Y, R600::T82_Z, R600::T82_W, R600::T83_X, R600::T83_Y, R600::T83_Z, R600::T83_W, R600::T84_X, R600::T84_Y, R600::T84_Z, R600::T84_W, R600::T85_X, R600::T85_Y, R600::T85_Z, R600::T85_W, R600::T86_X, R600::T86_Y, R600::T86_Z, R600::T86_W, R600::T87_X, R600::T87_Y, R600::T87_Z, R600::T87_W, R600::T88_X, R600::T88_Y, R600::T88_Z, R600::T88_W, R600::T89_X, R600::T89_Y, R600::T89_Z, R600::T89_W, R600::T90_X, R600::T90_Y, R600::T90_Z, R600::T90_W, R600::T91_X, R600::T91_Y, R600::T91_Z, R600::T91_W, R600::T92_X, R600::T92_Y, R600::T92_Z, R600::T92_W, R600::T93_X, R600::T93_Y, R600::T93_Z, R600::T93_W, R600::T94_X, R600::T94_Y, R600::T94_Z, R600::T94_W, R600::T95_X, R600::T95_Y, R600::T95_Z, R600::T95_W, R600::T96_X, R600::T96_Y, R600::T96_Z, R600::T96_W, R600::T97_X, R600::T97_Y, R600::T97_Z, R600::T97_W, R600::T98_X, R600::T98_Y, R600::T98_Z, R600::T98_W, R600::T99_X, R600::T99_Y, R600::T99_Z, R600::T99_W, R600::T100_X, R600::T100_Y, R600::T100_Z, R600::T100_W, R600::T101_X, R600::T101_Y, R600::T101_Z, R600::T101_W, R600::T102_X, R600::T102_Y, R600::T102_Z, R600::T102_W, R600::T103_X, R600::T103_Y, R600::T103_Z, R600::T103_W, R600::T104_X, R600::T104_Y, R600::T104_Z, R600::T104_W, R600::T105_X, R600::T105_Y, R600::T105_Z, R600::T105_W, R600::T106_X, R600::T106_Y, R600::T106_Z, R600::T106_W, R600::T107_X, R600::T107_Y, R600::T107_Z, R600::T107_W, R600::T108_X, R600::T108_Y, R600::T108_Z, R600::T108_W, R600::T109_X, R600::T109_Y, R600::T109_Z, R600::T109_W, R600::T110_X, R600::T110_Y, R600::T110_Z, R600::T110_W, R600::T111_X, R600::T111_Y, R600::T111_Z, R600::T111_W, R600::T112_X, R600::T112_Y, R600::T112_Z, R600::T112_W, R600::T113_X, R600::T113_Y, R600::T113_Z, R600::T113_W, R600::T114_X, R600::T114_Y, R600::T114_Z, R600::T114_W, R600::T115_X, R600::T115_Y, R600::T115_Z, R600::T115_W, R600::T116_X, R600::T116_Y, R600::T116_Z, R600::T116_W, R600::T117_X, R600::T117_Y, R600::T117_Z, R600::T117_W, R600::T118_X, R600::T118_Y, R600::T118_Z, R600::T118_W, R600::T119_X, R600::T119_Y, R600::T119_Z, R600::T119_W, R600::T120_X, R600::T120_Y, R600::T120_Z, R600::T120_W, R600::T121_X, R600::T121_Y, R600::T121_Z, R600::T121_W, R600::T122_X, R600::T122_Y, R600::T122_Z, R600::T122_W, R600::T123_X, R600::T123_Y, R600::T123_Z, R600::T123_W, R600::T124_X, R600::T124_Y, R600::T124_Z, R600::T124_W, R600::T125_X, R600::T125_Y, R600::T125_Z, R600::T125_W, R600::T126_X, R600::T126_Y, R600::T126_Z, R600::T126_W, R600::T127_X, R600::T127_Y, R600::T127_Z, R600::T127_W, R600::AR_X, 
  };

  // R600_TReg32 Bit set.
  const uint8_t R600_TReg32Bits[] = {
    0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 
  };

  // R600_TReg32_X Register Class...
  const MCPhysReg R600_TReg32_X[] = {
    R600::T0_X, R600::T1_X, R600::T2_X, R600::T3_X, R600::T4_X, R600::T5_X, R600::T6_X, R600::T7_X, R600::T8_X, R600::T9_X, R600::T10_X, R600::T11_X, R600::T12_X, R600::T13_X, R600::T14_X, R600::T15_X, R600::T16_X, R600::T17_X, R600::T18_X, R600::T19_X, R600::T20_X, R600::T21_X, R600::T22_X, R600::T23_X, R600::T24_X, R600::T25_X, R600::T26_X, R600::T27_X, R600::T28_X, R600::T29_X, R600::T30_X, R600::T31_X, R600::T32_X, R600::T33_X, R600::T34_X, R600::T35_X, R600::T36_X, R600::T37_X, R600::T38_X, R600::T39_X, R600::T40_X, R600::T41_X, R600::T42_X, R600::T43_X, R600::T44_X, R600::T45_X, R600::T46_X, R600::T47_X, R600::T48_X, R600::T49_X, R600::T50_X, R600::T51_X, R600::T52_X, R600::T53_X, R600::T54_X, R600::T55_X, R600::T56_X, R600::T57_X, R600::T58_X, R600::T59_X, R600::T60_X, R600::T61_X, R600::T62_X, R600::T63_X, R600::T64_X, R600::T65_X, R600::T66_X, R600::T67_X, R600::T68_X, R600::T69_X, R600::T70_X, R600::T71_X, R600::T72_X, R600::T73_X, R600::T74_X, R600::T75_X, R600::T76_X, R600::T77_X, R600::T78_X, R600::T79_X, R600::T80_X, R600::T81_X, R600::T82_X, R600::T83_X, R600::T84_X, R600::T85_X, R600::T86_X, R600::T87_X, R600::T88_X, R600::T89_X, R600::T90_X, R600::T91_X, R600::T92_X, R600::T93_X, R600::T94_X, R600::T95_X, R600::T96_X, R600::T97_X, R600::T98_X, R600::T99_X, R600::T100_X, R600::T101_X, R600::T102_X, R600::T103_X, R600::T104_X, R600::T105_X, R600::T106_X, R600::T107_X, R600::T108_X, R600::T109_X, R600::T110_X, R600::T111_X, R600::T112_X, R600::T113_X, R600::T114_X, R600::T115_X, R600::T116_X, R600::T117_X, R600::T118_X, R600::T119_X, R600::T120_X, R600::T121_X, R600::T122_X, R600::T123_X, R600::T124_X, R600::T125_X, R600::T126_X, R600::T127_X, R600::AR_X, 
  };

  // R600_TReg32_X Bit set.
  const uint8_t R600_TReg32_XBits[] = {
    0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 
  };

  // R600_Addr Register Class...
  const MCPhysReg R600_Addr[] = {
    R600::Addr0_X, R600::Addr1_X, R600::Addr2_X, R600::Addr3_X, R600::Addr4_X, R600::Addr5_X, R600::Addr6_X, R600::Addr7_X, R600::Addr8_X, R600::Addr9_X, R600::Addr10_X, R600::Addr11_X, R600::Addr12_X, R600::Addr13_X, R600::Addr14_X, R600::Addr15_X, R600::Addr16_X, R600::Addr17_X, R600::Addr18_X, R600::Addr19_X, R600::Addr20_X, R600::Addr21_X, R600::Addr22_X, R600::Addr23_X, R600::Addr24_X, R600::Addr25_X, R600::Addr26_X, R600::Addr27_X, R600::Addr28_X, R600::Addr29_X, R600::Addr30_X, R600::Addr31_X, R600::Addr32_X, R600::Addr33_X, R600::Addr34_X, R600::Addr35_X, R600::Addr36_X, R600::Addr37_X, R600::Addr38_X, R600::Addr39_X, R600::Addr40_X, R600::Addr41_X, R600::Addr42_X, R600::Addr43_X, R600::Addr44_X, R600::Addr45_X, R600::Addr46_X, R600::Addr47_X, R600::Addr48_X, R600::Addr49_X, R600::Addr50_X, R600::Addr51_X, R600::Addr52_X, R600::Addr53_X, R600::Addr54_X, R600::Addr55_X, R600::Addr56_X, R600::Addr57_X, R600::Addr58_X, R600::Addr59_X, R600::Addr60_X, R600::Addr61_X, R600::Addr62_X, R600::Addr63_X, R600::Addr64_X, R600::Addr65_X, R600::Addr66_X, R600::Addr67_X, R600::Addr68_X, R600::Addr69_X, R600::Addr70_X, R600::Addr71_X, R600::Addr72_X, R600::Addr73_X, R600::Addr74_X, R600::Addr75_X, R600::Addr76_X, R600::Addr77_X, R600::Addr78_X, R600::Addr79_X, R600::Addr80_X, R600::Addr81_X, R600::Addr82_X, R600::Addr83_X, R600::Addr84_X, R600::Addr85_X, R600::Addr86_X, R600::Addr87_X, R600::Addr88_X, R600::Addr89_X, R600::Addr90_X, R600::Addr91_X, R600::Addr92_X, R600::Addr93_X, R600::Addr94_X, R600::Addr95_X, R600::Addr96_X, R600::Addr97_X, R600::Addr98_X, R600::Addr99_X, R600::Addr100_X, R600::Addr101_X, R600::Addr102_X, R600::Addr103_X, R600::Addr104_X, R600::Addr105_X, R600::Addr106_X, R600::Addr107_X, R600::Addr108_X, R600::Addr109_X, R600::Addr110_X, R600::Addr111_X, R600::Addr112_X, R600::Addr113_X, R600::Addr114_X, R600::Addr115_X, R600::Addr116_X, R600::Addr117_X, R600::Addr118_X, R600::Addr119_X, R600::Addr120_X, R600::Addr121_X, R600::Addr122_X, R600::Addr123_X, R600::Addr124_X, R600::Addr125_X, R600::Addr126_X, R600::Addr127_X, 
  };

  // R600_Addr Bit set.
  const uint8_t R600_AddrBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 
  };

  // R600_KC0 Register Class...
  const MCPhysReg R600_KC0[] = {
    R600::KC0_128_X, R600::KC0_128_Y, R600::KC0_128_Z, R600::KC0_128_W, R600::KC0_129_X, R600::KC0_129_Y, R600::KC0_129_Z, R600::KC0_129_W, R600::KC0_130_X, R600::KC0_130_Y, R600::KC0_130_Z, R600::KC0_130_W, R600::KC0_131_X, R600::KC0_131_Y, R600::KC0_131_Z, R600::KC0_131_W, R600::KC0_132_X, R600::KC0_132_Y, R600::KC0_132_Z, R600::KC0_132_W, R600::KC0_133_X, R600::KC0_133_Y, R600::KC0_133_Z, R600::KC0_133_W, R600::KC0_134_X, R600::KC0_134_Y, R600::KC0_134_Z, R600::KC0_134_W, R600::KC0_135_X, R600::KC0_135_Y, R600::KC0_135_Z, R600::KC0_135_W, R600::KC0_136_X, R600::KC0_136_Y, R600::KC0_136_Z, R600::KC0_136_W, R600::KC0_137_X, R600::KC0_137_Y, R600::KC0_137_Z, R600::KC0_137_W, R600::KC0_138_X, R600::KC0_138_Y, R600::KC0_138_Z, R600::KC0_138_W, R600::KC0_139_X, R600::KC0_139_Y, R600::KC0_139_Z, R600::KC0_139_W, R600::KC0_140_X, R600::KC0_140_Y, R600::KC0_140_Z, R600::KC0_140_W, R600::KC0_141_X, R600::KC0_141_Y, R600::KC0_141_Z, R600::KC0_141_W, R600::KC0_142_X, R600::KC0_142_Y, R600::KC0_142_Z, R600::KC0_142_W, R600::KC0_143_X, R600::KC0_143_Y, R600::KC0_143_Z, R600::KC0_143_W, R600::KC0_144_X, R600::KC0_144_Y, R600::KC0_144_Z, R600::KC0_144_W, R600::KC0_145_X, R600::KC0_145_Y, R600::KC0_145_Z, R600::KC0_145_W, R600::KC0_146_X, R600::KC0_146_Y, R600::KC0_146_Z, R600::KC0_146_W, R600::KC0_147_X, R600::KC0_147_Y, R600::KC0_147_Z, R600::KC0_147_W, R600::KC0_148_X, R600::KC0_148_Y, R600::KC0_148_Z, R600::KC0_148_W, R600::KC0_149_X, R600::KC0_149_Y, R600::KC0_149_Z, R600::KC0_149_W, R600::KC0_150_X, R600::KC0_150_Y, R600::KC0_150_Z, R600::KC0_150_W, R600::KC0_151_X, R600::KC0_151_Y, R600::KC0_151_Z, R600::KC0_151_W, R600::KC0_152_X, R600::KC0_152_Y, R600::KC0_152_Z, R600::KC0_152_W, R600::KC0_153_X, R600::KC0_153_Y, R600::KC0_153_Z, R600::KC0_153_W, R600::KC0_154_X, R600::KC0_154_Y, R600::KC0_154_Z, R600::KC0_154_W, R600::KC0_155_X, R600::KC0_155_Y, R600::KC0_155_Z, R600::KC0_155_W, R600::KC0_156_X, R600::KC0_156_Y, R600::KC0_156_Z, R600::KC0_156_W, R600::KC0_157_X, R600::KC0_157_Y, R600::KC0_157_Z, R600::KC0_157_W, R600::KC0_158_X, R600::KC0_158_Y, R600::KC0_158_Z, R600::KC0_158_W, R600::KC0_159_X, R600::KC0_159_Y, R600::KC0_159_Z, R600::KC0_159_W, 
  };

  // R600_KC0 Bit set.
  const uint8_t R600_KC0Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0x07, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0x07, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0x07, 
  };

  // R600_KC1 Register Class...
  const MCPhysReg R600_KC1[] = {
    R600::KC1_160_X, R600::KC1_160_Y, R600::KC1_160_Z, R600::KC1_160_W, R600::KC1_161_X, R600::KC1_161_Y, R600::KC1_161_Z, R600::KC1_161_W, R600::KC1_162_X, R600::KC1_162_Y, R600::KC1_162_Z, R600::KC1_162_W, R600::KC1_163_X, R600::KC1_163_Y, R600::KC1_163_Z, R600::KC1_163_W, R600::KC1_164_X, R600::KC1_164_Y, R600::KC1_164_Z, R600::KC1_164_W, R600::KC1_165_X, R600::KC1_165_Y, R600::KC1_165_Z, R600::KC1_165_W, R600::KC1_166_X, R600::KC1_166_Y, R600::KC1_166_Z, R600::KC1_166_W, R600::KC1_167_X, R600::KC1_167_Y, R600::KC1_167_Z, R600::KC1_167_W, R600::KC1_168_X, R600::KC1_168_Y, R600::KC1_168_Z, R600::KC1_168_W, R600::KC1_169_X, R600::KC1_169_Y, R600::KC1_169_Z, R600::KC1_169_W, R600::KC1_170_X, R600::KC1_170_Y, R600::KC1_170_Z, R600::KC1_170_W, R600::KC1_171_X, R600::KC1_171_Y, R600::KC1_171_Z, R600::KC1_171_W, R600::KC1_172_X, R600::KC1_172_Y, R600::KC1_172_Z, R600::KC1_172_W, R600::KC1_173_X, R600::KC1_173_Y, R600::KC1_173_Z, R600::KC1_173_W, R600::KC1_174_X, R600::KC1_174_Y, R600::KC1_174_Z, R600::KC1_174_W, R600::KC1_175_X, R600::KC1_175_Y, R600::KC1_175_Z, R600::KC1_175_W, R600::KC1_176_X, R600::KC1_176_Y, R600::KC1_176_Z, R600::KC1_176_W, R600::KC1_177_X, R600::KC1_177_Y, R600::KC1_177_Z, R600::KC1_177_W, R600::KC1_178_X, R600::KC1_178_Y, R600::KC1_178_Z, R600::KC1_178_W, R600::KC1_179_X, R600::KC1_179_Y, R600::KC1_179_Z, R600::KC1_179_W, R600::KC1_180_X, R600::KC1_180_Y, R600::KC1_180_Z, R600::KC1_180_W, R600::KC1_181_X, R600::KC1_181_Y, R600::KC1_181_Z, R600::KC1_181_W, R600::KC1_182_X, R600::KC1_182_Y, R600::KC1_182_Z, R600::KC1_182_W, R600::KC1_183_X, R600::KC1_183_Y, R600::KC1_183_Z, R600::KC1_183_W, R600::KC1_184_X, R600::KC1_184_Y, R600::KC1_184_Z, R600::KC1_184_W, R600::KC1_185_X, R600::KC1_185_Y, R600::KC1_185_Z, R600::KC1_185_W, R600::KC1_186_X, R600::KC1_186_Y, R600::KC1_186_Z, R600::KC1_186_W, R600::KC1_187_X, R600::KC1_187_Y, R600::KC1_187_Z, R600::KC1_187_W, R600::KC1_188_X, R600::KC1_188_Y, R600::KC1_188_Z, R600::KC1_188_W, R600::KC1_189_X, R600::KC1_189_Y, R600::KC1_189_Z, R600::KC1_189_W, R600::KC1_190_X, R600::KC1_190_Y, R600::KC1_190_Z, R600::KC1_190_W, R600::KC1_191_X, R600::KC1_191_Y, R600::KC1_191_Z, R600::KC1_191_W, 
  };

  // R600_KC1 Bit set.
  const uint8_t R600_KC1Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0x07, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0x07, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0x07, 
  };

  // R600_TReg32_W Register Class...
  const MCPhysReg R600_TReg32_W[] = {
    R600::T0_W, R600::T1_W, R600::T2_W, R600::T3_W, R600::T4_W, R600::T5_W, R600::T6_W, R600::T7_W, R600::T8_W, R600::T9_W, R600::T10_W, R600::T11_W, R600::T12_W, R600::T13_W, R600::T14_W, R600::T15_W, R600::T16_W, R600::T17_W, R600::T18_W, R600::T19_W, R600::T20_W, R600::T21_W, R600::T22_W, R600::T23_W, R600::T24_W, R600::T25_W, R600::T26_W, R600::T27_W, R600::T28_W, R600::T29_W, R600::T30_W, R600::T31_W, R600::T32_W, R600::T33_W, R600::T34_W, R600::T35_W, R600::T36_W, R600::T37_W, R600::T38_W, R600::T39_W, R600::T40_W, R600::T41_W, R600::T42_W, R600::T43_W, R600::T44_W, R600::T45_W, R600::T46_W, R600::T47_W, R600::T48_W, R600::T49_W, R600::T50_W, R600::T51_W, R600::T52_W, R600::T53_W, R600::T54_W, R600::T55_W, R600::T56_W, R600::T57_W, R600::T58_W, R600::T59_W, R600::T60_W, R600::T61_W, R600::T62_W, R600::T63_W, R600::T64_W, R600::T65_W, R600::T66_W, R600::T67_W, R600::T68_W, R600::T69_W, R600::T70_W, R600::T71_W, R600::T72_W, R600::T73_W, R600::T74_W, R600::T75_W, R600::T76_W, R600::T77_W, R600::T78_W, R600::T79_W, R600::T80_W, R600::T81_W, R600::T82_W, R600::T83_W, R600::T84_W, R600::T85_W, R600::T86_W, R600::T87_W, R600::T88_W, R600::T89_W, R600::T90_W, R600::T91_W, R600::T92_W, R600::T93_W, R600::T94_W, R600::T95_W, R600::T96_W, R600::T97_W, R600::T98_W, R600::T99_W, R600::T100_W, R600::T101_W, R600::T102_W, R600::T103_W, R600::T104_W, R600::T105_W, R600::T106_W, R600::T107_W, R600::T108_W, R600::T109_W, R600::T110_W, R600::T111_W, R600::T112_W, R600::T113_W, R600::T114_W, R600::T115_W, R600::T116_W, R600::T117_W, R600::T118_W, R600::T119_W, R600::T120_W, R600::T121_W, R600::T122_W, R600::T123_W, R600::T124_W, R600::T125_W, R600::T126_W, R600::T127_W, 
  };

  // R600_TReg32_W Bit set.
  const uint8_t R600_TReg32_WBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 
  };

  // R600_TReg32_Y Register Class...
  const MCPhysReg R600_TReg32_Y[] = {
    R600::T0_Y, R600::T1_Y, R600::T2_Y, R600::T3_Y, R600::T4_Y, R600::T5_Y, R600::T6_Y, R600::T7_Y, R600::T8_Y, R600::T9_Y, R600::T10_Y, R600::T11_Y, R600::T12_Y, R600::T13_Y, R600::T14_Y, R600::T15_Y, R600::T16_Y, R600::T17_Y, R600::T18_Y, R600::T19_Y, R600::T20_Y, R600::T21_Y, R600::T22_Y, R600::T23_Y, R600::T24_Y, R600::T25_Y, R600::T26_Y, R600::T27_Y, R600::T28_Y, R600::T29_Y, R600::T30_Y, R600::T31_Y, R600::T32_Y, R600::T33_Y, R600::T34_Y, R600::T35_Y, R600::T36_Y, R600::T37_Y, R600::T38_Y, R600::T39_Y, R600::T40_Y, R600::T41_Y, R600::T42_Y, R600::T43_Y, R600::T44_Y, R600::T45_Y, R600::T46_Y, R600::T47_Y, R600::T48_Y, R600::T49_Y, R600::T50_Y, R600::T51_Y, R600::T52_Y, R600::T53_Y, R600::T54_Y, R600::T55_Y, R600::T56_Y, R600::T57_Y, R600::T58_Y, R600::T59_Y, R600::T60_Y, R600::T61_Y, R600::T62_Y, R600::T63_Y, R600::T64_Y, R600::T65_Y, R600::T66_Y, R600::T67_Y, R600::T68_Y, R600::T69_Y, R600::T70_Y, R600::T71_Y, R600::T72_Y, R600::T73_Y, R600::T74_Y, R600::T75_Y, R600::T76_Y, R600::T77_Y, R600::T78_Y, R600::T79_Y, R600::T80_Y, R600::T81_Y, R600::T82_Y, R600::T83_Y, R600::T84_Y, R600::T85_Y, R600::T86_Y, R600::T87_Y, R600::T88_Y, R600::T89_Y, R600::T90_Y, R600::T91_Y, R600::T92_Y, R600::T93_Y, R600::T94_Y, R600::T95_Y, R600::T96_Y, R600::T97_Y, R600::T98_Y, R600::T99_Y, R600::T100_Y, R600::T101_Y, R600::T102_Y, R600::T103_Y, R600::T104_Y, R600::T105_Y, R600::T106_Y, R600::T107_Y, R600::T108_Y, R600::T109_Y, R600::T110_Y, R600::T111_Y, R600::T112_Y, R600::T113_Y, R600::T114_Y, R600::T115_Y, R600::T116_Y, R600::T117_Y, R600::T118_Y, R600::T119_Y, R600::T120_Y, R600::T121_Y, R600::T122_Y, R600::T123_Y, R600::T124_Y, R600::T125_Y, R600::T126_Y, R600::T127_Y, 
  };

  // R600_TReg32_Y Bit set.
  const uint8_t R600_TReg32_YBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 
  };

  // R600_TReg32_Z Register Class...
  const MCPhysReg R600_TReg32_Z[] = {
    R600::T0_Z, R600::T1_Z, R600::T2_Z, R600::T3_Z, R600::T4_Z, R600::T5_Z, R600::T6_Z, R600::T7_Z, R600::T8_Z, R600::T9_Z, R600::T10_Z, R600::T11_Z, R600::T12_Z, R600::T13_Z, R600::T14_Z, R600::T15_Z, R600::T16_Z, R600::T17_Z, R600::T18_Z, R600::T19_Z, R600::T20_Z, R600::T21_Z, R600::T22_Z, R600::T23_Z, R600::T24_Z, R600::T25_Z, R600::T26_Z, R600::T27_Z, R600::T28_Z, R600::T29_Z, R600::T30_Z, R600::T31_Z, R600::T32_Z, R600::T33_Z, R600::T34_Z, R600::T35_Z, R600::T36_Z, R600::T37_Z, R600::T38_Z, R600::T39_Z, R600::T40_Z, R600::T41_Z, R600::T42_Z, R600::T43_Z, R600::T44_Z, R600::T45_Z, R600::T46_Z, R600::T47_Z, R600::T48_Z, R600::T49_Z, R600::T50_Z, R600::T51_Z, R600::T52_Z, R600::T53_Z, R600::T54_Z, R600::T55_Z, R600::T56_Z, R600::T57_Z, R600::T58_Z, R600::T59_Z, R600::T60_Z, R600::T61_Z, R600::T62_Z, R600::T63_Z, R600::T64_Z, R600::T65_Z, R600::T66_Z, R600::T67_Z, R600::T68_Z, R600::T69_Z, R600::T70_Z, R600::T71_Z, R600::T72_Z, R600::T73_Z, R600::T74_Z, R600::T75_Z, R600::T76_Z, R600::T77_Z, R600::T78_Z, R600::T79_Z, R600::T80_Z, R600::T81_Z, R600::T82_Z, R600::T83_Z, R600::T84_Z, R600::T85_Z, R600::T86_Z, R600::T87_Z, R600::T88_Z, R600::T89_Z, R600::T90_Z, R600::T91_Z, R600::T92_Z, R600::T93_Z, R600::T94_Z, R600::T95_Z, R600::T96_Z, R600::T97_Z, R600::T98_Z, R600::T99_Z, R600::T100_Z, R600::T101_Z, R600::T102_Z, R600::T103_Z, R600::T104_Z, R600::T105_Z, R600::T106_Z, R600::T107_Z, R600::T108_Z, R600::T109_Z, R600::T110_Z, R600::T111_Z, R600::T112_Z, R600::T113_Z, R600::T114_Z, R600::T115_Z, R600::T116_Z, R600::T117_Z, R600::T118_Z, R600::T119_Z, R600::T120_Z, R600::T121_Z, R600::T122_Z, R600::T123_Z, R600::T124_Z, R600::T125_Z, R600::T126_Z, R600::T127_Z, 
  };

  // R600_TReg32_Z Bit set.
  const uint8_t R600_TReg32_ZBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 
  };

  // R600_ArrayBase Register Class...
  const MCPhysReg R600_ArrayBase[] = {
    R600::ArrayBase448, R600::ArrayBase449, R600::ArrayBase450, R600::ArrayBase451, R600::ArrayBase452, R600::ArrayBase453, R600::ArrayBase454, R600::ArrayBase455, R600::ArrayBase456, R600::ArrayBase457, R600::ArrayBase458, R600::ArrayBase459, R600::ArrayBase460, R600::ArrayBase461, R600::ArrayBase462, R600::ArrayBase463, R600::ArrayBase464, R600::ArrayBase465, R600::ArrayBase466, R600::ArrayBase467, R600::ArrayBase468, R600::ArrayBase469, R600::ArrayBase470, R600::ArrayBase471, R600::ArrayBase472, R600::ArrayBase473, R600::ArrayBase474, R600::ArrayBase475, R600::ArrayBase476, R600::ArrayBase477, R600::ArrayBase478, R600::ArrayBase479, R600::ArrayBase480, 
  };

  // R600_ArrayBase Bit set.
  const uint8_t R600_ArrayBaseBits[] = {
    0x00, 0x00, 0x00, 0xc0, 0xff, 0xff, 0xff, 0x7f, 
  };

  // R600_KC0_W Register Class...
  const MCPhysReg R600_KC0_W[] = {
    R600::KC0_128_W, R600::KC0_129_W, R600::KC0_130_W, R600::KC0_131_W, R600::KC0_132_W, R600::KC0_133_W, R600::KC0_134_W, R600::KC0_135_W, R600::KC0_136_W, R600::KC0_137_W, R600::KC0_138_W, R600::KC0_139_W, R600::KC0_140_W, R600::KC0_141_W, R600::KC0_142_W, R600::KC0_143_W, R600::KC0_144_W, R600::KC0_145_W, R600::KC0_146_W, R600::KC0_147_W, R600::KC0_148_W, R600::KC0_149_W, R600::KC0_150_W, R600::KC0_151_W, R600::KC0_152_W, R600::KC0_153_W, R600::KC0_154_W, R600::KC0_155_W, R600::KC0_156_W, R600::KC0_157_W, R600::KC0_158_W, R600::KC0_159_W, 
  };

  // R600_KC0_W Bit set.
  const uint8_t R600_KC0_WBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0x07, 
  };

  // R600_KC0_X Register Class...
  const MCPhysReg R600_KC0_X[] = {
    R600::KC0_128_X, R600::KC0_129_X, R600::KC0_130_X, R600::KC0_131_X, R600::KC0_132_X, R600::KC0_133_X, R600::KC0_134_X, R600::KC0_135_X, R600::KC0_136_X, R600::KC0_137_X, R600::KC0_138_X, R600::KC0_139_X, R600::KC0_140_X, R600::KC0_141_X, R600::KC0_142_X, R600::KC0_143_X, R600::KC0_144_X, R600::KC0_145_X, R600::KC0_146_X, R600::KC0_147_X, R600::KC0_148_X, R600::KC0_149_X, R600::KC0_150_X, R600::KC0_151_X, R600::KC0_152_X, R600::KC0_153_X, R600::KC0_154_X, R600::KC0_155_X, R600::KC0_156_X, R600::KC0_157_X, R600::KC0_158_X, R600::KC0_159_X, 
  };

  // R600_KC0_X Bit set.
  const uint8_t R600_KC0_XBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0x07, 
  };

  // R600_KC0_Y Register Class...
  const MCPhysReg R600_KC0_Y[] = {
    R600::KC0_128_Y, R600::KC0_129_Y, R600::KC0_130_Y, R600::KC0_131_Y, R600::KC0_132_Y, R600::KC0_133_Y, R600::KC0_134_Y, R600::KC0_135_Y, R600::KC0_136_Y, R600::KC0_137_Y, R600::KC0_138_Y, R600::KC0_139_Y, R600::KC0_140_Y, R600::KC0_141_Y, R600::KC0_142_Y, R600::KC0_143_Y, R600::KC0_144_Y, R600::KC0_145_Y, R600::KC0_146_Y, R600::KC0_147_Y, R600::KC0_148_Y, R600::KC0_149_Y, R600::KC0_150_Y, R600::KC0_151_Y, R600::KC0_152_Y, R600::KC0_153_Y, R600::KC0_154_Y, R600::KC0_155_Y, R600::KC0_156_Y, R600::KC0_157_Y, R600::KC0_158_Y, R600::KC0_159_Y, 
  };

  // R600_KC0_Y Bit set.
  const uint8_t R600_KC0_YBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0x07, 
  };

  // R600_KC0_Z Register Class...
  const MCPhysReg R600_KC0_Z[] = {
    R600::KC0_128_Z, R600::KC0_129_Z, R600::KC0_130_Z, R600::KC0_131_Z, R600::KC0_132_Z, R600::KC0_133_Z, R600::KC0_134_Z, R600::KC0_135_Z, R600::KC0_136_Z, R600::KC0_137_Z, R600::KC0_138_Z, R600::KC0_139_Z, R600::KC0_140_Z, R600::KC0_141_Z, R600::KC0_142_Z, R600::KC0_143_Z, R600::KC0_144_Z, R600::KC0_145_Z, R600::KC0_146_Z, R600::KC0_147_Z, R600::KC0_148_Z, R600::KC0_149_Z, R600::KC0_150_Z, R600::KC0_151_Z, R600::KC0_152_Z, R600::KC0_153_Z, R600::KC0_154_Z, R600::KC0_155_Z, R600::KC0_156_Z, R600::KC0_157_Z, R600::KC0_158_Z, R600::KC0_159_Z, 
  };

  // R600_KC0_Z Bit set.
  const uint8_t R600_KC0_ZBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0x07, 
  };

  // R600_KC1_W Register Class...
  const MCPhysReg R600_KC1_W[] = {
    R600::KC1_160_W, R600::KC1_161_W, R600::KC1_162_W, R600::KC1_163_W, R600::KC1_164_W, R600::KC1_165_W, R600::KC1_166_W, R600::KC1_167_W, R600::KC1_168_W, R600::KC1_169_W, R600::KC1_170_W, R600::KC1_171_W, R600::KC1_172_W, R600::KC1_173_W, R600::KC1_174_W, R600::KC1_175_W, R600::KC1_176_W, R600::KC1_177_W, R600::KC1_178_W, R600::KC1_179_W, R600::KC1_180_W, R600::KC1_181_W, R600::KC1_182_W, R600::KC1_183_W, R600::KC1_184_W, R600::KC1_185_W, R600::KC1_186_W, R600::KC1_187_W, R600::KC1_188_W, R600::KC1_189_W, R600::KC1_190_W, R600::KC1_191_W, 
  };

  // R600_KC1_W Bit set.
  const uint8_t R600_KC1_WBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0x07, 
  };

  // R600_KC1_X Register Class...
  const MCPhysReg R600_KC1_X[] = {
    R600::KC1_160_X, R600::KC1_161_X, R600::KC1_162_X, R600::KC1_163_X, R600::KC1_164_X, R600::KC1_165_X, R600::KC1_166_X, R600::KC1_167_X, R600::KC1_168_X, R600::KC1_169_X, R600::KC1_170_X, R600::KC1_171_X, R600::KC1_172_X, R600::KC1_173_X, R600::KC1_174_X, R600::KC1_175_X, R600::KC1_176_X, R600::KC1_177_X, R600::KC1_178_X, R600::KC1_179_X, R600::KC1_180_X, R600::KC1_181_X, R600::KC1_182_X, R600::KC1_183_X, R600::KC1_184_X, R600::KC1_185_X, R600::KC1_186_X, R600::KC1_187_X, R600::KC1_188_X, R600::KC1_189_X, R600::KC1_190_X, R600::KC1_191_X, 
  };

  // R600_KC1_X Bit set.
  const uint8_t R600_KC1_XBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0x07, 
  };

  // R600_KC1_Y Register Class...
  const MCPhysReg R600_KC1_Y[] = {
    R600::KC1_160_Y, R600::KC1_161_Y, R600::KC1_162_Y, R600::KC1_163_Y, R600::KC1_164_Y, R600::KC1_165_Y, R600::KC1_166_Y, R600::KC1_167_Y, R600::KC1_168_Y, R600::KC1_169_Y, R600::KC1_170_Y, R600::KC1_171_Y, R600::KC1_172_Y, R600::KC1_173_Y, R600::KC1_174_Y, R600::KC1_175_Y, R600::KC1_176_Y, R600::KC1_177_Y, R600::KC1_178_Y, R600::KC1_179_Y, R600::KC1_180_Y, R600::KC1_181_Y, R600::KC1_182_Y, R600::KC1_183_Y, R600::KC1_184_Y, R600::KC1_185_Y, R600::KC1_186_Y, R600::KC1_187_Y, R600::KC1_188_Y, R600::KC1_189_Y, R600::KC1_190_Y, R600::KC1_191_Y, 
  };

  // R600_KC1_Y Bit set.
  const uint8_t R600_KC1_YBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0x07, 
  };

  // R600_KC1_Z Register Class...
  const MCPhysReg R600_KC1_Z[] = {
    R600::KC1_160_Z, R600::KC1_161_Z, R600::KC1_162_Z, R600::KC1_163_Z, R600::KC1_164_Z, R600::KC1_165_Z, R600::KC1_166_Z, R600::KC1_167_Z, R600::KC1_168_Z, R600::KC1_169_Z, R600::KC1_170_Z, R600::KC1_171_Z, R600::KC1_172_Z, R600::KC1_173_Z, R600::KC1_174_Z, R600::KC1_175_Z, R600::KC1_176_Z, R600::KC1_177_Z, R600::KC1_178_Z, R600::KC1_179_Z, R600::KC1_180_Z, R600::KC1_181_Z, R600::KC1_182_Z, R600::KC1_183_Z, R600::KC1_184_Z, R600::KC1_185_Z, R600::KC1_186_Z, R600::KC1_187_Z, R600::KC1_188_Z, R600::KC1_189_Z, R600::KC1_190_Z, R600::KC1_191_Z, 
  };

  // R600_KC1_Z Bit set.
  const uint8_t R600_KC1_ZBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0x07, 
  };

  // R600_LDS_SRC_REG Register Class...
  const MCPhysReg R600_LDS_SRC_REG[] = {
    R600::OQA, R600::OQB, R600::OQAP, R600::OQBP, R600::LDS_DIRECT_A, R600::LDS_DIRECT_B, 
  };

  // R600_LDS_SRC_REG Bit set.
  const uint8_t R600_LDS_SRC_REGBits[] = {
    0x00, 0x0c, 0x0f, 
  };

  // R600_Predicate Register Class...
  const MCPhysReg R600_Predicate[] = {
    R600::PRED_SEL_OFF, R600::PRED_SEL_ZERO, R600::PRED_SEL_ONE, 
  };

  // R600_Predicate Bit set.
  const uint8_t R600_PredicateBits[] = {
    0x00, 0x00, 0xe0, 
  };

  // R600_Addr_W Register Class...
  const MCPhysReg R600_Addr_W[] = {
    R600::Addr0_W, 
  };

  // R600_Addr_W Bit set.
  const uint8_t R600_Addr_WBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
  };

  // R600_Addr_Y Register Class...
  const MCPhysReg R600_Addr_Y[] = {
    R600::Addr0_Y, 
  };

  // R600_Addr_Y Bit set.
  const uint8_t R600_Addr_YBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
  };

  // R600_Addr_Z Register Class...
  const MCPhysReg R600_Addr_Z[] = {
    R600::Addr0_Z, 
  };

  // R600_Addr_Z Bit set.
  const uint8_t R600_Addr_ZBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
  };

  // R600_LDS_SRC_REG_and_R600_Reg32 Register Class...
  const MCPhysReg R600_LDS_SRC_REG_and_R600_Reg32[] = {
    R600::OQAP, 
  };

  // R600_LDS_SRC_REG_and_R600_Reg32 Bit set.
  const uint8_t R600_LDS_SRC_REG_and_R600_Reg32Bits[] = {
    0x00, 0x00, 0x02, 
  };

  // R600_Predicate_Bit Register Class...
  const MCPhysReg R600_Predicate_Bit[] = {
    R600::PREDICATE_BIT, 
  };

  // R600_Predicate_Bit Bit set.
  const uint8_t R600_Predicate_BitBits[] = {
    0x00, 0x00, 0x10, 
  };

  // R600_Reg64 Register Class...
  const MCPhysReg R600_Reg64[] = {
    R600::T0_XY, R600::T1_XY, R600::T2_XY, R600::T3_XY, R600::T4_XY, R600::T5_XY, R600::T6_XY, R600::T7_XY, R600::T8_XY, R600::T9_XY, R600::T10_XY, R600::T11_XY, R600::T12_XY, R600::T13_XY, R600::T14_XY, R600::T15_XY, R600::T16_XY, R600::T17_XY, R600::T18_XY, R600::T19_XY, R600::T20_XY, R600::T21_XY, R600::T22_XY, R600::T23_XY, R600::T24_XY, R600::T25_XY, R600::T26_XY, R600::T27_XY, R600::T28_XY, R600::T29_XY, R600::T30_XY, R600::T31_XY, R600::T32_XY, R600::T33_XY, R600::T34_XY, R600::T35_XY, R600::T36_XY, R600::T37_XY, R600::T38_XY, R600::T39_XY, R600::T40_XY, R600::T41_XY, R600::T42_XY, R600::T43_XY, R600::T44_XY, R600::T45_XY, R600::T46_XY, R600::T47_XY, R600::T48_XY, R600::T49_XY, R600::T50_XY, R600::T51_XY, R600::T52_XY, R600::T53_XY, R600::T54_XY, R600::T55_XY, R600::T56_XY, R600::T57_XY, R600::T58_XY, R600::T59_XY, R600::T60_XY, R600::T61_XY, R600::T62_XY, R600::T63_XY, 
  };

  // R600_Reg64 Bit set.
  const uint8_t R600_Reg64Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 
  };

  // R600_Reg64Vertical Register Class...
  const MCPhysReg R600_Reg64Vertical[] = {
    R600::V01_X, R600::V01_Y, R600::V01_Z, R600::V01_W, R600::V23_X, R600::V23_Y, R600::V23_Z, R600::V23_W, 
  };

  // R600_Reg64Vertical Bit set.
  const uint8_t R600_Reg64VerticalBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x6d, 0x03, 
  };

  // R600_Reg64Vertical_with_sub0_in_R600_TReg32_W Register Class...
  const MCPhysReg R600_Reg64Vertical_with_sub0_in_R600_TReg32_W[] = {
    R600::V01_W, R600::V23_W, 
  };

  // R600_Reg64Vertical_with_sub0_in_R600_TReg32_W Bit set.
  const uint8_t R600_Reg64Vertical_with_sub0_in_R600_TReg32_WBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 
  };

  // R600_Reg64Vertical_with_sub0_in_R600_TReg32_X Register Class...
  const MCPhysReg R600_Reg64Vertical_with_sub0_in_R600_TReg32_X[] = {
    R600::V01_X, R600::V23_X, 
  };

  // R600_Reg64Vertical_with_sub0_in_R600_TReg32_X Bit set.
  const uint8_t R600_Reg64Vertical_with_sub0_in_R600_TReg32_XBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
  };

  // R600_Reg64Vertical_with_sub0_in_R600_TReg32_Y Register Class...
  const MCPhysReg R600_Reg64Vertical_with_sub0_in_R600_TReg32_Y[] = {
    R600::V01_Y, R600::V23_Y, 
  };

  // R600_Reg64Vertical_with_sub0_in_R600_TReg32_Y Bit set.
  const uint8_t R600_Reg64Vertical_with_sub0_in_R600_TReg32_YBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 
  };

  // R600_Reg64Vertical_with_sub0_in_R600_TReg32_Z Register Class...
  const MCPhysReg R600_Reg64Vertical_with_sub0_in_R600_TReg32_Z[] = {
    R600::V01_Z, R600::V23_Z, 
  };

  // R600_Reg64Vertical_with_sub0_in_R600_TReg32_Z Bit set.
  const uint8_t R600_Reg64Vertical_with_sub0_in_R600_TReg32_ZBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 
  };

  // R600_Reg128 Register Class...
  const MCPhysReg R600_Reg128[] = {
    R600::T0_XYZW, R600::T1_XYZW, R600::T2_XYZW, R600::T3_XYZW, R600::T4_XYZW, R600::T5_XYZW, R600::T6_XYZW, R600::T7_XYZW, R600::T8_XYZW, R600::T9_XYZW, R600::T10_XYZW, R600::T11_XYZW, R600::T12_XYZW, R600::T13_XYZW, R600::T14_XYZW, R600::T15_XYZW, R600::T16_XYZW, R600::T17_XYZW, R600::T18_XYZW, R600::T19_XYZW, R600::T20_XYZW, R600::T21_XYZW, R600::T22_XYZW, R600::T23_XYZW, R600::T24_XYZW, R600::T25_XYZW, R600::T26_XYZW, R600::T27_XYZW, R600::T28_XYZW, R600::T29_XYZW, R600::T30_XYZW, R600::T31_XYZW, R600::T32_XYZW, R600::T33_XYZW, R600::T34_XYZW, R600::T35_XYZW, R600::T36_XYZW, R600::T37_XYZW, R600::T38_XYZW, R600::T39_XYZW, R600::T40_XYZW, R600::T41_XYZW, R600::T42_XYZW, R600::T43_XYZW, R600::T44_XYZW, R600::T45_XYZW, R600::T46_XYZW, R600::T47_XYZW, R600::T48_XYZW, R600::T49_XYZW, R600::T50_XYZW, R600::T51_XYZW, R600::T52_XYZW, R600::T53_XYZW, R600::T54_XYZW, R600::T55_XYZW, R600::T56_XYZW, R600::T57_XYZW, R600::T58_XYZW, R600::T59_XYZW, R600::T60_XYZW, R600::T61_XYZW, R600::T62_XYZW, R600::T63_XYZW, R600::T64_XYZW, R600::T65_XYZW, R600::T66_XYZW, R600::T67_XYZW, R600::T68_XYZW, R600::T69_XYZW, R600::T70_XYZW, R600::T71_XYZW, R600::T72_XYZW, R600::T73_XYZW, R600::T74_XYZW, R600::T75_XYZW, R600::T76_XYZW, R600::T77_XYZW, R600::T78_XYZW, R600::T79_XYZW, R600::T80_XYZW, R600::T81_XYZW, R600::T82_XYZW, R600::T83_XYZW, R600::T84_XYZW, R600::T85_XYZW, R600::T86_XYZW, R600::T87_XYZW, R600::T88_XYZW, R600::T89_XYZW, R600::T90_XYZW, R600::T91_XYZW, R600::T92_XYZW, R600::T93_XYZW, R600::T94_XYZW, R600::T95_XYZW, R600::T96_XYZW, R600::T97_XYZW, R600::T98_XYZW, R600::T99_XYZW, R600::T100_XYZW, R600::T101_XYZW, R600::T102_XYZW, R600::T103_XYZW, R600::T104_XYZW, R600::T105_XYZW, R600::T106_XYZW, R600::T107_XYZW, R600::T108_XYZW, R600::T109_XYZW, R600::T110_XYZW, R600::T111_XYZW, R600::T112_XYZW, R600::T113_XYZW, R600::T114_XYZW, R600::T115_XYZW, R600::T116_XYZW, R600::T117_XYZW, R600::T118_XYZW, R600::T119_XYZW, R600::T120_XYZW, R600::T121_XYZW, R600::T122_XYZW, R600::T123_XYZW, R600::T124_XYZW, R600::T125_XYZW, R600::T126_XYZW, R600::T127_XYZW, 
  };

  // R600_Reg128 Bit set.
  const uint8_t R600_Reg128Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 
  };

  // R600_Reg128Vertical Register Class...
  const MCPhysReg R600_Reg128Vertical[] = {
    R600::V0123_W, R600::V0123_Z, R600::V0123_Y, R600::V0123_X, 
  };

  // R600_Reg128Vertical Bit set.
  const uint8_t R600_Reg128VerticalBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x92, 0x04, 
  };

  // R600_Reg128Vertical_with_sub0_in_R600_TReg32_W Register Class...
  const MCPhysReg R600_Reg128Vertical_with_sub0_in_R600_TReg32_W[] = {
    R600::V0123_W, 
  };

  // R600_Reg128Vertical_with_sub0_in_R600_TReg32_W Bit set.
  const uint8_t R600_Reg128Vertical_with_sub0_in_R600_TReg32_WBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 
  };

  // R600_Reg128Vertical_with_sub0_in_R600_TReg32_X Register Class...
  const MCPhysReg R600_Reg128Vertical_with_sub0_in_R600_TReg32_X[] = {
    R600::V0123_X, 
  };

  // R600_Reg128Vertical_with_sub0_in_R600_TReg32_X Bit set.
  const uint8_t R600_Reg128Vertical_with_sub0_in_R600_TReg32_XBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
  };

  // R600_Reg128Vertical_with_sub0_in_R600_TReg32_Y Register Class...
  const MCPhysReg R600_Reg128Vertical_with_sub0_in_R600_TReg32_Y[] = {
    R600::V0123_Y, 
  };

  // R600_Reg128Vertical_with_sub0_in_R600_TReg32_Y Bit set.
  const uint8_t R600_Reg128Vertical_with_sub0_in_R600_TReg32_YBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
  };

  // R600_Reg128Vertical_with_sub0_in_R600_TReg32_Z Register Class...
  const MCPhysReg R600_Reg128Vertical_with_sub0_in_R600_TReg32_Z[] = {
    R600::V0123_Z, 
  };

  // R600_Reg128Vertical_with_sub0_in_R600_TReg32_Z Bit set.
  const uint8_t R600_Reg128Vertical_with_sub0_in_R600_TReg32_ZBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 
  };

} // end anonymous namespace


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Woverlength-strings"
#endif
extern const char R600RegClassStrings[] = {
  /* 0 */ "R600_KC0\0"
  /* 9 */ "R600_KC1\0"
  /* 18 */ "R600_TReg32\0"
  /* 30 */ "R600_LDS_SRC_REG_and_R600_Reg32\0"
  /* 62 */ "R600_Reg64\0"
  /* 73 */ "R600_Reg128\0"
  /* 85 */ "R600_LDS_SRC_REG\0"
  /* 102 */ "R600_KC0_W\0"
  /* 113 */ "R600_KC1_W\0"
  /* 124 */ "R600_Reg64Vertical_with_sub0_in_R600_TReg32_W\0"
  /* 170 */ "R600_Reg128Vertical_with_sub0_in_R600_TReg32_W\0"
  /* 217 */ "R600_Addr_W\0"
  /* 229 */ "R600_KC0_X\0"
  /* 240 */ "R600_KC1_X\0"
  /* 251 */ "R600_Reg64Vertical_with_sub0_in_R600_TReg32_X\0"
  /* 297 */ "R600_Reg128Vertical_with_sub0_in_R600_TReg32_X\0"
  /* 344 */ "R600_KC0_Y\0"
  /* 355 */ "R600_KC1_Y\0"
  /* 366 */ "R600_Reg64Vertical_with_sub0_in_R600_TReg32_Y\0"
  /* 412 */ "R600_Reg128Vertical_with_sub0_in_R600_TReg32_Y\0"
  /* 459 */ "R600_Addr_Y\0"
  /* 471 */ "R600_KC0_Z\0"
  /* 482 */ "R600_KC1_Z\0"
  /* 493 */ "R600_Reg64Vertical_with_sub0_in_R600_TReg32_Z\0"
  /* 539 */ "R600_Reg128Vertical_with_sub0_in_R600_TReg32_Z\0"
  /* 586 */ "R600_Addr_Z\0"
  /* 598 */ "R600_ArrayBase\0"
  /* 613 */ "R600_Predicate\0"
  /* 628 */ "R600_Reg64Vertical\0"
  /* 647 */ "R600_Reg128Vertical\0"
  /* 667 */ "R600_Addr\0"
  /* 677 */ "R600_Predicate_Bit\0"
};
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif

extern const MCRegisterClass R600MCRegisterClasses[] = {
  { R600_Reg32, R600_Reg32Bits, 51, 942, sizeof(R600_Reg32Bits), R600::R600_Reg32RegClassID, 32, 1, true, false },
  { R600_TReg32, R600_TReg32Bits, 18, 513, sizeof(R600_TReg32Bits), R600::R600_TReg32RegClassID, 32, 1, true, false },
  { R600_TReg32_X, R600_TReg32_XBits, 283, 129, sizeof(R600_TReg32_XBits), R600::R600_TReg32_XRegClassID, 32, 1, true, false },
  { R600_Addr, R600_AddrBits, 667, 128, sizeof(R600_AddrBits), R600::R600_AddrRegClassID, 32, 1, false, false },
  { R600_KC0, R600_KC0Bits, 0, 128, sizeof(R600_KC0Bits), R600::R600_KC0RegClassID, 32, 1, false, false },
  { R600_KC1, R600_KC1Bits, 9, 128, sizeof(R600_KC1Bits), R600::R600_KC1RegClassID, 32, 1, false, false },
  { R600_TReg32_W, R600_TReg32_WBits, 156, 128, sizeof(R600_TReg32_WBits), R600::R600_TReg32_WRegClassID, 32, 1, true, false },
  { R600_TReg32_Y, R600_TReg32_YBits, 398, 128, sizeof(R600_TReg32_YBits), R600::R600_TReg32_YRegClassID, 32, 1, true, false },
  { R600_TReg32_Z, R600_TReg32_ZBits, 525, 128, sizeof(R600_TReg32_ZBits), R600::R600_TReg32_ZRegClassID, 32, 1, true, false },
  { R600_ArrayBase, R600_ArrayBaseBits, 598, 33, sizeof(R600_ArrayBaseBits), R600::R600_ArrayBaseRegClassID, 32, 1, true, false },
  { R600_KC0_W, R600_KC0_WBits, 102, 32, sizeof(R600_KC0_WBits), R600::R600_KC0_WRegClassID, 32, 1, false, false },
  { R600_KC0_X, R600_KC0_XBits, 229, 32, sizeof(R600_KC0_XBits), R600::R600_KC0_XRegClassID, 32, 1, false, false },
  { R600_KC0_Y, R600_KC0_YBits, 344, 32, sizeof(R600_KC0_YBits), R600::R600_KC0_YRegClassID, 32, 1, false, false },
  { R600_KC0_Z, R600_KC0_ZBits, 471, 32, sizeof(R600_KC0_ZBits), R600::R600_KC0_ZRegClassID, 32, 1, false, false },
  { R600_KC1_W, R600_KC1_WBits, 113, 32, sizeof(R600_KC1_WBits), R600::R600_KC1_WRegClassID, 32, 1, false, false },
  { R600_KC1_X, R600_KC1_XBits, 240, 32, sizeof(R600_KC1_XBits), R600::R600_KC1_XRegClassID, 32, 1, false, false },
  { R600_KC1_Y, R600_KC1_YBits, 355, 32, sizeof(R600_KC1_YBits), R600::R600_KC1_YRegClassID, 32, 1, false, false },
  { R600_KC1_Z, R600_KC1_ZBits, 482, 32, sizeof(R600_KC1_ZBits), R600::R600_KC1_ZRegClassID, 32, 1, false, false },
  { R600_LDS_SRC_REG, R600_LDS_SRC_REGBits, 85, 6, sizeof(R600_LDS_SRC_REGBits), R600::R600_LDS_SRC_REGRegClassID, 32, 1, false, false },
  { R600_Predicate, R600_PredicateBits, 613, 3, sizeof(R600_PredicateBits), R600::R600_PredicateRegClassID, 32, 1, true, false },
  { R600_Addr_W, R600_Addr_WBits, 217, 1, sizeof(R600_Addr_WBits), R600::R600_Addr_WRegClassID, 32, 1, false, false },
  { R600_Addr_Y, R600_Addr_YBits, 459, 1, sizeof(R600_Addr_YBits), R600::R600_Addr_YRegClassID, 32, 1, false, false },
  { R600_Addr_Z, R600_Addr_ZBits, 586, 1, sizeof(R600_Addr_ZBits), R600::R600_Addr_ZRegClassID, 32, 1, false, false },
  { R600_LDS_SRC_REG_and_R600_Reg32, R600_LDS_SRC_REG_and_R600_Reg32Bits, 30, 1, sizeof(R600_LDS_SRC_REG_and_R600_Reg32Bits), R600::R600_LDS_SRC_REG_and_R600_Reg32RegClassID, 32, 1, true, false },
  { R600_Predicate_Bit, R600_Predicate_BitBits, 677, 1, sizeof(R600_Predicate_BitBits), R600::R600_Predicate_BitRegClassID, 32, 1, true, false },
  { R600_Reg64, R600_Reg64Bits, 62, 64, sizeof(R600_Reg64Bits), R600::R600_Reg64RegClassID, 64, 1, true, false },
  { R600_Reg64Vertical, R600_Reg64VerticalBits, 628, 8, sizeof(R600_Reg64VerticalBits), R600::R600_Reg64VerticalRegClassID, 64, 1, true, false },
  { R600_Reg64Vertical_with_sub0_in_R600_TReg32_W, R600_Reg64Vertical_with_sub0_in_R600_TReg32_WBits, 124, 2, sizeof(R600_Reg64Vertical_with_sub0_in_R600_TReg32_WBits), R600::R600_Reg64Vertical_with_sub0_in_R600_TReg32_WRegClassID, 64, 1, true, false },
  { R600_Reg64Vertical_with_sub0_in_R600_TReg32_X, R600_Reg64Vertical_with_sub0_in_R600_TReg32_XBits, 251, 2, sizeof(R600_Reg64Vertical_with_sub0_in_R600_TReg32_XBits), R600::R600_Reg64Vertical_with_sub0_in_R600_TReg32_XRegClassID, 64, 1, true, false },
  { R600_Reg64Vertical_with_sub0_in_R600_TReg32_Y, R600_Reg64Vertical_with_sub0_in_R600_TReg32_YBits, 366, 2, sizeof(R600_Reg64Vertical_with_sub0_in_R600_TReg32_YBits), R600::R600_Reg64Vertical_with_sub0_in_R600_TReg32_YRegClassID, 64, 1, true, false },
  { R600_Reg64Vertical_with_sub0_in_R600_TReg32_Z, R600_Reg64Vertical_with_sub0_in_R600_TReg32_ZBits, 493, 2, sizeof(R600_Reg64Vertical_with_sub0_in_R600_TReg32_ZBits), R600::R600_Reg64Vertical_with_sub0_in_R600_TReg32_ZRegClassID, 64, 1, true, false },
  { R600_Reg128, R600_Reg128Bits, 73, 128, sizeof(R600_Reg128Bits), R600::R600_Reg128RegClassID, 128, -1, true, false },
  { R600_Reg128Vertical, R600_Reg128VerticalBits, 647, 4, sizeof(R600_Reg128VerticalBits), R600::R600_Reg128VerticalRegClassID, 128, 1, true, false },
  { R600_Reg128Vertical_with_sub0_in_R600_TReg32_W, R600_Reg128Vertical_with_sub0_in_R600_TReg32_WBits, 170, 1, sizeof(R600_Reg128Vertical_with_sub0_in_R600_TReg32_WBits), R600::R600_Reg128Vertical_with_sub0_in_R600_TReg32_WRegClassID, 128, 1, true, false },
  { R600_Reg128Vertical_with_sub0_in_R600_TReg32_X, R600_Reg128Vertical_with_sub0_in_R600_TReg32_XBits, 297, 1, sizeof(R600_Reg128Vertical_with_sub0_in_R600_TReg32_XBits), R600::R600_Reg128Vertical_with_sub0_in_R600_TReg32_XRegClassID, 128, 1, true, false },
  { R600_Reg128Vertical_with_sub0_in_R600_TReg32_Y, R600_Reg128Vertical_with_sub0_in_R600_TReg32_YBits, 412, 1, sizeof(R600_Reg128Vertical_with_sub0_in_R600_TReg32_YBits), R600::R600_Reg128Vertical_with_sub0_in_R600_TReg32_YRegClassID, 128, 1, true, false },
  { R600_Reg128Vertical_with_sub0_in_R600_TReg32_Z, R600_Reg128Vertical_with_sub0_in_R600_TReg32_ZBits, 539, 1, sizeof(R600_Reg128Vertical_with_sub0_in_R600_TReg32_ZBits), R600::R600_Reg128Vertical_with_sub0_in_R600_TReg32_ZRegClassID, 128, 1, true, false },
};

extern const uint16_t R600RegEncodingTable[] = {
  0,
  0,
  1789,
  253,
  765,
  1277,
  0,
  0,
  252,
  0,
  223,
  224,
  252,
  249,
  249,
  250,
  219,
  221,
  220,
  222,
  0,
  0,
  3,
  2,
  255,
  1790,
  254,
  766,
  1278,
  248,
  448,
  449,
  450,
  451,
  452,
  453,
  454,
  455,
  456,
  457,
  458,
  459,
  460,
  461,
  462,
  463,
  464,
  465,
  466,
  467,
  468,
  469,
  470,
  471,
  472,
  473,
  474,
  475,
  476,
  477,
  478,
  479,
  480,
  1536,
  1537,
  1538,
  1539,
  1540,
  1541,
  1542,
  1543,
  1544,
  1545,
  1546,
  1547,
  1548,
  1549,
  1550,
  1551,
  1552,
  1553,
  1554,
  1555,
  1556,
  1557,
  1558,
  1559,
  1560,
  1561,
  1562,
  1563,
  1564,
  1565,
  1566,
  1567,
  1568,
  1569,
  1570,
  1571,
  1572,
  1573,
  1574,
  1575,
  1576,
  1577,
  1578,
  1579,
  1580,
  1581,
  1582,
  1583,
  1584,
  1585,
  1586,
  1587,
  1588,
  1589,
  1590,
  1591,
  1592,
  1593,
  1594,
  1595,
  1596,
  1597,
  1598,
  1599,
  1600,
  1601,
  1602,
  1603,
  1604,
  1605,
  1606,
  1607,
  1608,
  1609,
  1610,
  1611,
  1612,
  1613,
  1614,
  1615,
  1616,
  1617,
  1618,
  1619,
  1620,
  1621,
  1622,
  1623,
  1624,
  1625,
  1626,
  1627,
  1628,
  1629,
  1630,
  1631,
  1632,
  1633,
  1634,
  1635,
  1636,
  1637,
  1638,
  1639,
  1640,
  1641,
  1642,
  1643,
  1644,
  1645,
  1646,
  1647,
  1648,
  1649,
  1650,
  1651,
  1652,
  1653,
  1654,
  1655,
  1656,
  1657,
  1658,
  1659,
  1660,
  1661,
  1662,
  1663,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  41,
  42,
  43,
  44,
  45,
  46,
  47,
  48,
  49,
  50,
  51,
  52,
  53,
  54,
  55,
  56,
  57,
  58,
  59,
  60,
  61,
  62,
  63,
  64,
  65,
  66,
  67,
  68,
  69,
  70,
  71,
  72,
  73,
  74,
  75,
  76,
  77,
  78,
  79,
  80,
  81,
  82,
  83,
  84,
  85,
  86,
  87,
  88,
  89,
  90,
  91,
  92,
  93,
  94,
  95,
  96,
  97,
  98,
  99,
  100,
  101,
  102,
  103,
  104,
  105,
  106,
  107,
  108,
  109,
  110,
  111,
  112,
  113,
  114,
  115,
  116,
  117,
  118,
  119,
  120,
  121,
  122,
  123,
  124,
  125,
  126,
  127,
  512,
  513,
  514,
  515,
  516,
  517,
  518,
  519,
  520,
  521,
  522,
  523,
  524,
  525,
  526,
  527,
  528,
  529,
  530,
  531,
  532,
  533,
  534,
  535,
  536,
  537,
  538,
  539,
  540,
  541,
  542,
  543,
  544,
  545,
  546,
  547,
  548,
  549,
  550,
  551,
  552,
  553,
  554,
  555,
  556,
  557,
  558,
  559,
  560,
  561,
  562,
  563,
  564,
  565,
  566,
  567,
  568,
  569,
  570,
  571,
  572,
  573,
  574,
  575,
  576,
  577,
  578,
  579,
  580,
  581,
  582,
  583,
  584,
  585,
  586,
  587,
  588,
  589,
  590,
  591,
  592,
  593,
  594,
  595,
  596,
  597,
  598,
  599,
  600,
  601,
  602,
  603,
  604,
  605,
  606,
  607,
  608,
  609,
  610,
  611,
  612,
  613,
  614,
  615,
  616,
  617,
  618,
  619,
  620,
  621,
  622,
  623,
  624,
  625,
  626,
  627,
  628,
  629,
  630,
  631,
  632,
  633,
  634,
  635,
  636,
  637,
  638,
  639,
  1024,
  1025,
  1026,
  1027,
  1028,
  1029,
  1030,
  1031,
  1032,
  1033,
  1034,
  1035,
  1036,
  1037,
  1038,
  1039,
  1040,
  1041,
  1042,
  1043,
  1044,
  1045,
  1046,
  1047,
  1048,
  1049,
  1050,
  1051,
  1052,
  1053,
  1054,
  1055,
  1056,
  1057,
  1058,
  1059,
  1060,
  1061,
  1062,
  1063,
  1064,
  1065,
  1066,
  1067,
  1068,
  1069,
  1070,
  1071,
  1072,
  1073,
  1074,
  1075,
  1076,
  1077,
  1078,
  1079,
  1080,
  1081,
  1082,
  1083,
  1084,
  1085,
  1086,
  1087,
  1088,
  1089,
  1090,
  1091,
  1092,
  1093,
  1094,
  1095,
  1096,
  1097,
  1098,
  1099,
  1100,
  1101,
  1102,
  1103,
  1104,
  1105,
  1106,
  1107,
  1108,
  1109,
  1110,
  1111,
  1112,
  1113,
  1114,
  1115,
  1116,
  1117,
  1118,
  1119,
  1120,
  1121,
  1122,
  1123,
  1124,
  1125,
  1126,
  1127,
  1128,
  1129,
  1130,
  1131,
  1132,
  1133,
  1134,
  1135,
  1136,
  1137,
  1138,
  1139,
  1140,
  1141,
  1142,
  1143,
  1144,
  1145,
  1146,
  1147,
  1148,
  1149,
  1150,
  1151,
  1536,
  1537,
  1538,
  1539,
  1540,
  1541,
  1542,
  1543,
  1544,
  1545,
  1546,
  1547,
  1548,
  1549,
  1550,
  1551,
  1552,
  1553,
  1554,
  1555,
  1556,
  1557,
  1558,
  1559,
  1560,
  1561,
  1562,
  1563,
  1564,
  1565,
  1566,
  1567,
  1568,
  1569,
  1570,
  1571,
  1572,
  1573,
  1574,
  1575,
  1576,
  1577,
  1578,
  1579,
  1580,
  1581,
  1582,
  1583,
  1584,
  1585,
  1586,
  1587,
  1588,
  1589,
  1590,
  1591,
  1592,
  1593,
  1594,
  1595,
  1596,
  1597,
  1598,
  1599,
  1600,
  1601,
  1602,
  1603,
  1604,
  1605,
  1606,
  1607,
  1608,
  1609,
  1610,
  1611,
  1612,
  1613,
  1614,
  1615,
  1616,
  1617,
  1618,
  1619,
  1620,
  1621,
  1622,
  1623,
  1624,
  1625,
  1626,
  1627,
  1628,
  1629,
  1630,
  1631,
  1632,
  1633,
  1634,
  1635,
  1636,
  1637,
  1638,
  1639,
  1640,
  1641,
  1642,
  1643,
  1644,
  1645,
  1646,
  1647,
  1648,
  1649,
  1650,
  1651,
  1652,
  1653,
  1654,
  1655,
  1656,
  1657,
  1658,
  1659,
  1660,
  1661,
  1662,
  1663,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  41,
  42,
  43,
  44,
  45,
  46,
  47,
  48,
  49,
  50,
  51,
  52,
  53,
  54,
  55,
  56,
  57,
  58,
  59,
  60,
  61,
  62,
  63,
  64,
  65,
  66,
  67,
  68,
  69,
  70,
  71,
  72,
  73,
  74,
  75,
  76,
  77,
  78,
  79,
  80,
  81,
  82,
  83,
  84,
  85,
  86,
  87,
  88,
  89,
  90,
  91,
  92,
  93,
  94,
  95,
  96,
  97,
  98,
  99,
  100,
  101,
  102,
  103,
  104,
  105,
  106,
  107,
  108,
  109,
  110,
  111,
  112,
  113,
  114,
  115,
  116,
  117,
  118,
  119,
  120,
  121,
  122,
  123,
  124,
  125,
  126,
  127,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  41,
  42,
  43,
  44,
  45,
  46,
  47,
  48,
  49,
  50,
  51,
  52,
  53,
  54,
  55,
  56,
  57,
  58,
  59,
  60,
  61,
  62,
  63,
  64,
  65,
  66,
  67,
  68,
  69,
  70,
  71,
  72,
  73,
  74,
  75,
  76,
  77,
  78,
  79,
  80,
  81,
  82,
  83,
  84,
  85,
  86,
  87,
  88,
  89,
  90,
  91,
  92,
  93,
  94,
  95,
  96,
  97,
  98,
  99,
  100,
  101,
  102,
  103,
  104,
  105,
  106,
  107,
  108,
  109,
  110,
  111,
  112,
  113,
  114,
  115,
  116,
  117,
  118,
  119,
  120,
  121,
  122,
  123,
  124,
  125,
  126,
  127,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  41,
  42,
  43,
  44,
  45,
  46,
  47,
  48,
  49,
  50,
  51,
  52,
  53,
  54,
  55,
  56,
  57,
  58,
  59,
  60,
  61,
  62,
  63,
  64,
  65,
  66,
  67,
  68,
  69,
  70,
  71,
  72,
  73,
  74,
  75,
  76,
  77,
  78,
  79,
  80,
  81,
  82,
  83,
  84,
  85,
  86,
  87,
  88,
  89,
  90,
  91,
  92,
  93,
  94,
  95,
  96,
  97,
  98,
  99,
  100,
  101,
  102,
  103,
  104,
  105,
  106,
  107,
  108,
  109,
  110,
  111,
  112,
  113,
  114,
  115,
  116,
  117,
  118,
  119,
  120,
  121,
  122,
  123,
  124,
  125,
  126,
  127,
  512,
  513,
  514,
  515,
  516,
  517,
  518,
  519,
  520,
  521,
  522,
  523,
  524,
  525,
  526,
  527,
  528,
  529,
  530,
  531,
  532,
  533,
  534,
  535,
  536,
  537,
  538,
  539,
  540,
  541,
  542,
  543,
  544,
  545,
  546,
  547,
  548,
  549,
  550,
  551,
  552,
  553,
  554,
  555,
  556,
  557,
  558,
  559,
  560,
  561,
  562,
  563,
  564,
  565,
  566,
  567,
  568,
  569,
  570,
  571,
  572,
  573,
  574,
  575,
  576,
  577,
  578,
  579,
  580,
  581,
  582,
  583,
  584,
  585,
  586,
  587,
  588,
  589,
  590,
  591,
  592,
  593,
  594,
  595,
  596,
  597,
  598,
  599,
  600,
  601,
  602,
  603,
  604,
  605,
  606,
  607,
  608,
  609,
  610,
  611,
  612,
  613,
  614,
  615,
  616,
  617,
  618,
  619,
  620,
  621,
  622,
  623,
  624,
  625,
  626,
  627,
  628,
  629,
  630,
  631,
  632,
  633,
  634,
  635,
  636,
  637,
  638,
  639,
  1024,
  1025,
  1026,
  1027,
  1028,
  1029,
  1030,
  1031,
  1032,
  1033,
  1034,
  1035,
  1036,
  1037,
  1038,
  1039,
  1040,
  1041,
  1042,
  1043,
  1044,
  1045,
  1046,
  1047,
  1048,
  1049,
  1050,
  1051,
  1052,
  1053,
  1054,
  1055,
  1056,
  1057,
  1058,
  1059,
  1060,
  1061,
  1062,
  1063,
  1064,
  1065,
  1066,
  1067,
  1068,
  1069,
  1070,
  1071,
  1072,
  1073,
  1074,
  1075,
  1076,
  1077,
  1078,
  1079,
  1080,
  1081,
  1082,
  1083,
  1084,
  1085,
  1086,
  1087,
  1088,
  1089,
  1090,
  1091,
  1092,
  1093,
  1094,
  1095,
  1096,
  1097,
  1098,
  1099,
  1100,
  1101,
  1102,
  1103,
  1104,
  1105,
  1106,
  1107,
  1108,
  1109,
  1110,
  1111,
  1112,
  1113,
  1114,
  1115,
  1116,
  1117,
  1118,
  1119,
  1120,
  1121,
  1122,
  1123,
  1124,
  1125,
  1126,
  1127,
  1128,
  1129,
  1130,
  1131,
  1132,
  1133,
  1134,
  1135,
  1136,
  1137,
  1138,
  1139,
  1140,
  1141,
  1142,
  1143,
  1144,
  1145,
  1146,
  1147,
  1148,
  1149,
  1150,
  1151,
  1536,
  1538,
  1536,
  0,
  2,
  0,
  512,
  514,
  512,
  1024,
  1026,
  1024,
  1664,
  1665,
  1666,
  1667,
  1668,
  1669,
  1670,
  1671,
  1672,
  1673,
  1674,
  1675,
  1676,
  1677,
  1678,
  1679,
  1680,
  1681,
  1682,
  1683,
  1684,
  1685,
  1686,
  1687,
  1688,
  1689,
  1690,
  1691,
  1692,
  1693,
  1694,
  1695,
  1696,
  1697,
  1698,
  1699,
  1700,
  1701,
  1702,
  1703,
  1704,
  1705,
  1706,
  1707,
  1708,
  1709,
  1710,
  1711,
  1712,
  1713,
  1714,
  1715,
  1716,
  1717,
  1718,
  1719,
  1720,
  1721,
  1722,
  1723,
  1724,
  1725,
  1726,
  1727,
  128,
  129,
  130,
  131,
  132,
  133,
  134,
  135,
  136,
  137,
  138,
  139,
  140,
  141,
  142,
  143,
  144,
  145,
  146,
  147,
  148,
  149,
  150,
  151,
  152,
  153,
  154,
  155,
  156,
  157,
  158,
  159,
  160,
  161,
  162,
  163,
  164,
  165,
  166,
  167,
  168,
  169,
  170,
  171,
  172,
  173,
  174,
  175,
  176,
  177,
  178,
  179,
  180,
  181,
  182,
  183,
  184,
  185,
  186,
  187,
  188,
  189,
  190,
  191,
  128,
  129,
  130,
  131,
  132,
  133,
  134,
  135,
  136,
  137,
  138,
  139,
  140,
  141,
  142,
  143,
  144,
  145,
  146,
  147,
  148,
  149,
  150,
  151,
  152,
  153,
  154,
  155,
  156,
  157,
  158,
  159,
  160,
  161,
  162,
  163,
  164,
  165,
  166,
  167,
  168,
  169,
  170,
  171,
  172,
  173,
  174,
  175,
  176,
  177,
  178,
  179,
  180,
  181,
  182,
  183,
  184,
  185,
  186,
  187,
  188,
  189,
  190,
  191,
  640,
  641,
  642,
  643,
  644,
  645,
  646,
  647,
  648,
  649,
  650,
  651,
  652,
  653,
  654,
  655,
  656,
  657,
  658,
  659,
  660,
  661,
  662,
  663,
  664,
  665,
  666,
  667,
  668,
  669,
  670,
  671,
  672,
  673,
  674,
  675,
  676,
  677,
  678,
  679,
  680,
  681,
  682,
  683,
  684,
  685,
  686,
  687,
  688,
  689,
  690,
  691,
  692,
  693,
  694,
  695,
  696,
  697,
  698,
  699,
  700,
  701,
  702,
  703,
  1152,
  1153,
  1154,
  1155,
  1156,
  1157,
  1158,
  1159,
  1160,
  1161,
  1162,
  1163,
  1164,
  1165,
  1166,
  1167,
  1168,
  1169,
  1170,
  1171,
  1172,
  1173,
  1174,
  1175,
  1176,
  1177,
  1178,
  1179,
  1180,
  1181,
  1182,
  1183,
  1184,
  1185,
  1186,
  1187,
  1188,
  1189,
  1190,
  1191,
  1192,
  1193,
  1194,
  1195,
  1196,
  1197,
  1198,
  1199,
  1200,
  1201,
  1202,
  1203,
  1204,
  1205,
  1206,
  1207,
  1208,
  1209,
  1210,
  1211,
  1212,
  1213,
  1214,
  1215,
};
static inline void InitR600MCRegisterInfo(MCRegisterInfo *RI, unsigned RA, unsigned DwarfFlavour = 0, unsigned EHFlavour = 0, unsigned PC = 0) {
  RI->InitMCRegisterInfo(R600RegDesc, 1675, RA, PC, R600MCRegisterClasses, 37, R600RegUnitRoots, 1342, R600RegDiffLists, R600LaneMaskLists, R600RegStrings, R600RegClassStrings, R600SubRegIdxLists, 17,
R600RegEncodingTable);

}

} // end namespace llvm

#endif // GET_REGINFO_MC_DESC

/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Register Information Header Fragment                                       *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_HEADER
#undef GET_REGINFO_HEADER

#include "llvm/CodeGen/TargetRegisterInfo.h"

namespace llvm {

class R600FrameLowering;

struct R600GenRegisterInfo : public TargetRegisterInfo {
  explicit R600GenRegisterInfo(unsigned RA, unsigned D = 0, unsigned E = 0,
      unsigned PC = 0, unsigned HwMode = 0);
  unsigned composeSubRegIndicesImpl(unsigned, unsigned) const override;
  LaneBitmask composeSubRegIndexLaneMaskImpl(unsigned, LaneBitmask) const override;
  LaneBitmask reverseComposeSubRegIndexLaneMaskImpl(unsigned, LaneBitmask) const override;
  const TargetRegisterClass *getSubClassWithSubReg(const TargetRegisterClass *, unsigned) const override;
  const TargetRegisterClass *getSubRegisterClass(const TargetRegisterClass *, unsigned) const override;
  const RegClassWeight &getRegClassWeight(const TargetRegisterClass *RC) const override;
  unsigned getRegUnitWeight(unsigned RegUnit) const override;
  unsigned getNumRegPressureSets() const override;
  const char *getRegPressureSetName(unsigned Idx) const override;
  unsigned getRegPressureSetLimit(const MachineFunction &MF, unsigned Idx) const override;
  const int *getRegClassPressureSets(const TargetRegisterClass *RC) const override;
  const int *getRegUnitPressureSets(unsigned RegUnit) const override;
  ArrayRef<const char *> getRegMaskNames() const override;
  ArrayRef<const uint32_t *> getRegMasks() const override;
  bool isGeneralPurposeRegister(const MachineFunction &, MCRegister) const override;
  bool isFixedRegister(const MachineFunction &, MCRegister) const override;
  bool isArgumentRegister(const MachineFunction &, MCRegister) const override;
  bool isConstantPhysReg(MCRegister PhysReg) const override final;
  /// Devirtualized TargetFrameLowering.
  static const R600FrameLowering *getFrameLowering(
      const MachineFunction &MF);
};

namespace R600 { // Register classes
  extern const TargetRegisterClass R600_Reg32RegClass;
  extern const TargetRegisterClass R600_TReg32RegClass;
  extern const TargetRegisterClass R600_TReg32_XRegClass;
  extern const TargetRegisterClass R600_AddrRegClass;
  extern const TargetRegisterClass R600_KC0RegClass;
  extern const TargetRegisterClass R600_KC1RegClass;
  extern const TargetRegisterClass R600_TReg32_WRegClass;
  extern const TargetRegisterClass R600_TReg32_YRegClass;
  extern const TargetRegisterClass R600_TReg32_ZRegClass;
  extern const TargetRegisterClass R600_ArrayBaseRegClass;
  extern const TargetRegisterClass R600_KC0_WRegClass;
  extern const TargetRegisterClass R600_KC0_XRegClass;
  extern const TargetRegisterClass R600_KC0_YRegClass;
  extern const TargetRegisterClass R600_KC0_ZRegClass;
  extern const TargetRegisterClass R600_KC1_WRegClass;
  extern const TargetRegisterClass R600_KC1_XRegClass;
  extern const TargetRegisterClass R600_KC1_YRegClass;
  extern const TargetRegisterClass R600_KC1_ZRegClass;
  extern const TargetRegisterClass R600_LDS_SRC_REGRegClass;
  extern const TargetRegisterClass R600_PredicateRegClass;
  extern const TargetRegisterClass R600_Addr_WRegClass;
  extern const TargetRegisterClass R600_Addr_YRegClass;
  extern const TargetRegisterClass R600_Addr_ZRegClass;
  extern const TargetRegisterClass R600_LDS_SRC_REG_and_R600_Reg32RegClass;
  extern const TargetRegisterClass R600_Predicate_BitRegClass;
  extern const TargetRegisterClass R600_Reg64RegClass;
  extern const TargetRegisterClass R600_Reg64VerticalRegClass;
  extern const TargetRegisterClass R600_Reg64Vertical_with_sub0_in_R600_TReg32_WRegClass;
  extern const TargetRegisterClass R600_Reg64Vertical_with_sub0_in_R600_TReg32_XRegClass;
  extern const TargetRegisterClass R600_Reg64Vertical_with_sub0_in_R600_TReg32_YRegClass;
  extern const TargetRegisterClass R600_Reg64Vertical_with_sub0_in_R600_TReg32_ZRegClass;
  extern const TargetRegisterClass R600_Reg128RegClass;
  extern const TargetRegisterClass R600_Reg128VerticalRegClass;
  extern const TargetRegisterClass R600_Reg128Vertical_with_sub0_in_R600_TReg32_WRegClass;
  extern const TargetRegisterClass R600_Reg128Vertical_with_sub0_in_R600_TReg32_XRegClass;
  extern const TargetRegisterClass R600_Reg128Vertical_with_sub0_in_R600_TReg32_YRegClass;
  extern const TargetRegisterClass R600_Reg128Vertical_with_sub0_in_R600_TReg32_ZRegClass;
} // end namespace R600

} // end namespace llvm

#endif // GET_REGINFO_HEADER

/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Target Register and Register Classes Information                           *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_TARGET_DESC
#undef GET_REGINFO_TARGET_DESC

namespace llvm {

extern const MCRegisterClass R600MCRegisterClasses[];

static const MVT::SimpleValueType VTLists[] = {
  /* 0 */ MVT::f32, MVT::i32, MVT::Other,
  /* 3 */ MVT::v2f32, MVT::v2i32, MVT::i64, MVT::f64, MVT::Other,
  /* 8 */ MVT::v2f32, MVT::v2i32, MVT::Other,
  /* 11 */ MVT::v4f32, MVT::v4i32, MVT::Other,
};

static const char *SubRegIndexNameTable[] = { "sub0", "sub1", "sub2", "sub3", "sub4", "sub5", "sub6", "sub7", "sub8", "sub9", "sub10", "sub11", "sub12", "sub13", "sub14", "sub15", "" };

static const TargetRegisterInfo::SubRegCoveredBits SubRegIdxRangeTable[] = {
  { 65535, 65535 },
  { 0, 32 },	// sub0
  { 32, 32 },	// sub1
  { 64, 32 },	// sub2
  { 96, 32 },	// sub3
  { 128, 32 },	// sub4
  { 160, 32 },	// sub5
  { 192, 32 },	// sub6
  { 224, 32 },	// sub7
  { 256, 32 },	// sub8
  { 288, 32 },	// sub9
  { 320, 32 },	// sub10
  { 352, 32 },	// sub11
  { 384, 32 },	// sub12
  { 416, 32 },	// sub13
  { 448, 32 },	// sub14
  { 480, 32 },	// sub15
};


static const LaneBitmask SubRegIndexLaneMaskTable[] = {
  LaneBitmask::getAll(),
  LaneBitmask(0x0000000000000001), // sub0
  LaneBitmask(0x0000000000000002), // sub1
  LaneBitmask(0x0000000000000004), // sub2
  LaneBitmask(0x0000000000000008), // sub3
  LaneBitmask(0x0000000000000010), // sub4
  LaneBitmask(0x0000000000000020), // sub5
  LaneBitmask(0x0000000000000040), // sub6
  LaneBitmask(0x0000000000000080), // sub7
  LaneBitmask(0x0000000000000100), // sub8
  LaneBitmask(0x0000000000000200), // sub9
  LaneBitmask(0x0000000000000400), // sub10
  LaneBitmask(0x0000000000000800), // sub11
  LaneBitmask(0x0000000000001000), // sub12
  LaneBitmask(0x0000000000002000), // sub13
  LaneBitmask(0x0000000000004000), // sub14
  LaneBitmask(0x0000000000008000), // sub15
 };



static const TargetRegisterInfo::RegClassInfo RegClassInfos[] = {
  // Mode = 0 (Default)
  { 32, 32, 32, /*VTLists+*/0 },    // R600_Reg32
  { 32, 32, 32, /*VTLists+*/0 },    // R600_TReg32
  { 32, 32, 32, /*VTLists+*/0 },    // R600_TReg32_X
  { 32, 32, 32, /*VTLists+*/1 },    // R600_Addr
  { 32, 32, 32, /*VTLists+*/0 },    // R600_KC0
  { 32, 32, 32, /*VTLists+*/0 },    // R600_KC1
  { 32, 32, 32, /*VTLists+*/0 },    // R600_TReg32_W
  { 32, 32, 32, /*VTLists+*/0 },    // R600_TReg32_Y
  { 32, 32, 32, /*VTLists+*/0 },    // R600_TReg32_Z
  { 32, 32, 32, /*VTLists+*/0 },    // R600_ArrayBase
  { 32, 32, 32, /*VTLists+*/0 },    // R600_KC0_W
  { 32, 32, 32, /*VTLists+*/0 },    // R600_KC0_X
  { 32, 32, 32, /*VTLists+*/0 },    // R600_KC0_Y
  { 32, 32, 32, /*VTLists+*/0 },    // R600_KC0_Z
  { 32, 32, 32, /*VTLists+*/0 },    // R600_KC1_W
  { 32, 32, 32, /*VTLists+*/0 },    // R600_KC1_X
  { 32, 32, 32, /*VTLists+*/0 },    // R600_KC1_Y
  { 32, 32, 32, /*VTLists+*/0 },    // R600_KC1_Z
  { 32, 32, 32, /*VTLists+*/1 },    // R600_LDS_SRC_REG
  { 32, 32, 32, /*VTLists+*/1 },    // R600_Predicate
  { 32, 32, 32, /*VTLists+*/1 },    // R600_Addr_W
  { 32, 32, 32, /*VTLists+*/1 },    // R600_Addr_Y
  { 32, 32, 32, /*VTLists+*/1 },    // R600_Addr_Z
  { 32, 32, 32, /*VTLists+*/1 },    // R600_LDS_SRC_REG_and_R600_Reg32
  { 32, 32, 32, /*VTLists+*/1 },    // R600_Predicate_Bit
  { 64, 64, 64, /*VTLists+*/3 },    // R600_Reg64
  { 64, 64, 64, /*VTLists+*/8 },    // R600_Reg64Vertical
  { 64, 64, 64, /*VTLists+*/8 },    // R600_Reg64Vertical_with_sub0_in_R600_TReg32_W
  { 64, 64, 64, /*VTLists+*/8 },    // R600_Reg64Vertical_with_sub0_in_R600_TReg32_X
  { 64, 64, 64, /*VTLists+*/8 },    // R600_Reg64Vertical_with_sub0_in_R600_TReg32_Y
  { 64, 64, 64, /*VTLists+*/8 },    // R600_Reg64Vertical_with_sub0_in_R600_TReg32_Z
  { 128, 128, 128, /*VTLists+*/11 },    // R600_Reg128
  { 128, 128, 128, /*VTLists+*/11 },    // R600_Reg128Vertical
  { 128, 128, 128, /*VTLists+*/11 },    // R600_Reg128Vertical_with_sub0_in_R600_TReg32_W
  { 128, 128, 128, /*VTLists+*/11 },    // R600_Reg128Vertical_with_sub0_in_R600_TReg32_X
  { 128, 128, 128, /*VTLists+*/11 },    // R600_Reg128Vertical_with_sub0_in_R600_TReg32_Y
  { 128, 128, 128, /*VTLists+*/11 },    // R600_Reg128Vertical_with_sub0_in_R600_TReg32_Z
};

static const TargetRegisterClass *const NullRegClasses[] = { nullptr };

static const uint32_t R600_Reg32SubClassMask[] = {
  0x0083ffff, 0x00000000, 
  0xfe000000, 0x0000001f, // sub0
  0xfe000000, 0x0000001f, // sub1
  0x80000000, 0x0000001f, // sub2
  0x80000000, 0x0000001f, // sub3
};

static const uint32_t R600_TReg32SubClassMask[] = {
  0x000001c6, 0x00000000, 
  0xfe000000, 0x0000001f, // sub0
  0xfe000000, 0x0000001f, // sub1
  0x80000000, 0x0000001f, // sub2
  0x80000000, 0x0000001f, // sub3
};

static const uint32_t R600_TReg32_XSubClassMask[] = {
  0x00000004, 0x00000000, 
  0x92000000, 0x00000004, // sub0
  0x10000000, 0x00000004, // sub1
  0x00000000, 0x00000004, // sub2
  0x00000000, 0x00000004, // sub3
};

static const uint32_t R600_AddrSubClassMask[] = {
  0x00000008, 0x00000000, 
};

static const uint32_t R600_KC0SubClassMask[] = {
  0x00003c10, 0x00000000, 
};

static const uint32_t R600_KC1SubClassMask[] = {
  0x0003c020, 0x00000000, 
};

static const uint32_t R600_TReg32_WSubClassMask[] = {
  0x00000040, 0x00000000, 
  0x08000000, 0x00000002, // sub0
  0x08000000, 0x00000002, // sub1
  0x00000000, 0x00000002, // sub2
  0x80000000, 0x00000002, // sub3
};

static const uint32_t R600_TReg32_YSubClassMask[] = {
  0x00000080, 0x00000000, 
  0x20000000, 0x00000008, // sub0
  0xa2000000, 0x00000008, // sub1
  0x00000000, 0x00000008, // sub2
  0x00000000, 0x00000008, // sub3
};

static const uint32_t R600_TReg32_ZSubClassMask[] = {
  0x00000100, 0x00000000, 
  0x40000000, 0x00000010, // sub0
  0x40000000, 0x00000010, // sub1
  0x80000000, 0x00000010, // sub2
  0x00000000, 0x00000010, // sub3
};

static const uint32_t R600_ArrayBaseSubClassMask[] = {
  0x00000200, 0x00000000, 
};

static const uint32_t R600_KC0_WSubClassMask[] = {
  0x00000400, 0x00000000, 
};

static const uint32_t R600_KC0_XSubClassMask[] = {
  0x00000800, 0x00000000, 
};

static const uint32_t R600_KC0_YSubClassMask[] = {
  0x00001000, 0x00000000, 
};

static const uint32_t R600_KC0_ZSubClassMask[] = {
  0x00002000, 0x00000000, 
};

static const uint32_t R600_KC1_WSubClassMask[] = {
  0x00004000, 0x00000000, 
};

static const uint32_t R600_KC1_XSubClassMask[] = {
  0x00008000, 0x00000000, 
};

static const uint32_t R600_KC1_YSubClassMask[] = {
  0x00010000, 0x00000000, 
};

static const uint32_t R600_KC1_ZSubClassMask[] = {
  0x00020000, 0x00000000, 
};

static const uint32_t R600_LDS_SRC_REGSubClassMask[] = {
  0x00840000, 0x00000000, 
};

static const uint32_t R600_PredicateSubClassMask[] = {
  0x00080000, 0x00000000, 
};

static const uint32_t R600_Addr_WSubClassMask[] = {
  0x00100000, 0x00000000, 
};

static const uint32_t R600_Addr_YSubClassMask[] = {
  0x00200000, 0x00000000, 
};

static const uint32_t R600_Addr_ZSubClassMask[] = {
  0x00400000, 0x00000000, 
};

static const uint32_t R600_LDS_SRC_REG_and_R600_Reg32SubClassMask[] = {
  0x00800000, 0x00000000, 
};

static const uint32_t R600_Predicate_BitSubClassMask[] = {
  0x01000000, 0x00000000, 
};

static const uint32_t R600_Reg64SubClassMask[] = {
  0x02000000, 0x00000000, 
};

static const uint32_t R600_Reg64VerticalSubClassMask[] = {
  0x7c000000, 0x00000000, 
};

static const uint32_t R600_Reg64Vertical_with_sub0_in_R600_TReg32_WSubClassMask[] = {
  0x08000000, 0x00000000, 
};

static const uint32_t R600_Reg64Vertical_with_sub0_in_R600_TReg32_XSubClassMask[] = {
  0x10000000, 0x00000000, 
};

static const uint32_t R600_Reg64Vertical_with_sub0_in_R600_TReg32_YSubClassMask[] = {
  0x20000000, 0x00000000, 
};

static const uint32_t R600_Reg64Vertical_with_sub0_in_R600_TReg32_ZSubClassMask[] = {
  0x40000000, 0x00000000, 
};

static const uint32_t R600_Reg128SubClassMask[] = {
  0x80000000, 0x00000000, 
};

static const uint32_t R600_Reg128VerticalSubClassMask[] = {
  0x00000000, 0x0000001f, 
};

static const uint32_t R600_Reg128Vertical_with_sub0_in_R600_TReg32_WSubClassMask[] = {
  0x00000000, 0x00000002, 
};

static const uint32_t R600_Reg128Vertical_with_sub0_in_R600_TReg32_XSubClassMask[] = {
  0x00000000, 0x00000004, 
};

static const uint32_t R600_Reg128Vertical_with_sub0_in_R600_TReg32_YSubClassMask[] = {
  0x00000000, 0x00000008, 
};

static const uint32_t R600_Reg128Vertical_with_sub0_in_R600_TReg32_ZSubClassMask[] = {
  0x00000000, 0x00000010, 
};

static const uint16_t SuperRegIdxSeqs[] = {
  /* 0 */ 1, 2, 3, 4, 0,
};

static const TargetRegisterClass *const R600_TReg32Superclasses[] = {
  &R600::R600_Reg32RegClass,
  nullptr
};

static const TargetRegisterClass *const R600_TReg32_XSuperclasses[] = {
  &R600::R600_Reg32RegClass,
  &R600::R600_TReg32RegClass,
  nullptr
};

static const TargetRegisterClass *const R600_AddrSuperclasses[] = {
  &R600::R600_Reg32RegClass,
  nullptr
};

static const TargetRegisterClass *const R600_KC0Superclasses[] = {
  &R600::R600_Reg32RegClass,
  nullptr
};

static const TargetRegisterClass *const R600_KC1Superclasses[] = {
  &R600::R600_Reg32RegClass,
  nullptr
};

static const TargetRegisterClass *const R600_TReg32_WSuperclasses[] = {
  &R600::R600_Reg32RegClass,
  &R600::R600_TReg32RegClass,
  nullptr
};

static const TargetRegisterClass *const R600_TReg32_YSuperclasses[] = {
  &R600::R600_Reg32RegClass,
  &R600::R600_TReg32RegClass,
  nullptr
};

static const TargetRegisterClass *const R600_TReg32_ZSuperclasses[] = {
  &R600::R600_Reg32RegClass,
  &R600::R600_TReg32RegClass,
  nullptr
};

static const TargetRegisterClass *const R600_ArrayBaseSuperclasses[] = {
  &R600::R600_Reg32RegClass,
  nullptr
};

static const TargetRegisterClass *const R600_KC0_WSuperclasses[] = {
  &R600::R600_Reg32RegClass,
  &R600::R600_KC0RegClass,
  nullptr
};

static const TargetRegisterClass *const R600_KC0_XSuperclasses[] = {
  &R600::R600_Reg32RegClass,
  &R600::R600_KC0RegClass,
  nullptr
};

static const TargetRegisterClass *const R600_KC0_YSuperclasses[] = {
  &R600::R600_Reg32RegClass,
  &R600::R600_KC0RegClass,
  nullptr
};

static const TargetRegisterClass *const R600_KC0_ZSuperclasses[] = {
  &R600::R600_Reg32RegClass,
  &R600::R600_KC0RegClass,
  nullptr
};

static const TargetRegisterClass *const R600_KC1_WSuperclasses[] = {
  &R600::R600_Reg32RegClass,
  &R600::R600_KC1RegClass,
  nullptr
};

static const TargetRegisterClass *const R600_KC1_XSuperclasses[] = {
  &R600::R600_Reg32RegClass,
  &R600::R600_KC1RegClass,
  nullptr
};

static const TargetRegisterClass *const R600_KC1_YSuperclasses[] = {
  &R600::R600_Reg32RegClass,
  &R600::R600_KC1RegClass,
  nullptr
};

static const TargetRegisterClass *const R600_KC1_ZSuperclasses[] = {
  &R600::R600_Reg32RegClass,
  &R600::R600_KC1RegClass,
  nullptr
};

static const TargetRegisterClass *const R600_LDS_SRC_REG_and_R600_Reg32Superclasses[] = {
  &R600::R600_Reg32RegClass,
  &R600::R600_LDS_SRC_REGRegClass,
  nullptr
};

static const TargetRegisterClass *const R600_Reg64Vertical_with_sub0_in_R600_TReg32_WSuperclasses[] = {
  &R600::R600_Reg64VerticalRegClass,
  nullptr
};

static const TargetRegisterClass *const R600_Reg64Vertical_with_sub0_in_R600_TReg32_XSuperclasses[] = {
  &R600::R600_Reg64VerticalRegClass,
  nullptr
};

static const TargetRegisterClass *const R600_Reg64Vertical_with_sub0_in_R600_TReg32_YSuperclasses[] = {
  &R600::R600_Reg64VerticalRegClass,
  nullptr
};

static const TargetRegisterClass *const R600_Reg64Vertical_with_sub0_in_R600_TReg32_ZSuperclasses[] = {
  &R600::R600_Reg64VerticalRegClass,
  nullptr
};

static const TargetRegisterClass *const R600_Reg128Vertical_with_sub0_in_R600_TReg32_WSuperclasses[] = {
  &R600::R600_Reg128VerticalRegClass,
  nullptr
};

static const TargetRegisterClass *const R600_Reg128Vertical_with_sub0_in_R600_TReg32_XSuperclasses[] = {
  &R600::R600_Reg128VerticalRegClass,
  nullptr
};

static const TargetRegisterClass *const R600_Reg128Vertical_with_sub0_in_R600_TReg32_YSuperclasses[] = {
  &R600::R600_Reg128VerticalRegClass,
  nullptr
};

static const TargetRegisterClass *const R600_Reg128Vertical_with_sub0_in_R600_TReg32_ZSuperclasses[] = {
  &R600::R600_Reg128VerticalRegClass,
  nullptr
};


namespace R600 {   // Register class instances
  extern const TargetRegisterClass R600_Reg32RegClass = {
    &R600MCRegisterClasses[R600_Reg32RegClassID],
    R600_Reg32SubClassMask,
    SuperRegIdxSeqs + 0,
    LaneBitmask(0x0000000000000001),
    0,
    false,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass R600_TReg32RegClass = {
    &R600MCRegisterClasses[R600_TReg32RegClassID],
    R600_TReg32SubClassMask,
    SuperRegIdxSeqs + 0,
    LaneBitmask(0x0000000000000001),
    0,
    false,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    R600_TReg32Superclasses,
    nullptr
  };

  extern const TargetRegisterClass R600_TReg32_XRegClass = {
    &R600MCRegisterClasses[R600_TReg32_XRegClassID],
    R600_TReg32_XSubClassMask,
    SuperRegIdxSeqs + 0,
    LaneBitmask(0x0000000000000001),
    0,
    false,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    R600_TReg32_XSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass R600_AddrRegClass = {
    &R600MCRegisterClasses[R600_AddrRegClassID],
    R600_AddrSubClassMask,
    SuperRegIdxSeqs + 4,
    LaneBitmask(0x0000000000000001),
    0,
    false,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    R600_AddrSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass R600_KC0RegClass = {
    &R600MCRegisterClasses[R600_KC0RegClassID],
    R600_KC0SubClassMask,
    SuperRegIdxSeqs + 4,
    LaneBitmask(0x0000000000000001),
    0,
    false,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    R600_KC0Superclasses,
    nullptr
  };

  extern const TargetRegisterClass R600_KC1RegClass = {
    &R600MCRegisterClasses[R600_KC1RegClassID],
    R600_KC1SubClassMask,
    SuperRegIdxSeqs + 4,
    LaneBitmask(0x0000000000000001),
    0,
    false,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    R600_KC1Superclasses,
    nullptr
  };

  extern const TargetRegisterClass R600_TReg32_WRegClass = {
    &R600MCRegisterClasses[R600_TReg32_WRegClassID],
    R600_TReg32_WSubClassMask,
    SuperRegIdxSeqs + 0,
    LaneBitmask(0x0000000000000001),
    0,
    false,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    R600_TReg32_WSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass R600_TReg32_YRegClass = {
    &R600MCRegisterClasses[R600_TReg32_YRegClassID],
    R600_TReg32_YSubClassMask,
    SuperRegIdxSeqs + 0,
    LaneBitmask(0x0000000000000001),
    0,
    false,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    R600_TReg32_YSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass R600_TReg32_ZRegClass = {
    &R600MCRegisterClasses[R600_TReg32_ZRegClassID],
    R600_TReg32_ZSubClassMask,
    SuperRegIdxSeqs + 0,
    LaneBitmask(0x0000000000000001),
    0,
    false,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    R600_TReg32_ZSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass R600_ArrayBaseRegClass = {
    &R600MCRegisterClasses[R600_ArrayBaseRegClassID],
    R600_ArrayBaseSubClassMask,
    SuperRegIdxSeqs + 4,
    LaneBitmask(0x0000000000000001),
    0,
    false,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    R600_ArrayBaseSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass R600_KC0_WRegClass = {
    &R600MCRegisterClasses[R600_KC0_WRegClassID],
    R600_KC0_WSubClassMask,
    SuperRegIdxSeqs + 4,
    LaneBitmask(0x0000000000000001),
    0,
    false,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    R600_KC0_WSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass R600_KC0_XRegClass = {
    &R600MCRegisterClasses[R600_KC0_XRegClassID],
    R600_KC0_XSubClassMask,
    SuperRegIdxSeqs + 4,
    LaneBitmask(0x0000000000000001),
    0,
    false,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    R600_KC0_XSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass R600_KC0_YRegClass = {
    &R600MCRegisterClasses[R600_KC0_YRegClassID],
    R600_KC0_YSubClassMask,
    SuperRegIdxSeqs + 4,
    LaneBitmask(0x0000000000000001),
    0,
    false,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    R600_KC0_YSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass R600_KC0_ZRegClass = {
    &R600MCRegisterClasses[R600_KC0_ZRegClassID],
    R600_KC0_ZSubClassMask,
    SuperRegIdxSeqs + 4,
    LaneBitmask(0x0000000000000001),
    0,
    false,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    R600_KC0_ZSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass R600_KC1_WRegClass = {
    &R600MCRegisterClasses[R600_KC1_WRegClassID],
    R600_KC1_WSubClassMask,
    SuperRegIdxSeqs + 4,
    LaneBitmask(0x0000000000000001),
    0,
    false,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    R600_KC1_WSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass R600_KC1_XRegClass = {
    &R600MCRegisterClasses[R600_KC1_XRegClassID],
    R600_KC1_XSubClassMask,
    SuperRegIdxSeqs + 4,
    LaneBitmask(0x0000000000000001),
    0,
    false,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    R600_KC1_XSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass R600_KC1_YRegClass = {
    &R600MCRegisterClasses[R600_KC1_YRegClassID],
    R600_KC1_YSubClassMask,
    SuperRegIdxSeqs + 4,
    LaneBitmask(0x0000000000000001),
    0,
    false,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    R600_KC1_YSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass R600_KC1_ZRegClass = {
    &R600MCRegisterClasses[R600_KC1_ZRegClassID],
    R600_KC1_ZSubClassMask,
    SuperRegIdxSeqs + 4,
    LaneBitmask(0x0000000000000001),
    0,
    false,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    R600_KC1_ZSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass R600_LDS_SRC_REGRegClass = {
    &R600MCRegisterClasses[R600_LDS_SRC_REGRegClassID],
    R600_LDS_SRC_REGSubClassMask,
    SuperRegIdxSeqs + 4,
    LaneBitmask(0x0000000000000001),
    0,
    false,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass R600_PredicateRegClass = {
    &R600MCRegisterClasses[R600_PredicateRegClassID],
    R600_PredicateSubClassMask,
    SuperRegIdxSeqs + 4,
    LaneBitmask(0x0000000000000001),
    0,
    false,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass R600_Addr_WRegClass = {
    &R600MCRegisterClasses[R600_Addr_WRegClassID],
    R600_Addr_WSubClassMask,
    SuperRegIdxSeqs + 4,
    LaneBitmask(0x0000000000000001),
    0,
    false,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass R600_Addr_YRegClass = {
    &R600MCRegisterClasses[R600_Addr_YRegClassID],
    R600_Addr_YSubClassMask,
    SuperRegIdxSeqs + 4,
    LaneBitmask(0x0000000000000001),
    0,
    false,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass R600_Addr_ZRegClass = {
    &R600MCRegisterClasses[R600_Addr_ZRegClassID],
    R600_Addr_ZSubClassMask,
    SuperRegIdxSeqs + 4,
    LaneBitmask(0x0000000000000001),
    0,
    false,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass R600_LDS_SRC_REG_and_R600_Reg32RegClass = {
    &R600MCRegisterClasses[R600_LDS_SRC_REG_and_R600_Reg32RegClassID],
    R600_LDS_SRC_REG_and_R600_Reg32SubClassMask,
    SuperRegIdxSeqs + 4,
    LaneBitmask(0x0000000000000001),
    0,
    false,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    R600_LDS_SRC_REG_and_R600_Reg32Superclasses,
    nullptr
  };

  extern const TargetRegisterClass R600_Predicate_BitRegClass = {
    &R600MCRegisterClasses[R600_Predicate_BitRegClassID],
    R600_Predicate_BitSubClassMask,
    SuperRegIdxSeqs + 4,
    LaneBitmask(0x0000000000000001),
    0,
    false,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass R600_Reg64RegClass = {
    &R600MCRegisterClasses[R600_Reg64RegClassID],
    R600_Reg64SubClassMask,
    SuperRegIdxSeqs + 4,
    LaneBitmask(0x0000000000000003),
    0,
    false,
    0x00, /* TSFlags */
    true, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass R600_Reg64VerticalRegClass = {
    &R600MCRegisterClasses[R600_Reg64VerticalRegClassID],
    R600_Reg64VerticalSubClassMask,
    SuperRegIdxSeqs + 4,
    LaneBitmask(0x0000000000000003),
    0,
    false,
    0x00, /* TSFlags */
    true, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass R600_Reg64Vertical_with_sub0_in_R600_TReg32_WRegClass = {
    &R600MCRegisterClasses[R600_Reg64Vertical_with_sub0_in_R600_TReg32_WRegClassID],
    R600_Reg64Vertical_with_sub0_in_R600_TReg32_WSubClassMask,
    SuperRegIdxSeqs + 4,
    LaneBitmask(0x0000000000000003),
    0,
    false,
    0x00, /* TSFlags */
    true, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    R600_Reg64Vertical_with_sub0_in_R600_TReg32_WSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass R600_Reg64Vertical_with_sub0_in_R600_TReg32_XRegClass = {
    &R600MCRegisterClasses[R600_Reg64Vertical_with_sub0_in_R600_TReg32_XRegClassID],
    R600_Reg64Vertical_with_sub0_in_R600_TReg32_XSubClassMask,
    SuperRegIdxSeqs + 4,
    LaneBitmask(0x0000000000000003),
    0,
    false,
    0x00, /* TSFlags */
    true, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    R600_Reg64Vertical_with_sub0_in_R600_TReg32_XSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass R600_Reg64Vertical_with_sub0_in_R600_TReg32_YRegClass = {
    &R600MCRegisterClasses[R600_Reg64Vertical_with_sub0_in_R600_TReg32_YRegClassID],
    R600_Reg64Vertical_with_sub0_in_R600_TReg32_YSubClassMask,
    SuperRegIdxSeqs + 4,
    LaneBitmask(0x0000000000000003),
    0,
    false,
    0x00, /* TSFlags */
    true, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    R600_Reg64Vertical_with_sub0_in_R600_TReg32_YSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass R600_Reg64Vertical_with_sub0_in_R600_TReg32_ZRegClass = {
    &R600MCRegisterClasses[R600_Reg64Vertical_with_sub0_in_R600_TReg32_ZRegClassID],
    R600_Reg64Vertical_with_sub0_in_R600_TReg32_ZSubClassMask,
    SuperRegIdxSeqs + 4,
    LaneBitmask(0x0000000000000003),
    0,
    false,
    0x00, /* TSFlags */
    true, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    R600_Reg64Vertical_with_sub0_in_R600_TReg32_ZSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass R600_Reg128RegClass = {
    &R600MCRegisterClasses[R600_Reg128RegClassID],
    R600_Reg128SubClassMask,
    SuperRegIdxSeqs + 4,
    LaneBitmask(0x000000000000000F),
    0,
    false,
    0x00, /* TSFlags */
    true, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass R600_Reg128VerticalRegClass = {
    &R600MCRegisterClasses[R600_Reg128VerticalRegClassID],
    R600_Reg128VerticalSubClassMask,
    SuperRegIdxSeqs + 4,
    LaneBitmask(0x000000000000000F),
    0,
    false,
    0x00, /* TSFlags */
    true, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass R600_Reg128Vertical_with_sub0_in_R600_TReg32_WRegClass = {
    &R600MCRegisterClasses[R600_Reg128Vertical_with_sub0_in_R600_TReg32_WRegClassID],
    R600_Reg128Vertical_with_sub0_in_R600_TReg32_WSubClassMask,
    SuperRegIdxSeqs + 4,
    LaneBitmask(0x000000000000000F),
    0,
    false,
    0x00, /* TSFlags */
    true, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    R600_Reg128Vertical_with_sub0_in_R600_TReg32_WSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass R600_Reg128Vertical_with_sub0_in_R600_TReg32_XRegClass = {
    &R600MCRegisterClasses[R600_Reg128Vertical_with_sub0_in_R600_TReg32_XRegClassID],
    R600_Reg128Vertical_with_sub0_in_R600_TReg32_XSubClassMask,
    SuperRegIdxSeqs + 4,
    LaneBitmask(0x000000000000000F),
    0,
    false,
    0x00, /* TSFlags */
    true, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    R600_Reg128Vertical_with_sub0_in_R600_TReg32_XSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass R600_Reg128Vertical_with_sub0_in_R600_TReg32_YRegClass = {
    &R600MCRegisterClasses[R600_Reg128Vertical_with_sub0_in_R600_TReg32_YRegClassID],
    R600_Reg128Vertical_with_sub0_in_R600_TReg32_YSubClassMask,
    SuperRegIdxSeqs + 4,
    LaneBitmask(0x000000000000000F),
    0,
    false,
    0x00, /* TSFlags */
    true, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    R600_Reg128Vertical_with_sub0_in_R600_TReg32_YSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass R600_Reg128Vertical_with_sub0_in_R600_TReg32_ZRegClass = {
    &R600MCRegisterClasses[R600_Reg128Vertical_with_sub0_in_R600_TReg32_ZRegClassID],
    R600_Reg128Vertical_with_sub0_in_R600_TReg32_ZSubClassMask,
    SuperRegIdxSeqs + 4,
    LaneBitmask(0x000000000000000F),
    0,
    false,
    0x00, /* TSFlags */
    true, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    R600_Reg128Vertical_with_sub0_in_R600_TReg32_ZSuperclasses,
    nullptr
  };

} // end namespace R600

namespace {
  const TargetRegisterClass *const RegisterClasses[] = {
    &R600::R600_Reg32RegClass,
    &R600::R600_TReg32RegClass,
    &R600::R600_TReg32_XRegClass,
    &R600::R600_AddrRegClass,
    &R600::R600_KC0RegClass,
    &R600::R600_KC1RegClass,
    &R600::R600_TReg32_WRegClass,
    &R600::R600_TReg32_YRegClass,
    &R600::R600_TReg32_ZRegClass,
    &R600::R600_ArrayBaseRegClass,
    &R600::R600_KC0_WRegClass,
    &R600::R600_KC0_XRegClass,
    &R600::R600_KC0_YRegClass,
    &R600::R600_KC0_ZRegClass,
    &R600::R600_KC1_WRegClass,
    &R600::R600_KC1_XRegClass,
    &R600::R600_KC1_YRegClass,
    &R600::R600_KC1_ZRegClass,
    &R600::R600_LDS_SRC_REGRegClass,
    &R600::R600_PredicateRegClass,
    &R600::R600_Addr_WRegClass,
    &R600::R600_Addr_YRegClass,
    &R600::R600_Addr_ZRegClass,
    &R600::R600_LDS_SRC_REG_and_R600_Reg32RegClass,
    &R600::R600_Predicate_BitRegClass,
    &R600::R600_Reg64RegClass,
    &R600::R600_Reg64VerticalRegClass,
    &R600::R600_Reg64Vertical_with_sub0_in_R600_TReg32_WRegClass,
    &R600::R600_Reg64Vertical_with_sub0_in_R600_TReg32_XRegClass,
    &R600::R600_Reg64Vertical_with_sub0_in_R600_TReg32_YRegClass,
    &R600::R600_Reg64Vertical_with_sub0_in_R600_TReg32_ZRegClass,
    &R600::R600_Reg128RegClass,
    &R600::R600_Reg128VerticalRegClass,
    &R600::R600_Reg128Vertical_with_sub0_in_R600_TReg32_WRegClass,
    &R600::R600_Reg128Vertical_with_sub0_in_R600_TReg32_XRegClass,
    &R600::R600_Reg128Vertical_with_sub0_in_R600_TReg32_YRegClass,
    &R600::R600_Reg128Vertical_with_sub0_in_R600_TReg32_ZRegClass,
  };
} // end anonymous namespace

static const uint8_t CostPerUseTable[] = { 
};


static const bool InAllocatableClassTable[] = { 
false, true, false, true, false, false, true, true, true, true, false, false, true, true, true, true, false, true, false, false, true, true, true, true, false, false, true, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, };


static const TargetRegisterInfoDesc R600RegInfoDesc = { // Extra Descriptors
CostPerUseTable, 1, InAllocatableClassTable};

unsigned R600GenRegisterInfo::composeSubRegIndicesImpl(unsigned IdxA, unsigned IdxB) const {
  static const uint8_t Rows[1][16] = {
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
  };

  --IdxA; assert(IdxA < 16); (void) IdxA;
  --IdxB; assert(IdxB < 16);
  return Rows[0][IdxB];
}

  struct MaskRolOp {
    LaneBitmask Mask;
    uint8_t  RotateLeft;
  };
  static const MaskRolOp LaneMaskComposeSequences[] = {
    { LaneBitmask(0xFFFFFFFFFFFFFFFF),  0 }, { LaneBitmask::getNone(), 0 },   // Sequence 0
    { LaneBitmask(0xFFFFFFFFFFFFFFFF),  1 }, { LaneBitmask::getNone(), 0 },   // Sequence 2
    { LaneBitmask(0xFFFFFFFFFFFFFFFF),  2 }, { LaneBitmask::getNone(), 0 },   // Sequence 4
    { LaneBitmask(0xFFFFFFFFFFFFFFFF),  3 }, { LaneBitmask::getNone(), 0 },   // Sequence 6
    { LaneBitmask(0xFFFFFFFFFFFFFFFF),  4 }, { LaneBitmask::getNone(), 0 },   // Sequence 8
    { LaneBitmask(0xFFFFFFFFFFFFFFFF),  5 }, { LaneBitmask::getNone(), 0 },   // Sequence 10
    { LaneBitmask(0xFFFFFFFFFFFFFFFF),  6 }, { LaneBitmask::getNone(), 0 },   // Sequence 12
    { LaneBitmask(0xFFFFFFFFFFFFFFFF),  7 }, { LaneBitmask::getNone(), 0 },   // Sequence 14
    { LaneBitmask(0xFFFFFFFFFFFFFFFF),  8 }, { LaneBitmask::getNone(), 0 },   // Sequence 16
    { LaneBitmask(0xFFFFFFFFFFFFFFFF),  9 }, { LaneBitmask::getNone(), 0 },   // Sequence 18
    { LaneBitmask(0xFFFFFFFFFFFFFFFF), 10 }, { LaneBitmask::getNone(), 0 },   // Sequence 20
    { LaneBitmask(0xFFFFFFFFFFFFFFFF), 11 }, { LaneBitmask::getNone(), 0 },   // Sequence 22
    { LaneBitmask(0xFFFFFFFFFFFFFFFF), 12 }, { LaneBitmask::getNone(), 0 },   // Sequence 24
    { LaneBitmask(0xFFFFFFFFFFFFFFFF), 13 }, { LaneBitmask::getNone(), 0 },   // Sequence 26
    { LaneBitmask(0xFFFFFFFFFFFFFFFF), 14 }, { LaneBitmask::getNone(), 0 },   // Sequence 28
    { LaneBitmask(0xFFFFFFFFFFFFFFFF), 15 }, { LaneBitmask::getNone(), 0 }  // Sequence 30
  };
  static const uint8_t CompositeSequences[] = {
    0, // to sub0
    2, // to sub1
    4, // to sub2
    6, // to sub3
    8, // to sub4
    10, // to sub5
    12, // to sub6
    14, // to sub7
    16, // to sub8
    18, // to sub9
    20, // to sub10
    22, // to sub11
    24, // to sub12
    26, // to sub13
    28, // to sub14
    30 // to sub15
  };

LaneBitmask R600GenRegisterInfo::composeSubRegIndexLaneMaskImpl(unsigned IdxA, LaneBitmask LaneMask) const {
  --IdxA; assert(IdxA < 16 && "Subregister index out of bounds");
  LaneBitmask Result;
  for (const MaskRolOp *Ops =
       &LaneMaskComposeSequences[CompositeSequences[IdxA]];
       Ops->Mask.any(); ++Ops) {
    LaneBitmask::Type M = LaneMask.getAsInteger() & Ops->Mask.getAsInteger();
    if (unsigned S = Ops->RotateLeft)
      Result |= LaneBitmask((M << S) | (M >> (LaneBitmask::BitWidth - S)));
    else
      Result |= LaneBitmask(M);
  }
  return Result;
}

LaneBitmask R600GenRegisterInfo::reverseComposeSubRegIndexLaneMaskImpl(unsigned IdxA,  LaneBitmask LaneMask) const {
  LaneMask &= getSubRegIndexLaneMask(IdxA);
  --IdxA; assert(IdxA < 16 && "Subregister index out of bounds");
  LaneBitmask Result;
  for (const MaskRolOp *Ops =
       &LaneMaskComposeSequences[CompositeSequences[IdxA]];
       Ops->Mask.any(); ++Ops) {
    LaneBitmask::Type M = LaneMask.getAsInteger();
    if (unsigned S = Ops->RotateLeft)
      Result |= LaneBitmask((M >> S) | (M << (LaneBitmask::BitWidth - S)));
    else
      Result |= LaneBitmask(M);
  }
  return Result;
}

const TargetRegisterClass *R600GenRegisterInfo::getSubClassWithSubReg(const TargetRegisterClass *RC, unsigned Idx) const {
  static const uint8_t Table[37][16] = {
    {	// R600_Reg32
      0,	// sub0
      0,	// sub1
      0,	// sub2
      0,	// sub3
      0,	// sub4
      0,	// sub5
      0,	// sub6
      0,	// sub7
      0,	// sub8
      0,	// sub9
      0,	// sub10
      0,	// sub11
      0,	// sub12
      0,	// sub13
      0,	// sub14
      0,	// sub15
    },
    {	// R600_TReg32
      0,	// sub0
      0,	// sub1
      0,	// sub2
      0,	// sub3
      0,	// sub4
      0,	// sub5
      0,	// sub6
      0,	// sub7
      0,	// sub8
      0,	// sub9
      0,	// sub10
      0,	// sub11
      0,	// sub12
      0,	// sub13
      0,	// sub14
      0,	// sub15
    },
    {	// R600_TReg32_X
      0,	// sub0
      0,	// sub1
      0,	// sub2
      0,	// sub3
      0,	// sub4
      0,	// sub5
      0,	// sub6
      0,	// sub7
      0,	// sub8
      0,	// sub9
      0,	// sub10
      0,	// sub11
      0,	// sub12
      0,	// sub13
      0,	// sub14
      0,	// sub15
    },
    {	// R600_Addr
      0,	// sub0
      0,	// sub1
      0,	// sub2
      0,	// sub3
      0,	// sub4
      0,	// sub5
      0,	// sub6
      0,	// sub7
      0,	// sub8
      0,	// sub9
      0,	// sub10
      0,	// sub11
      0,	// sub12
      0,	// sub13
      0,	// sub14
      0,	// sub15
    },
    {	// R600_KC0
      0,	// sub0
      0,	// sub1
      0,	// sub2
      0,	// sub3
      0,	// sub4
      0,	// sub5
      0,	// sub6
      0,	// sub7
      0,	// sub8
      0,	// sub9
      0,	// sub10
      0,	// sub11
      0,	// sub12
      0,	// sub13
      0,	// sub14
      0,	// sub15
    },
    {	// R600_KC1
      0,	// sub0
      0,	// sub1
      0,	// sub2
      0,	// sub3
      0,	// sub4
      0,	// sub5
      0,	// sub6
      0,	// sub7
      0,	// sub8
      0,	// sub9
      0,	// sub10
      0,	// sub11
      0,	// sub12
      0,	// sub13
      0,	// sub14
      0,	// sub15
    },
    {	// R600_TReg32_W
      0,	// sub0
      0,	// sub1
      0,	// sub2
      0,	// sub3
      0,	// sub4
      0,	// sub5
      0,	// sub6
      0,	// sub7
      0,	// sub8
      0,	// sub9
      0,	// sub10
      0,	// sub11
      0,	// sub12
      0,	// sub13
      0,	// sub14
      0,	// sub15
    },
    {	// R600_TReg32_Y
      0,	// sub0
      0,	// sub1
      0,	// sub2
      0,	// sub3
      0,	// sub4
      0,	// sub5
      0,	// sub6
      0,	// sub7
      0,	// sub8
      0,	// sub9
      0,	// sub10
      0,	// sub11
      0,	// sub12
      0,	// sub13
      0,	// sub14
      0,	// sub15
    },
    {	// R600_TReg32_Z
      0,	// sub0
      0,	// sub1
      0,	// sub2
      0,	// sub3
      0,	// sub4
      0,	// sub5
      0,	// sub6
      0,	// sub7
      0,	// sub8
      0,	// sub9
      0,	// sub10
      0,	// sub11
      0,	// sub12
      0,	// sub13
      0,	// sub14
      0,	// sub15
    },
    {	// R600_ArrayBase
      0,	// sub0
      0,	// sub1
      0,	// sub2
      0,	// sub3
      0,	// sub4
      0,	// sub5
      0,	// sub6
      0,	// sub7
      0,	// sub8
      0,	// sub9
      0,	// sub10
      0,	// sub11
      0,	// sub12
      0,	// sub13
      0,	// sub14
      0,	// sub15
    },
    {	// R600_KC0_W
      0,	// sub0
      0,	// sub1
      0,	// sub2
      0,	// sub3
      0,	// sub4
      0,	// sub5
      0,	// sub6
      0,	// sub7
      0,	// sub8
      0,	// sub9
      0,	// sub10
      0,	// sub11
      0,	// sub12
      0,	// sub13
      0,	// sub14
      0,	// sub15
    },
    {	// R600_KC0_X
      0,	// sub0
      0,	// sub1
      0,	// sub2
      0,	// sub3
      0,	// sub4
      0,	// sub5
      0,	// sub6
      0,	// sub7
      0,	// sub8
      0,	// sub9
      0,	// sub10
      0,	// sub11
      0,	// sub12
      0,	// sub13
      0,	// sub14
      0,	// sub15
    },
    {	// R600_KC0_Y
      0,	// sub0
      0,	// sub1
      0,	// sub2
      0,	// sub3
      0,	// sub4
      0,	// sub5
      0,	// sub6
      0,	// sub7
      0,	// sub8
      0,	// sub9
      0,	// sub10
      0,	// sub11
      0,	// sub12
      0,	// sub13
      0,	// sub14
      0,	// sub15
    },
    {	// R600_KC0_Z
      0,	// sub0
      0,	// sub1
      0,	// sub2
      0,	// sub3
      0,	// sub4
      0,	// sub5
      0,	// sub6
      0,	// sub7
      0,	// sub8
      0,	// sub9
      0,	// sub10
      0,	// sub11
      0,	// sub12
      0,	// sub13
      0,	// sub14
      0,	// sub15
    },
    {	// R600_KC1_W
      0,	// sub0
      0,	// sub1
      0,	// sub2
      0,	// sub3
      0,	// sub4
      0,	// sub5
      0,	// sub6
      0,	// sub7
      0,	// sub8
      0,	// sub9
      0,	// sub10
      0,	// sub11
      0,	// sub12
      0,	// sub13
      0,	// sub14
      0,	// sub15
    },
    {	// R600_KC1_X
      0,	// sub0
      0,	// sub1
      0,	// sub2
      0,	// sub3
      0,	// sub4
      0,	// sub5
      0,	// sub6
      0,	// sub7
      0,	// sub8
      0,	// sub9
      0,	// sub10
      0,	// sub11
      0,	// sub12
      0,	// sub13
      0,	// sub14
      0,	// sub15
    },
    {	// R600_KC1_Y
      0,	// sub0
      0,	// sub1
      0,	// sub2
      0,	// sub3
      0,	// sub4
      0,	// sub5
      0,	// sub6
      0,	// sub7
      0,	// sub8
      0,	// sub9
      0,	// sub10
      0,	// sub11
      0,	// sub12
      0,	// sub13
      0,	// sub14
      0,	// sub15
    },
    {	// R600_KC1_Z
      0,	// sub0
      0,	// sub1
      0,	// sub2
      0,	// sub3
      0,	// sub4
      0,	// sub5
      0,	// sub6
      0,	// sub7
      0,	// sub8
      0,	// sub9
      0,	// sub10
      0,	// sub11
      0,	// sub12
      0,	// sub13
      0,	// sub14
      0,	// sub15
    },
    {	// R600_LDS_SRC_REG
      0,	// sub0
      0,	// sub1
      0,	// sub2
      0,	// sub3
      0,	// sub4
      0,	// sub5
      0,	// sub6
      0,	// sub7
      0,	// sub8
      0,	// sub9
      0,	// sub10
      0,	// sub11
      0,	// sub12
      0,	// sub13
      0,	// sub14
      0,	// sub15
    },
    {	// R600_Predicate
      0,	// sub0
      0,	// sub1
      0,	// sub2
      0,	// sub3
      0,	// sub4
      0,	// sub5
      0,	// sub6
      0,	// sub7
      0,	// sub8
      0,	// sub9
      0,	// sub10
      0,	// sub11
      0,	// sub12
      0,	// sub13
      0,	// sub14
      0,	// sub15
    },
    {	// R600_Addr_W
      0,	// sub0
      0,	// sub1
      0,	// sub2
      0,	// sub3
      0,	// sub4
      0,	// sub5
      0,	// sub6
      0,	// sub7
      0,	// sub8
      0,	// sub9
      0,	// sub10
      0,	// sub11
      0,	// sub12
      0,	// sub13
      0,	// sub14
      0,	// sub15
    },
    {	// R600_Addr_Y
      0,	// sub0
      0,	// sub1
      0,	// sub2
      0,	// sub3
      0,	// sub4
      0,	// sub5
      0,	// sub6
      0,	// sub7
      0,	// sub8
      0,	// sub9
      0,	// sub10
      0,	// sub11
      0,	// sub12
      0,	// sub13
      0,	// sub14
      0,	// sub15
    },
    {	// R600_Addr_Z
      0,	// sub0
      0,	// sub1
      0,	// sub2
      0,	// sub3
      0,	// sub4
      0,	// sub5
      0,	// sub6
      0,	// sub7
      0,	// sub8
      0,	// sub9
      0,	// sub10
      0,	// sub11
      0,	// sub12
      0,	// sub13
      0,	// sub14
      0,	// sub15
    },
    {	// R600_LDS_SRC_REG_and_R600_Reg32
      0,	// sub0
      0,	// sub1
      0,	// sub2
      0,	// sub3
      0,	// sub4
      0,	// sub5
      0,	// sub6
      0,	// sub7
      0,	// sub8
      0,	// sub9
      0,	// sub10
      0,	// sub11
      0,	// sub12
      0,	// sub13
      0,	// sub14
      0,	// sub15
    },
    {	// R600_Predicate_Bit
      0,	// sub0
      0,	// sub1
      0,	// sub2
      0,	// sub3
      0,	// sub4
      0,	// sub5
      0,	// sub6
      0,	// sub7
      0,	// sub8
      0,	// sub9
      0,	// sub10
      0,	// sub11
      0,	// sub12
      0,	// sub13
      0,	// sub14
      0,	// sub15
    },
    {	// R600_Reg64
      26,	// sub0 -> R600_Reg64
      26,	// sub1 -> R600_Reg64
      0,	// sub2
      0,	// sub3
      0,	// sub4
      0,	// sub5
      0,	// sub6
      0,	// sub7
      0,	// sub8
      0,	// sub9
      0,	// sub10
      0,	// sub11
      0,	// sub12
      0,	// sub13
      0,	// sub14
      0,	// sub15
    },
    {	// R600_Reg64Vertical
      27,	// sub0 -> R600_Reg64Vertical
      27,	// sub1 -> R600_Reg64Vertical
      0,	// sub2
      0,	// sub3
      0,	// sub4
      0,	// sub5
      0,	// sub6
      0,	// sub7
      0,	// sub8
      0,	// sub9
      0,	// sub10
      0,	// sub11
      0,	// sub12
      0,	// sub13
      0,	// sub14
      0,	// sub15
    },
    {	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_W
      28,	// sub0 -> R600_Reg64Vertical_with_sub0_in_R600_TReg32_W
      28,	// sub1 -> R600_Reg64Vertical_with_sub0_in_R600_TReg32_W
      0,	// sub2
      0,	// sub3
      0,	// sub4
      0,	// sub5
      0,	// sub6
      0,	// sub7
      0,	// sub8
      0,	// sub9
      0,	// sub10
      0,	// sub11
      0,	// sub12
      0,	// sub13
      0,	// sub14
      0,	// sub15
    },
    {	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_X
      29,	// sub0 -> R600_Reg64Vertical_with_sub0_in_R600_TReg32_X
      29,	// sub1 -> R600_Reg64Vertical_with_sub0_in_R600_TReg32_X
      0,	// sub2
      0,	// sub3
      0,	// sub4
      0,	// sub5
      0,	// sub6
      0,	// sub7
      0,	// sub8
      0,	// sub9
      0,	// sub10
      0,	// sub11
      0,	// sub12
      0,	// sub13
      0,	// sub14
      0,	// sub15
    },
    {	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_Y
      30,	// sub0 -> R600_Reg64Vertical_with_sub0_in_R600_TReg32_Y
      30,	// sub1 -> R600_Reg64Vertical_with_sub0_in_R600_TReg32_Y
      0,	// sub2
      0,	// sub3
      0,	// sub4
      0,	// sub5
      0,	// sub6
      0,	// sub7
      0,	// sub8
      0,	// sub9
      0,	// sub10
      0,	// sub11
      0,	// sub12
      0,	// sub13
      0,	// sub14
      0,	// sub15
    },
    {	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_Z
      31,	// sub0 -> R600_Reg64Vertical_with_sub0_in_R600_TReg32_Z
      31,	// sub1 -> R600_Reg64Vertical_with_sub0_in_R600_TReg32_Z
      0,	// sub2
      0,	// sub3
      0,	// sub4
      0,	// sub5
      0,	// sub6
      0,	// sub7
      0,	// sub8
      0,	// sub9
      0,	// sub10
      0,	// sub11
      0,	// sub12
      0,	// sub13
      0,	// sub14
      0,	// sub15
    },
    {	// R600_Reg128
      32,	// sub0 -> R600_Reg128
      32,	// sub1 -> R600_Reg128
      32,	// sub2 -> R600_Reg128
      32,	// sub3 -> R600_Reg128
      0,	// sub4
      0,	// sub5
      0,	// sub6
      0,	// sub7
      0,	// sub8
      0,	// sub9
      0,	// sub10
      0,	// sub11
      0,	// sub12
      0,	// sub13
      0,	// sub14
      0,	// sub15
    },
    {	// R600_Reg128Vertical
      33,	// sub0 -> R600_Reg128Vertical
      33,	// sub1 -> R600_Reg128Vertical
      33,	// sub2 -> R600_Reg128Vertical
      33,	// sub3 -> R600_Reg128Vertical
      0,	// sub4
      0,	// sub5
      0,	// sub6
      0,	// sub7
      0,	// sub8
      0,	// sub9
      0,	// sub10
      0,	// sub11
      0,	// sub12
      0,	// sub13
      0,	// sub14
      0,	// sub15
    },
    {	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_W
      34,	// sub0 -> R600_Reg128Vertical_with_sub0_in_R600_TReg32_W
      34,	// sub1 -> R600_Reg128Vertical_with_sub0_in_R600_TReg32_W
      34,	// sub2 -> R600_Reg128Vertical_with_sub0_in_R600_TReg32_W
      34,	// sub3 -> R600_Reg128Vertical_with_sub0_in_R600_TReg32_W
      0,	// sub4
      0,	// sub5
      0,	// sub6
      0,	// sub7
      0,	// sub8
      0,	// sub9
      0,	// sub10
      0,	// sub11
      0,	// sub12
      0,	// sub13
      0,	// sub14
      0,	// sub15
    },
    {	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_X
      35,	// sub0 -> R600_Reg128Vertical_with_sub0_in_R600_TReg32_X
      35,	// sub1 -> R600_Reg128Vertical_with_sub0_in_R600_TReg32_X
      35,	// sub2 -> R600_Reg128Vertical_with_sub0_in_R600_TReg32_X
      35,	// sub3 -> R600_Reg128Vertical_with_sub0_in_R600_TReg32_X
      0,	// sub4
      0,	// sub5
      0,	// sub6
      0,	// sub7
      0,	// sub8
      0,	// sub9
      0,	// sub10
      0,	// sub11
      0,	// sub12
      0,	// sub13
      0,	// sub14
      0,	// sub15
    },
    {	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_Y
      36,	// sub0 -> R600_Reg128Vertical_with_sub0_in_R600_TReg32_Y
      36,	// sub1 -> R600_Reg128Vertical_with_sub0_in_R600_TReg32_Y
      36,	// sub2 -> R600_Reg128Vertical_with_sub0_in_R600_TReg32_Y
      36,	// sub3 -> R600_Reg128Vertical_with_sub0_in_R600_TReg32_Y
      0,	// sub4
      0,	// sub5
      0,	// sub6
      0,	// sub7
      0,	// sub8
      0,	// sub9
      0,	// sub10
      0,	// sub11
      0,	// sub12
      0,	// sub13
      0,	// sub14
      0,	// sub15
    },
    {	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_Z
      37,	// sub0 -> R600_Reg128Vertical_with_sub0_in_R600_TReg32_Z
      37,	// sub1 -> R600_Reg128Vertical_with_sub0_in_R600_TReg32_Z
      37,	// sub2 -> R600_Reg128Vertical_with_sub0_in_R600_TReg32_Z
      37,	// sub3 -> R600_Reg128Vertical_with_sub0_in_R600_TReg32_Z
      0,	// sub4
      0,	// sub5
      0,	// sub6
      0,	// sub7
      0,	// sub8
      0,	// sub9
      0,	// sub10
      0,	// sub11
      0,	// sub12
      0,	// sub13
      0,	// sub14
      0,	// sub15
    },
  };
  assert(RC && "Missing regclass");
  if (!Idx) return RC;
  --Idx;
  assert(Idx < 16 && "Bad subreg");
  unsigned TV = Table[RC->getID()][Idx];
  return TV ? getRegClass(TV - 1) : nullptr;
}

const TargetRegisterClass *R600GenRegisterInfo::getSubRegisterClass(const TargetRegisterClass *RC, unsigned Idx) const {
  static const uint8_t Table[37][16] = {
    {	// R600_Reg32
      0,	// R600_Reg32:sub0
      0,	// R600_Reg32:sub1
      0,	// R600_Reg32:sub2
      0,	// R600_Reg32:sub3
      0,	// R600_Reg32:sub4
      0,	// R600_Reg32:sub5
      0,	// R600_Reg32:sub6
      0,	// R600_Reg32:sub7
      0,	// R600_Reg32:sub8
      0,	// R600_Reg32:sub9
      0,	// R600_Reg32:sub10
      0,	// R600_Reg32:sub11
      0,	// R600_Reg32:sub12
      0,	// R600_Reg32:sub13
      0,	// R600_Reg32:sub14
      0,	// R600_Reg32:sub15
    },
    {	// R600_TReg32
      0,	// R600_TReg32:sub0
      0,	// R600_TReg32:sub1
      0,	// R600_TReg32:sub2
      0,	// R600_TReg32:sub3
      0,	// R600_TReg32:sub4
      0,	// R600_TReg32:sub5
      0,	// R600_TReg32:sub6
      0,	// R600_TReg32:sub7
      0,	// R600_TReg32:sub8
      0,	// R600_TReg32:sub9
      0,	// R600_TReg32:sub10
      0,	// R600_TReg32:sub11
      0,	// R600_TReg32:sub12
      0,	// R600_TReg32:sub13
      0,	// R600_TReg32:sub14
      0,	// R600_TReg32:sub15
    },
    {	// R600_TReg32_X
      0,	// R600_TReg32_X:sub0
      0,	// R600_TReg32_X:sub1
      0,	// R600_TReg32_X:sub2
      0,	// R600_TReg32_X:sub3
      0,	// R600_TReg32_X:sub4
      0,	// R600_TReg32_X:sub5
      0,	// R600_TReg32_X:sub6
      0,	// R600_TReg32_X:sub7
      0,	// R600_TReg32_X:sub8
      0,	// R600_TReg32_X:sub9
      0,	// R600_TReg32_X:sub10
      0,	// R600_TReg32_X:sub11
      0,	// R600_TReg32_X:sub12
      0,	// R600_TReg32_X:sub13
      0,	// R600_TReg32_X:sub14
      0,	// R600_TReg32_X:sub15
    },
    {	// R600_Addr
      0,	// R600_Addr:sub0
      0,	// R600_Addr:sub1
      0,	// R600_Addr:sub2
      0,	// R600_Addr:sub3
      0,	// R600_Addr:sub4
      0,	// R600_Addr:sub5
      0,	// R600_Addr:sub6
      0,	// R600_Addr:sub7
      0,	// R600_Addr:sub8
      0,	// R600_Addr:sub9
      0,	// R600_Addr:sub10
      0,	// R600_Addr:sub11
      0,	// R600_Addr:sub12
      0,	// R600_Addr:sub13
      0,	// R600_Addr:sub14
      0,	// R600_Addr:sub15
    },
    {	// R600_KC0
      0,	// R600_KC0:sub0
      0,	// R600_KC0:sub1
      0,	// R600_KC0:sub2
      0,	// R600_KC0:sub3
      0,	// R600_KC0:sub4
      0,	// R600_KC0:sub5
      0,	// R600_KC0:sub6
      0,	// R600_KC0:sub7
      0,	// R600_KC0:sub8
      0,	// R600_KC0:sub9
      0,	// R600_KC0:sub10
      0,	// R600_KC0:sub11
      0,	// R600_KC0:sub12
      0,	// R600_KC0:sub13
      0,	// R600_KC0:sub14
      0,	// R600_KC0:sub15
    },
    {	// R600_KC1
      0,	// R600_KC1:sub0
      0,	// R600_KC1:sub1
      0,	// R600_KC1:sub2
      0,	// R600_KC1:sub3
      0,	// R600_KC1:sub4
      0,	// R600_KC1:sub5
      0,	// R600_KC1:sub6
      0,	// R600_KC1:sub7
      0,	// R600_KC1:sub8
      0,	// R600_KC1:sub9
      0,	// R600_KC1:sub10
      0,	// R600_KC1:sub11
      0,	// R600_KC1:sub12
      0,	// R600_KC1:sub13
      0,	// R600_KC1:sub14
      0,	// R600_KC1:sub15
    },
    {	// R600_TReg32_W
      0,	// R600_TReg32_W:sub0
      0,	// R600_TReg32_W:sub1
      0,	// R600_TReg32_W:sub2
      0,	// R600_TReg32_W:sub3
      0,	// R600_TReg32_W:sub4
      0,	// R600_TReg32_W:sub5
      0,	// R600_TReg32_W:sub6
      0,	// R600_TReg32_W:sub7
      0,	// R600_TReg32_W:sub8
      0,	// R600_TReg32_W:sub9
      0,	// R600_TReg32_W:sub10
      0,	// R600_TReg32_W:sub11
      0,	// R600_TReg32_W:sub12
      0,	// R600_TReg32_W:sub13
      0,	// R600_TReg32_W:sub14
      0,	// R600_TReg32_W:sub15
    },
    {	// R600_TReg32_Y
      0,	// R600_TReg32_Y:sub0
      0,	// R600_TReg32_Y:sub1
      0,	// R600_TReg32_Y:sub2
      0,	// R600_TReg32_Y:sub3
      0,	// R600_TReg32_Y:sub4
      0,	// R600_TReg32_Y:sub5
      0,	// R600_TReg32_Y:sub6
      0,	// R600_TReg32_Y:sub7
      0,	// R600_TReg32_Y:sub8
      0,	// R600_TReg32_Y:sub9
      0,	// R600_TReg32_Y:sub10
      0,	// R600_TReg32_Y:sub11
      0,	// R600_TReg32_Y:sub12
      0,	// R600_TReg32_Y:sub13
      0,	// R600_TReg32_Y:sub14
      0,	// R600_TReg32_Y:sub15
    },
    {	// R600_TReg32_Z
      0,	// R600_TReg32_Z:sub0
      0,	// R600_TReg32_Z:sub1
      0,	// R600_TReg32_Z:sub2
      0,	// R600_TReg32_Z:sub3
      0,	// R600_TReg32_Z:sub4
      0,	// R600_TReg32_Z:sub5
      0,	// R600_TReg32_Z:sub6
      0,	// R600_TReg32_Z:sub7
      0,	// R600_TReg32_Z:sub8
      0,	// R600_TReg32_Z:sub9
      0,	// R600_TReg32_Z:sub10
      0,	// R600_TReg32_Z:sub11
      0,	// R600_TReg32_Z:sub12
      0,	// R600_TReg32_Z:sub13
      0,	// R600_TReg32_Z:sub14
      0,	// R600_TReg32_Z:sub15
    },
    {	// R600_ArrayBase
      0,	// R600_ArrayBase:sub0
      0,	// R600_ArrayBase:sub1
      0,	// R600_ArrayBase:sub2
      0,	// R600_ArrayBase:sub3
      0,	// R600_ArrayBase:sub4
      0,	// R600_ArrayBase:sub5
      0,	// R600_ArrayBase:sub6
      0,	// R600_ArrayBase:sub7
      0,	// R600_ArrayBase:sub8
      0,	// R600_ArrayBase:sub9
      0,	// R600_ArrayBase:sub10
      0,	// R600_ArrayBase:sub11
      0,	// R600_ArrayBase:sub12
      0,	// R600_ArrayBase:sub13
      0,	// R600_ArrayBase:sub14
      0,	// R600_ArrayBase:sub15
    },
    {	// R600_KC0_W
      0,	// R600_KC0_W:sub0
      0,	// R600_KC0_W:sub1
      0,	// R600_KC0_W:sub2
      0,	// R600_KC0_W:sub3
      0,	// R600_KC0_W:sub4
      0,	// R600_KC0_W:sub5
      0,	// R600_KC0_W:sub6
      0,	// R600_KC0_W:sub7
      0,	// R600_KC0_W:sub8
      0,	// R600_KC0_W:sub9
      0,	// R600_KC0_W:sub10
      0,	// R600_KC0_W:sub11
      0,	// R600_KC0_W:sub12
      0,	// R600_KC0_W:sub13
      0,	// R600_KC0_W:sub14
      0,	// R600_KC0_W:sub15
    },
    {	// R600_KC0_X
      0,	// R600_KC0_X:sub0
      0,	// R600_KC0_X:sub1
      0,	// R600_KC0_X:sub2
      0,	// R600_KC0_X:sub3
      0,	// R600_KC0_X:sub4
      0,	// R600_KC0_X:sub5
      0,	// R600_KC0_X:sub6
      0,	// R600_KC0_X:sub7
      0,	// R600_KC0_X:sub8
      0,	// R600_KC0_X:sub9
      0,	// R600_KC0_X:sub10
      0,	// R600_KC0_X:sub11
      0,	// R600_KC0_X:sub12
      0,	// R600_KC0_X:sub13
      0,	// R600_KC0_X:sub14
      0,	// R600_KC0_X:sub15
    },
    {	// R600_KC0_Y
      0,	// R600_KC0_Y:sub0
      0,	// R600_KC0_Y:sub1
      0,	// R600_KC0_Y:sub2
      0,	// R600_KC0_Y:sub3
      0,	// R600_KC0_Y:sub4
      0,	// R600_KC0_Y:sub5
      0,	// R600_KC0_Y:sub6
      0,	// R600_KC0_Y:sub7
      0,	// R600_KC0_Y:sub8
      0,	// R600_KC0_Y:sub9
      0,	// R600_KC0_Y:sub10
      0,	// R600_KC0_Y:sub11
      0,	// R600_KC0_Y:sub12
      0,	// R600_KC0_Y:sub13
      0,	// R600_KC0_Y:sub14
      0,	// R600_KC0_Y:sub15
    },
    {	// R600_KC0_Z
      0,	// R600_KC0_Z:sub0
      0,	// R600_KC0_Z:sub1
      0,	// R600_KC0_Z:sub2
      0,	// R600_KC0_Z:sub3
      0,	// R600_KC0_Z:sub4
      0,	// R600_KC0_Z:sub5
      0,	// R600_KC0_Z:sub6
      0,	// R600_KC0_Z:sub7
      0,	// R600_KC0_Z:sub8
      0,	// R600_KC0_Z:sub9
      0,	// R600_KC0_Z:sub10
      0,	// R600_KC0_Z:sub11
      0,	// R600_KC0_Z:sub12
      0,	// R600_KC0_Z:sub13
      0,	// R600_KC0_Z:sub14
      0,	// R600_KC0_Z:sub15
    },
    {	// R600_KC1_W
      0,	// R600_KC1_W:sub0
      0,	// R600_KC1_W:sub1
      0,	// R600_KC1_W:sub2
      0,	// R600_KC1_W:sub3
      0,	// R600_KC1_W:sub4
      0,	// R600_KC1_W:sub5
      0,	// R600_KC1_W:sub6
      0,	// R600_KC1_W:sub7
      0,	// R600_KC1_W:sub8
      0,	// R600_KC1_W:sub9
      0,	// R600_KC1_W:sub10
      0,	// R600_KC1_W:sub11
      0,	// R600_KC1_W:sub12
      0,	// R600_KC1_W:sub13
      0,	// R600_KC1_W:sub14
      0,	// R600_KC1_W:sub15
    },
    {	// R600_KC1_X
      0,	// R600_KC1_X:sub0
      0,	// R600_KC1_X:sub1
      0,	// R600_KC1_X:sub2
      0,	// R600_KC1_X:sub3
      0,	// R600_KC1_X:sub4
      0,	// R600_KC1_X:sub5
      0,	// R600_KC1_X:sub6
      0,	// R600_KC1_X:sub7
      0,	// R600_KC1_X:sub8
      0,	// R600_KC1_X:sub9
      0,	// R600_KC1_X:sub10
      0,	// R600_KC1_X:sub11
      0,	// R600_KC1_X:sub12
      0,	// R600_KC1_X:sub13
      0,	// R600_KC1_X:sub14
      0,	// R600_KC1_X:sub15
    },
    {	// R600_KC1_Y
      0,	// R600_KC1_Y:sub0
      0,	// R600_KC1_Y:sub1
      0,	// R600_KC1_Y:sub2
      0,	// R600_KC1_Y:sub3
      0,	// R600_KC1_Y:sub4
      0,	// R600_KC1_Y:sub5
      0,	// R600_KC1_Y:sub6
      0,	// R600_KC1_Y:sub7
      0,	// R600_KC1_Y:sub8
      0,	// R600_KC1_Y:sub9
      0,	// R600_KC1_Y:sub10
      0,	// R600_KC1_Y:sub11
      0,	// R600_KC1_Y:sub12
      0,	// R600_KC1_Y:sub13
      0,	// R600_KC1_Y:sub14
      0,	// R600_KC1_Y:sub15
    },
    {	// R600_KC1_Z
      0,	// R600_KC1_Z:sub0
      0,	// R600_KC1_Z:sub1
      0,	// R600_KC1_Z:sub2
      0,	// R600_KC1_Z:sub3
      0,	// R600_KC1_Z:sub4
      0,	// R600_KC1_Z:sub5
      0,	// R600_KC1_Z:sub6
      0,	// R600_KC1_Z:sub7
      0,	// R600_KC1_Z:sub8
      0,	// R600_KC1_Z:sub9
      0,	// R600_KC1_Z:sub10
      0,	// R600_KC1_Z:sub11
      0,	// R600_KC1_Z:sub12
      0,	// R600_KC1_Z:sub13
      0,	// R600_KC1_Z:sub14
      0,	// R600_KC1_Z:sub15
    },
    {	// R600_LDS_SRC_REG
      0,	// R600_LDS_SRC_REG:sub0
      0,	// R600_LDS_SRC_REG:sub1
      0,	// R600_LDS_SRC_REG:sub2
      0,	// R600_LDS_SRC_REG:sub3
      0,	// R600_LDS_SRC_REG:sub4
      0,	// R600_LDS_SRC_REG:sub5
      0,	// R600_LDS_SRC_REG:sub6
      0,	// R600_LDS_SRC_REG:sub7
      0,	// R600_LDS_SRC_REG:sub8
      0,	// R600_LDS_SRC_REG:sub9
      0,	// R600_LDS_SRC_REG:sub10
      0,	// R600_LDS_SRC_REG:sub11
      0,	// R600_LDS_SRC_REG:sub12
      0,	// R600_LDS_SRC_REG:sub13
      0,	// R600_LDS_SRC_REG:sub14
      0,	// R600_LDS_SRC_REG:sub15
    },
    {	// R600_Predicate
      0,	// R600_Predicate:sub0
      0,	// R600_Predicate:sub1
      0,	// R600_Predicate:sub2
      0,	// R600_Predicate:sub3
      0,	// R600_Predicate:sub4
      0,	// R600_Predicate:sub5
      0,	// R600_Predicate:sub6
      0,	// R600_Predicate:sub7
      0,	// R600_Predicate:sub8
      0,	// R600_Predicate:sub9
      0,	// R600_Predicate:sub10
      0,	// R600_Predicate:sub11
      0,	// R600_Predicate:sub12
      0,	// R600_Predicate:sub13
      0,	// R600_Predicate:sub14
      0,	// R600_Predicate:sub15
    },
    {	// R600_Addr_W
      0,	// R600_Addr_W:sub0
      0,	// R600_Addr_W:sub1
      0,	// R600_Addr_W:sub2
      0,	// R600_Addr_W:sub3
      0,	// R600_Addr_W:sub4
      0,	// R600_Addr_W:sub5
      0,	// R600_Addr_W:sub6
      0,	// R600_Addr_W:sub7
      0,	// R600_Addr_W:sub8
      0,	// R600_Addr_W:sub9
      0,	// R600_Addr_W:sub10
      0,	// R600_Addr_W:sub11
      0,	// R600_Addr_W:sub12
      0,	// R600_Addr_W:sub13
      0,	// R600_Addr_W:sub14
      0,	// R600_Addr_W:sub15
    },
    {	// R600_Addr_Y
      0,	// R600_Addr_Y:sub0
      0,	// R600_Addr_Y:sub1
      0,	// R600_Addr_Y:sub2
      0,	// R600_Addr_Y:sub3
      0,	// R600_Addr_Y:sub4
      0,	// R600_Addr_Y:sub5
      0,	// R600_Addr_Y:sub6
      0,	// R600_Addr_Y:sub7
      0,	// R600_Addr_Y:sub8
      0,	// R600_Addr_Y:sub9
      0,	// R600_Addr_Y:sub10
      0,	// R600_Addr_Y:sub11
      0,	// R600_Addr_Y:sub12
      0,	// R600_Addr_Y:sub13
      0,	// R600_Addr_Y:sub14
      0,	// R600_Addr_Y:sub15
    },
    {	// R600_Addr_Z
      0,	// R600_Addr_Z:sub0
      0,	// R600_Addr_Z:sub1
      0,	// R600_Addr_Z:sub2
      0,	// R600_Addr_Z:sub3
      0,	// R600_Addr_Z:sub4
      0,	// R600_Addr_Z:sub5
      0,	// R600_Addr_Z:sub6
      0,	// R600_Addr_Z:sub7
      0,	// R600_Addr_Z:sub8
      0,	// R600_Addr_Z:sub9
      0,	// R600_Addr_Z:sub10
      0,	// R600_Addr_Z:sub11
      0,	// R600_Addr_Z:sub12
      0,	// R600_Addr_Z:sub13
      0,	// R600_Addr_Z:sub14
      0,	// R600_Addr_Z:sub15
    },
    {	// R600_LDS_SRC_REG_and_R600_Reg32
      0,	// R600_LDS_SRC_REG_and_R600_Reg32:sub0
      0,	// R600_LDS_SRC_REG_and_R600_Reg32:sub1
      0,	// R600_LDS_SRC_REG_and_R600_Reg32:sub2
      0,	// R600_LDS_SRC_REG_and_R600_Reg32:sub3
      0,	// R600_LDS_SRC_REG_and_R600_Reg32:sub4
      0,	// R600_LDS_SRC_REG_and_R600_Reg32:sub5
      0,	// R600_LDS_SRC_REG_and_R600_Reg32:sub6
      0,	// R600_LDS_SRC_REG_and_R600_Reg32:sub7
      0,	// R600_LDS_SRC_REG_and_R600_Reg32:sub8
      0,	// R600_LDS_SRC_REG_and_R600_Reg32:sub9
      0,	// R600_LDS_SRC_REG_and_R600_Reg32:sub10
      0,	// R600_LDS_SRC_REG_and_R600_Reg32:sub11
      0,	// R600_LDS_SRC_REG_and_R600_Reg32:sub12
      0,	// R600_LDS_SRC_REG_and_R600_Reg32:sub13
      0,	// R600_LDS_SRC_REG_and_R600_Reg32:sub14
      0,	// R600_LDS_SRC_REG_and_R600_Reg32:sub15
    },
    {	// R600_Predicate_Bit
      0,	// R600_Predicate_Bit:sub0
      0,	// R600_Predicate_Bit:sub1
      0,	// R600_Predicate_Bit:sub2
      0,	// R600_Predicate_Bit:sub3
      0,	// R600_Predicate_Bit:sub4
      0,	// R600_Predicate_Bit:sub5
      0,	// R600_Predicate_Bit:sub6
      0,	// R600_Predicate_Bit:sub7
      0,	// R600_Predicate_Bit:sub8
      0,	// R600_Predicate_Bit:sub9
      0,	// R600_Predicate_Bit:sub10
      0,	// R600_Predicate_Bit:sub11
      0,	// R600_Predicate_Bit:sub12
      0,	// R600_Predicate_Bit:sub13
      0,	// R600_Predicate_Bit:sub14
      0,	// R600_Predicate_Bit:sub15
    },
    {	// R600_Reg64
      3,	// R600_Reg64:sub0 -> R600_TReg32_X
      8,	// R600_Reg64:sub1 -> R600_TReg32_Y
      0,	// R600_Reg64:sub2
      0,	// R600_Reg64:sub3
      0,	// R600_Reg64:sub4
      0,	// R600_Reg64:sub5
      0,	// R600_Reg64:sub6
      0,	// R600_Reg64:sub7
      0,	// R600_Reg64:sub8
      0,	// R600_Reg64:sub9
      0,	// R600_Reg64:sub10
      0,	// R600_Reg64:sub11
      0,	// R600_Reg64:sub12
      0,	// R600_Reg64:sub13
      0,	// R600_Reg64:sub14
      0,	// R600_Reg64:sub15
    },
    {	// R600_Reg64Vertical
      2,	// R600_Reg64Vertical:sub0 -> R600_TReg32
      2,	// R600_Reg64Vertical:sub1 -> R600_TReg32
      0,	// R600_Reg64Vertical:sub2
      0,	// R600_Reg64Vertical:sub3
      0,	// R600_Reg64Vertical:sub4
      0,	// R600_Reg64Vertical:sub5
      0,	// R600_Reg64Vertical:sub6
      0,	// R600_Reg64Vertical:sub7
      0,	// R600_Reg64Vertical:sub8
      0,	// R600_Reg64Vertical:sub9
      0,	// R600_Reg64Vertical:sub10
      0,	// R600_Reg64Vertical:sub11
      0,	// R600_Reg64Vertical:sub12
      0,	// R600_Reg64Vertical:sub13
      0,	// R600_Reg64Vertical:sub14
      0,	// R600_Reg64Vertical:sub15
    },
    {	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_W
      7,	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_W:sub0 -> R600_TReg32_W
      7,	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_W:sub1 -> R600_TReg32_W
      0,	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_W:sub2
      0,	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_W:sub3
      0,	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_W:sub4
      0,	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_W:sub5
      0,	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_W:sub6
      0,	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_W:sub7
      0,	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_W:sub8
      0,	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_W:sub9
      0,	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_W:sub10
      0,	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_W:sub11
      0,	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_W:sub12
      0,	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_W:sub13
      0,	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_W:sub14
      0,	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_W:sub15
    },
    {	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_X
      3,	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_X:sub0 -> R600_TReg32_X
      3,	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_X:sub1 -> R600_TReg32_X
      0,	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_X:sub2
      0,	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_X:sub3
      0,	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_X:sub4
      0,	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_X:sub5
      0,	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_X:sub6
      0,	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_X:sub7
      0,	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_X:sub8
      0,	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_X:sub9
      0,	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_X:sub10
      0,	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_X:sub11
      0,	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_X:sub12
      0,	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_X:sub13
      0,	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_X:sub14
      0,	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_X:sub15
    },
    {	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_Y
      8,	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_Y:sub0 -> R600_TReg32_Y
      8,	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_Y:sub1 -> R600_TReg32_Y
      0,	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_Y:sub2
      0,	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_Y:sub3
      0,	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_Y:sub4
      0,	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_Y:sub5
      0,	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_Y:sub6
      0,	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_Y:sub7
      0,	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_Y:sub8
      0,	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_Y:sub9
      0,	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_Y:sub10
      0,	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_Y:sub11
      0,	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_Y:sub12
      0,	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_Y:sub13
      0,	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_Y:sub14
      0,	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_Y:sub15
    },
    {	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_Z
      9,	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_Z:sub0 -> R600_TReg32_Z
      9,	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_Z:sub1 -> R600_TReg32_Z
      0,	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_Z:sub2
      0,	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_Z:sub3
      0,	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_Z:sub4
      0,	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_Z:sub5
      0,	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_Z:sub6
      0,	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_Z:sub7
      0,	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_Z:sub8
      0,	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_Z:sub9
      0,	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_Z:sub10
      0,	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_Z:sub11
      0,	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_Z:sub12
      0,	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_Z:sub13
      0,	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_Z:sub14
      0,	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_Z:sub15
    },
    {	// R600_Reg128
      3,	// R600_Reg128:sub0 -> R600_TReg32_X
      8,	// R600_Reg128:sub1 -> R600_TReg32_Y
      9,	// R600_Reg128:sub2 -> R600_TReg32_Z
      7,	// R600_Reg128:sub3 -> R600_TReg32_W
      0,	// R600_Reg128:sub4
      0,	// R600_Reg128:sub5
      0,	// R600_Reg128:sub6
      0,	// R600_Reg128:sub7
      0,	// R600_Reg128:sub8
      0,	// R600_Reg128:sub9
      0,	// R600_Reg128:sub10
      0,	// R600_Reg128:sub11
      0,	// R600_Reg128:sub12
      0,	// R600_Reg128:sub13
      0,	// R600_Reg128:sub14
      0,	// R600_Reg128:sub15
    },
    {	// R600_Reg128Vertical
      2,	// R600_Reg128Vertical:sub0 -> R600_TReg32
      2,	// R600_Reg128Vertical:sub1 -> R600_TReg32
      2,	// R600_Reg128Vertical:sub2 -> R600_TReg32
      2,	// R600_Reg128Vertical:sub3 -> R600_TReg32
      0,	// R600_Reg128Vertical:sub4
      0,	// R600_Reg128Vertical:sub5
      0,	// R600_Reg128Vertical:sub6
      0,	// R600_Reg128Vertical:sub7
      0,	// R600_Reg128Vertical:sub8
      0,	// R600_Reg128Vertical:sub9
      0,	// R600_Reg128Vertical:sub10
      0,	// R600_Reg128Vertical:sub11
      0,	// R600_Reg128Vertical:sub12
      0,	// R600_Reg128Vertical:sub13
      0,	// R600_Reg128Vertical:sub14
      0,	// R600_Reg128Vertical:sub15
    },
    {	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_W
      7,	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_W:sub0 -> R600_TReg32_W
      7,	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_W:sub1 -> R600_TReg32_W
      7,	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_W:sub2 -> R600_TReg32_W
      7,	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_W:sub3 -> R600_TReg32_W
      0,	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_W:sub4
      0,	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_W:sub5
      0,	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_W:sub6
      0,	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_W:sub7
      0,	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_W:sub8
      0,	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_W:sub9
      0,	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_W:sub10
      0,	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_W:sub11
      0,	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_W:sub12
      0,	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_W:sub13
      0,	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_W:sub14
      0,	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_W:sub15
    },
    {	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_X
      3,	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_X:sub0 -> R600_TReg32_X
      3,	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_X:sub1 -> R600_TReg32_X
      3,	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_X:sub2 -> R600_TReg32_X
      3,	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_X:sub3 -> R600_TReg32_X
      0,	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_X:sub4
      0,	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_X:sub5
      0,	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_X:sub6
      0,	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_X:sub7
      0,	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_X:sub8
      0,	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_X:sub9
      0,	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_X:sub10
      0,	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_X:sub11
      0,	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_X:sub12
      0,	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_X:sub13
      0,	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_X:sub14
      0,	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_X:sub15
    },
    {	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_Y
      8,	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_Y:sub0 -> R600_TReg32_Y
      8,	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_Y:sub1 -> R600_TReg32_Y
      8,	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_Y:sub2 -> R600_TReg32_Y
      8,	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_Y:sub3 -> R600_TReg32_Y
      0,	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_Y:sub4
      0,	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_Y:sub5
      0,	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_Y:sub6
      0,	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_Y:sub7
      0,	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_Y:sub8
      0,	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_Y:sub9
      0,	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_Y:sub10
      0,	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_Y:sub11
      0,	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_Y:sub12
      0,	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_Y:sub13
      0,	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_Y:sub14
      0,	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_Y:sub15
    },
    {	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_Z
      9,	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_Z:sub0 -> R600_TReg32_Z
      9,	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_Z:sub1 -> R600_TReg32_Z
      9,	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_Z:sub2 -> R600_TReg32_Z
      9,	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_Z:sub3 -> R600_TReg32_Z
      0,	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_Z:sub4
      0,	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_Z:sub5
      0,	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_Z:sub6
      0,	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_Z:sub7
      0,	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_Z:sub8
      0,	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_Z:sub9
      0,	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_Z:sub10
      0,	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_Z:sub11
      0,	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_Z:sub12
      0,	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_Z:sub13
      0,	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_Z:sub14
      0,	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_Z:sub15
    },
  };
  assert(RC && "Missing regclass");
  if (!Idx) return RC;
  --Idx;
  assert(Idx < 16 && "Bad subreg");
  unsigned TV = Table[RC->getID()][Idx];
  return TV ? getRegClass(TV - 1) : nullptr;
}

/// Get the weight in units of pressure for this register class.
const RegClassWeight &R600GenRegisterInfo::
getRegClassWeight(const TargetRegisterClass *RC) const {
  static const RegClassWeight RCWeightTable[] = {
    {0, 942},  	// R600_Reg32
    {0, 513},  	// R600_TReg32
    {0, 129},  	// R600_TReg32_X
    {0, 128},  	// R600_Addr
    {0, 128},  	// R600_KC0
    {0, 128},  	// R600_KC1
    {0, 128},  	// R600_TReg32_W
    {0, 128},  	// R600_TReg32_Y
    {0, 128},  	// R600_TReg32_Z
    {0, 33},  	// R600_ArrayBase
    {0, 32},  	// R600_KC0_W
    {0, 32},  	// R600_KC0_X
    {0, 32},  	// R600_KC0_Y
    {0, 32},  	// R600_KC0_Z
    {0, 32},  	// R600_KC1_W
    {0, 32},  	// R600_KC1_X
    {0, 32},  	// R600_KC1_Y
    {0, 32},  	// R600_KC1_Z
    {0, 1},  	// R600_LDS_SRC_REG
    {0, 3},  	// R600_Predicate
    {0, 0},  	// R600_Addr_W
    {0, 0},  	// R600_Addr_Y
    {0, 0},  	// R600_Addr_Z
    {1, 1},  	// R600_LDS_SRC_REG_and_R600_Reg32
    {0, 1},  	// R600_Predicate_Bit
    {0, 128},  	// R600_Reg64
    {0, 16},  	// R600_Reg64Vertical
    {2, 4},  	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_W
    {2, 4},  	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_X
    {2, 4},  	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_Y
    {2, 4},  	// R600_Reg64Vertical_with_sub0_in_R600_TReg32_Z
    {0, 512},  	// R600_Reg128
    {0, 16},  	// R600_Reg128Vertical
    {4, 4},  	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_W
    {4, 4},  	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_X
    {4, 4},  	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_Y
    {4, 4},  	// R600_Reg128Vertical_with_sub0_in_R600_TReg32_Z
  };
  return RCWeightTable[RC->getID()];
}

/// Get the weight in units of pressure for this register unit.
unsigned R600GenRegisterInfo::
getRegUnitWeight(unsigned RegUnit) const {
  assert(RegUnit < 1342 && "invalid register unit");
  // All register units have unit weight.
  return 1;
}


// Get the number of dimensions of register pressure.
unsigned R600GenRegisterInfo::getNumRegPressureSets() const {
  return 23;
}

// Get the name of this register unit pressure set.
const char *R600GenRegisterInfo::
getRegPressureSetName(unsigned Idx) const {
  static const char *PressureNameTable[] = {
    "R600_LDS_SRC_REG_and_R600_Reg32",
    "R600_Predicate_Bit",
    "R600_Predicate",
    "R600_Reg64Vertical_with_sub0_in_R600_TReg32_W",
    "R600_Reg64Vertical_with_sub0_in_R600_TReg32_X",
    "R600_Reg64Vertical_with_sub0_in_R600_TReg32_Y",
    "R600_Reg64Vertical_with_sub0_in_R600_TReg32_Z",
    "R600_Reg64Vertical",
    "R600_ArrayBase",
    "R600_TReg32_W",
    "R600_TReg32_Y",
    "R600_TReg32_Z",
    "R600_Reg64",
    "R600_TReg32_X",
    "R600_Reg64_with_R600_Reg64Vertical",
    "R600_TReg32_W_with_R600_Reg64Vertical",
    "R600_TReg32_Y_with_R600_Reg64Vertical",
    "R600_TReg32_Z_with_R600_Reg64Vertical",
    "R600_TReg32_X_with_R600_Reg64Vertical",
    "R600_TReg32_Y_with_R600_Reg64",
    "R600_TReg32_X_with_R600_Reg64",
    "R600_TReg32",
    "R600_Reg32",
  };
  return PressureNameTable[Idx];
}

// Get the register unit pressure limit for this dimension.
// This limit must be adjusted dynamically for reserved registers.
unsigned R600GenRegisterInfo::
getRegPressureSetLimit(const MachineFunction &MF, unsigned Idx) const {
  static const uint16_t PressureLimitTable[] = {
    1,  	// 0: R600_LDS_SRC_REG_and_R600_Reg32
    1,  	// 1: R600_Predicate_Bit
    3,  	// 2: R600_Predicate
    4,  	// 3: R600_Reg64Vertical_with_sub0_in_R600_TReg32_W
    4,  	// 4: R600_Reg64Vertical_with_sub0_in_R600_TReg32_X
    4,  	// 5: R600_Reg64Vertical_with_sub0_in_R600_TReg32_Y
    4,  	// 6: R600_Reg64Vertical_with_sub0_in_R600_TReg32_Z
    16,  	// 7: R600_Reg64Vertical
    33,  	// 8: R600_ArrayBase
    128,  	// 9: R600_TReg32_W
    128,  	// 10: R600_TReg32_Y
    128,  	// 11: R600_TReg32_Z
    128,  	// 12: R600_Reg64
    129,  	// 13: R600_TReg32_X
    136,  	// 14: R600_Reg64_with_R600_Reg64Vertical
    140,  	// 15: R600_TReg32_W_with_R600_Reg64Vertical
    140,  	// 16: R600_TReg32_Y_with_R600_Reg64Vertical
    140,  	// 17: R600_TReg32_Z_with_R600_Reg64Vertical
    141,  	// 18: R600_TReg32_X_with_R600_Reg64Vertical
    192,  	// 19: R600_TReg32_Y_with_R600_Reg64
    193,  	// 20: R600_TReg32_X_with_R600_Reg64
    513,  	// 21: R600_TReg32
    942,  	// 22: R600_Reg32
  };
  return PressureLimitTable[Idx];
}

/// Table of pressure sets per register class or unit.
static const int RCSetsTable[] = {
  /* 0 */ 1, -1,
  /* 2 */ 2, -1,
  /* 4 */ 0, 22, -1,
  /* 7 */ 8, 22, -1,
  /* 10 */ 9, 15, 21, 22, -1,
  /* 15 */ 11, 17, 21, 22, -1,
  /* 20 */ 7, 14, 15, 16, 17, 18, 21, 22, -1,
  /* 29 */ 3, 7, 9, 14, 15, 16, 17, 18, 21, 22, -1,
  /* 40 */ 6, 7, 11, 14, 15, 16, 17, 18, 21, 22, -1,
  /* 51 */ 10, 16, 19, 21, 22, -1,
  /* 57 */ 13, 18, 20, 21, 22, -1,
  /* 63 */ 12, 14, 19, 20, 21, 22, -1,
  /* 70 */ 10, 12, 14, 16, 19, 20, 21, 22, -1,
  /* 79 */ 12, 13, 14, 18, 19, 20, 21, 22, -1,
  /* 88 */ 5, 7, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, -1,
  /* 102 */ 4, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, -1,
};

/// Get the dimensions of register pressure impacted by this register class.
/// Returns a -1 terminated array of pressure set IDs
const int *R600GenRegisterInfo::
getRegClassPressureSets(const TargetRegisterClass *RC) const {
  static const uint8_t RCSetStartTable[] = {
    5,12,57,1,1,1,10,51,15,7,1,1,1,1,1,1,1,1,1,2,1,1,1,4,0,63,20,29,102,88,40,12,20,29,102,88,40,};
  return &RCSetsTable[RCSetStartTable[RC->getID()]];
}

/// Get the dimensions of register pressure impacted by this register unit.
/// Returns a -1 terminated array of pressure set IDs
const int *R600GenRegisterInfo::
getRegUnitPressureSets(unsigned RegUnit) const {
  assert(RegUnit < 1342 && "invalid register unit");
  static const uint8_t RUSetStartTable[] = {
    5,1,5,1,1,5,57,5,5,1,1,5,5,5,5,1,4,1,1,0,2,2,2,1,1,5,1,1,5,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,29,29,29,29,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,102,102,102,102,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,88,88,88,88,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,40,40,40,40,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,};
  return &RCSetsTable[RUSetStartTable[RegUnit]];
}

extern const MCRegisterDesc R600RegDesc[];
extern const int16_t R600RegDiffLists[];
extern const LaneBitmask R600LaneMaskLists[];
extern const char R600RegStrings[];
extern const char R600RegClassStrings[];
extern const MCPhysReg R600RegUnitRoots[][2];
extern const uint16_t R600SubRegIdxLists[];
extern const uint16_t R600RegEncodingTable[];
R600GenRegisterInfo::
R600GenRegisterInfo(unsigned RA, unsigned DwarfFlavour, unsigned EHFlavour,
      unsigned PC, unsigned HwMode)
  : TargetRegisterInfo(&R600RegInfoDesc, RegisterClasses, RegisterClasses+37,
             SubRegIndexNameTable, SubRegIdxRangeTable, SubRegIndexLaneMaskTable,
             LaneBitmask(0xFFFFFFFFFFFFFFF0), RegClassInfos, VTLists, HwMode) {
  InitMCRegisterInfo(R600RegDesc, 1675, RA, PC,
                     R600MCRegisterClasses, 37,
                     R600RegUnitRoots,
                     1342,
                     R600RegDiffLists,
                     R600LaneMaskLists,
                     R600RegStrings,
                     R600RegClassStrings,
                     R600SubRegIdxLists,
                     17,
                     R600RegEncodingTable);

}



ArrayRef<const uint32_t *> R600GenRegisterInfo::getRegMasks() const {
  return std::nullopt;
}

bool R600GenRegisterInfo::
isGeneralPurposeRegister(const MachineFunction &MF, MCRegister PhysReg) const {
  return
      false;
}

bool R600GenRegisterInfo::
isFixedRegister(const MachineFunction &MF, MCRegister PhysReg) const {
  return
      false;
}

bool R600GenRegisterInfo::
isArgumentRegister(const MachineFunction &MF, MCRegister PhysReg) const {
  return
      false;
}

bool R600GenRegisterInfo::
isConstantPhysReg(MCRegister PhysReg) const {
  return
      false;
}

ArrayRef<const char *> R600GenRegisterInfo::getRegMaskNames() const {
  return std::nullopt;
}

const R600FrameLowering *
R600GenRegisterInfo::getFrameLowering(const MachineFunction &MF) {
  return static_cast<const R600FrameLowering *>(
      MF.getSubtarget().getFrameLowering());
}

} // end namespace llvm

#endif // GET_REGINFO_TARGET_DESC

